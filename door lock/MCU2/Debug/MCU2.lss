
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000030da  0000316e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800068  00800068  00003176  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000105f  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007113  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b71f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__vector_3>
      10:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__vector_7>
      20:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_8>
      24:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a5 38       	cpi	r26, 0x85	; 133
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea ed       	ldi	r30, 0xDA	; 218
      78:	f0 e3       	ldi	r31, 0x30	; 48
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <main>
      8a:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DC_Motor_RotateClockWise>:
 */ 
#include "GPIO.h"
#include "DC_Motor.h"

 void DC_Motor_RotateClockWise(void)
 {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 
	 SET_BIT(DC_Motor_PORT , IN1);
     b4e:	a2 e3       	ldi	r26, 0x32	; 50
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e2 e3       	ldi	r30, 0x32	; 50
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	 CLEAR_BIT(DC_Motor_PORT , IN2);
     b5c:	a2 e3       	ldi	r26, 0x32	; 50
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e2 e3       	ldi	r30, 0x32	; 50
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
 }
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <DC_Motor_RotateAntiClockWise>:
 void DC_Motor_RotateAntiClockWise(void)
 {
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	 
		SET_BIT(DC_Motor_PORT , IN2);
     b78:	a2 e3       	ldi	r26, 0x32	; 50
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e2 e3       	ldi	r30, 0x32	; 50
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
		CLEAR_BIT(DC_Motor_PORT , IN1);
     b86:	a2 e3       	ldi	r26, 0x32	; 50
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e2 e3       	ldi	r30, 0x32	; 50
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	8c 93       	st	X, r24
 }
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <DC_Motor_stop>:
 void DC_Motor_stop(void)
 {
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(DC_Motor_PORT , IN1);
     ba2:	a2 e3       	ldi	r26, 0x32	; 50
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e2 e3       	ldi	r30, 0x32	; 50
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7b       	andi	r24, 0xBF	; 191
     bae:	8c 93       	st	X, r24
		CLEAR_BIT(DC_Motor_PORT , IN2);
     bb0:	a2 e3       	ldi	r26, 0x32	; 50
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e2 e3       	ldi	r30, 0x32	; 50
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <GPIO_setPinDirection>:
 /********************************************************************************/
 /********************		    Functions definations 		**********************/
 /********************************************************************************/ 
 /*				Determine pin in Port as Input or Output           				 */
void GPIO_setPinDirection(Uint8 a_port , Uint8 a_pin, Uint8 a_mode)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <GPIO_setPinDirection+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <GPIO_setPinDirection+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	6a 83       	std	Y+2, r22	; 0x02
     bd6:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_port)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3d 83       	std	Y+5, r19	; 0x05
     be0:	2c 83       	std	Y+4, r18	; 0x04
     be2:	6c 81       	ldd	r22, Y+4	; 0x04
     be4:	7d 81       	ldd	r23, Y+5	; 0x05
     be6:	61 30       	cpi	r22, 0x01	; 1
     be8:	71 05       	cpc	r23, r1
     bea:	69 f1       	breq	.+90     	; 0xc46 <GPIO_setPinDirection+0x82>
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	91 05       	cpc	r25, r1
     bf4:	34 f4       	brge	.+12     	; 0xc02 <GPIO_setPinDirection+0x3e>
     bf6:	2c 81       	ldd	r18, Y+4	; 0x04
     bf8:	3d 81       	ldd	r19, Y+5	; 0x05
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	69 f0       	breq	.+26     	; 0xc1a <GPIO_setPinDirection+0x56>
     c00:	63 c0       	rjmp	.+198    	; 0xcc8 <GPIO_setPinDirection+0x104>
     c02:	6c 81       	ldd	r22, Y+4	; 0x04
     c04:	7d 81       	ldd	r23, Y+5	; 0x05
     c06:	62 30       	cpi	r22, 0x02	; 2
     c08:	71 05       	cpc	r23, r1
     c0a:	99 f1       	breq	.+102    	; 0xc72 <GPIO_setPinDirection+0xae>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	91 05       	cpc	r25, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <GPIO_setPinDirection+0x54>
     c16:	43 c0       	rjmp	.+134    	; 0xc9e <GPIO_setPinDirection+0xda>
     c18:	57 c0       	rjmp	.+174    	; 0xcc8 <GPIO_setPinDirection+0x104>
	{
		case GPIO_PORTA :     DDRA|=(a_mode<<a_pin); break; 
     c1a:	aa e3       	ldi	r26, 0x3A	; 58
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ea e3       	ldi	r30, 0x3A	; 58
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	b9 01       	movw	r22, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <GPIO_setPinDirection+0x76>
     c36:	66 0f       	add	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <GPIO_setPinDirection+0x72>
     c3e:	cb 01       	movw	r24, r22
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	41 c0       	rjmp	.+130    	; 0xcc8 <GPIO_setPinDirection+0x104>
		case GPIO_PORTB :     DDRB|=(a_mode<<a_pin); break;
     c46:	a7 e3       	ldi	r26, 0x37	; 55
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	b9 01       	movw	r22, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <GPIO_setPinDirection+0xa2>
     c62:	66 0f       	add	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	8a 95       	dec	r24
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <GPIO_setPinDirection+0x9e>
     c6a:	cb 01       	movw	r24, r22
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	2b c0       	rjmp	.+86     	; 0xcc8 <GPIO_setPinDirection+0x104>
		case GPIO_PORTC :     DDRC|=(a_mode<<a_pin); break;
     c72:	a4 e3       	ldi	r26, 0x34	; 52
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e4 e3       	ldi	r30, 0x34	; 52
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	b9 01       	movw	r22, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <GPIO_setPinDirection+0xce>
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	8a 95       	dec	r24
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <GPIO_setPinDirection+0xca>
     c96:	cb 01       	movw	r24, r22
     c98:	84 2b       	or	r24, r20
     c9a:	8c 93       	st	X, r24
     c9c:	15 c0       	rjmp	.+42     	; 0xcc8 <GPIO_setPinDirection+0x104>
		case GPIO_PORTD :     DDRD|=(a_mode<<a_pin); break;
     c9e:	a1 e3       	ldi	r26, 0x31	; 49
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e1 e3       	ldi	r30, 0x31	; 49
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	b9 01       	movw	r22, r18
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <GPIO_setPinDirection+0xfa>
     cba:	66 0f       	add	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	8a 95       	dec	r24
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <GPIO_setPinDirection+0xf6>
     cc2:	cb 01       	movw	r24, r22
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
	}
	
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <GPIO_setPinValue>:
 /*				set pin in Port by value 0 or 1           				         */
void GPIO_setPinValue(Uint8 a_port , Uint8 a_pin, Uint8 a_value)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <GPIO_setPinValue+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <GPIO_setPinValue+0x8>
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	6a 83       	std	Y+2, r22	; 0x02
     cea:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_port)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3d 83       	std	Y+5, r19	; 0x05
     cf4:	2c 83       	std	Y+4, r18	; 0x04
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	9d 81       	ldd	r25, Y+5	; 0x05
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <GPIO_setPinValue+0x2a>
     d00:	47 c0       	rjmp	.+142    	; 0xd90 <GPIO_setPinValue+0xb8>
     d02:	2c 81       	ldd	r18, Y+4	; 0x04
     d04:	3d 81       	ldd	r19, Y+5	; 0x05
     d06:	22 30       	cpi	r18, 0x02	; 2
     d08:	31 05       	cpc	r19, r1
     d0a:	2c f4       	brge	.+10     	; 0xd16 <GPIO_setPinValue+0x3e>
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	71 f0       	breq	.+28     	; 0xd30 <GPIO_setPinValue+0x58>
     d14:	cb c0       	rjmp	.+406    	; 0xeac <GPIO_setPinValue+0x1d4>
     d16:	2c 81       	ldd	r18, Y+4	; 0x04
     d18:	3d 81       	ldd	r19, Y+5	; 0x05
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	31 05       	cpc	r19, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <GPIO_setPinValue+0x4a>
     d20:	67 c0       	rjmp	.+206    	; 0xdf0 <GPIO_setPinValue+0x118>
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	9d 81       	ldd	r25, Y+5	; 0x05
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	91 05       	cpc	r25, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <GPIO_setPinValue+0x56>
     d2c:	91 c0       	rjmp	.+290    	; 0xe50 <GPIO_setPinValue+0x178>
     d2e:	be c0       	rjmp	.+380    	; 0xeac <GPIO_setPinValue+0x1d4>
	{
		case GPIO_PORTA :    if (a_value == HIGH)
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	a1 f4       	brne	.+40     	; 0xd5e <GPIO_setPinValue+0x86>
							{
								SET_BIT(PORTA,a_pin);
     d36:	ab e3       	ldi	r26, 0x3B	; 59
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	eb e3       	ldi	r30, 0x3B	; 59
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setPinValue+0x7c>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setPinValue+0x78>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	a7 c0       	rjmp	.+334    	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	88 23       	and	r24, r24
     d62:	09 f0       	breq	.+2      	; 0xd66 <GPIO_setPinValue+0x8e>
     d64:	a3 c0       	rjmp	.+326    	; 0xeac <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTA,a_pin);
     d66:	ab e3       	ldi	r26, 0x3B	; 59
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	eb e3       	ldi	r30, 0x3B	; 59
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setPinValue+0xac>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setPinValue+0xa8>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	8e c0       	rjmp	.+284    	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							 break;
		case GPIO_PORTB :    if (a_value == HIGH)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	a1 f4       	brne	.+40     	; 0xdbe <GPIO_setPinValue+0xe6>
						 	{
								SET_BIT(PORTB,a_pin);
     d96:	a8 e3       	ldi	r26, 0x38	; 56
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 e3       	ldi	r30, 0x38	; 56
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <GPIO_setPinValue+0xdc>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <GPIO_setPinValue+0xd8>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	77 c0       	rjmp	.+238    	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 23       	and	r24, r24
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <GPIO_setPinValue+0xee>
     dc4:	73 c0       	rjmp	.+230    	; 0xeac <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTB,a_pin);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <GPIO_setPinValue+0x10c>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <GPIO_setPinValue+0x108>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	5e c0       	rjmp	.+188    	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							break;
		case GPIO_PORTC :    if (a_value == HIGH)
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	a1 f4       	brne	.+40     	; 0xe1e <GPIO_setPinValue+0x146>
							{
								SET_BIT(PORTC,a_pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <GPIO_setPinValue+0x13c>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <GPIO_setPinValue+0x138>
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	47 c0       	rjmp	.+142    	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 23       	and	r24, r24
     e22:	09 f0       	breq	.+2      	; 0xe26 <GPIO_setPinValue+0x14e>
     e24:	43 c0       	rjmp	.+134    	; 0xeac <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTC,a_pin);
     e26:	a5 e3       	ldi	r26, 0x35	; 53
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e3       	ldi	r30, 0x35	; 53
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <GPIO_setPinValue+0x16c>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <GPIO_setPinValue+0x168>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	2e c0       	rjmp	.+92     	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							break;
		case GPIO_PORTD :    if (a_value == HIGH)
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	a1 f4       	brne	.+40     	; 0xe7e <GPIO_setPinValue+0x1a6>
							{
								SET_BIT(PORTD,a_pin);
     e56:	a2 e3       	ldi	r26, 0x32	; 50
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e2 e3       	ldi	r30, 0x32	; 50
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <GPIO_setPinValue+0x19c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <GPIO_setPinValue+0x198>
     e78:	84 2b       	or	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	17 c0       	rjmp	.+46     	; 0xeac <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	88 23       	and	r24, r24
     e82:	a1 f4       	brne	.+40     	; 0xeac <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTD,a_pin);
     e84:	a2 e3       	ldi	r26, 0x32	; 50
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e2 e3       	ldi	r30, 0x32	; 50
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <GPIO_setPinValue+0x1ca>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <GPIO_setPinValue+0x1c6>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
							break;
	}
	
	

}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <GPIO_getPinValue>:
/*				get value from pin in Port                      				 */
Uint8 GPIO_getPinValue(Uint8 a_port , Uint8 a_pin)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <GPIO_getPinValue+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <GPIO_getPinValue+0x8>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8a 83       	std	Y+2, r24	; 0x02
     ecc:	6b 83       	std	Y+3, r22	; 0x03
	Uint8 Local_Value =0;
     ece:	19 82       	std	Y+1, r1	; 0x01
	switch(a_port)
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3d 83       	std	Y+5, r19	; 0x05
     ed8:	2c 83       	std	Y+4, r18	; 0x04
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	61 f1       	breq	.+88     	; 0xf3c <GPIO_getPinValue+0x80>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <GPIO_getPinValue+0x3c>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f0       	breq	.+26     	; 0xf10 <GPIO_getPinValue+0x54>
     ef6:	63 c0       	rjmp	.+198    	; 0xfbe <GPIO_getPinValue+0x102>
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	99 f1       	breq	.+102    	; 0xf68 <GPIO_getPinValue+0xac>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <GPIO_getPinValue+0x52>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <GPIO_getPinValue+0xd8>
     f0e:	57 c0       	rjmp	.+174    	; 0xfbe <GPIO_getPinValue+0x102>
	{
		case GPIO_PORTA :     Local_Value=GET_BIT(PINA,a_pin); break;
     f10:	a9 e3       	ldi	r26, 0x39	; 57
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e9 e3       	ldi	r30, 0x39	; 57
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_getPinValue+0x72>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_getPinValue+0x6e>
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	8c 91       	ld	r24, X
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	41 c0       	rjmp	.+130    	; 0xfbe <GPIO_getPinValue+0x102>
		case GPIO_PORTB :     Local_Value=GET_BIT(PINB,a_pin); break;
     f3c:	a6 e3       	ldi	r26, 0x36	; 54
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e6 e3       	ldi	r30, 0x36	; 54
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <GPIO_getPinValue+0x9e>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <GPIO_getPinValue+0x9a>
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	8c 91       	ld	r24, X
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	2b c0       	rjmp	.+86     	; 0xfbe <GPIO_getPinValue+0x102>
		case GPIO_PORTC :     Local_Value=GET_BIT(PINC,a_pin); break;
     f68:	a3 e3       	ldi	r26, 0x33	; 51
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e3 e3       	ldi	r30, 0x33	; 51
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_getPinValue+0xca>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_getPinValue+0xc6>
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	8c 91       	ld	r24, X
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <GPIO_getPinValue+0x102>
		case GPIO_PORTD :     Local_Value=GET_BIT(PIND,a_pin); break;
     f94:	a0 e3       	ldi	r26, 0x30	; 48
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e0 e3       	ldi	r30, 0x30	; 48
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_getPinValue+0xf6>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_getPinValue+0xf2>
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	8c 91       	ld	r24, X
     fbc:	89 83       	std	Y+1, r24	; 0x01
		default			:								       break;
	}
	return Local_Value;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <TWI_init>:


#include "I2C.h"

void TWI_init(void)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	TWBR=2;
     fd8:	e0 e2       	ldi	r30, 0x20	; 32
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	80 83       	st	Z, r24
	TWSR=0x00;
     fe0:	e1 e2       	ldi	r30, 0x21	; 33
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1
	TWAR =0b00000010;
     fe6:	e2 e2       	ldi	r30, 0x22	; 34
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	80 83       	st	Z, r24
	TWCR=(1<<TWEN);
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	80 83       	st	Z, r24
}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <TWI_start>:

void TWI_start(void)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1004:	e6 e5       	ldi	r30, 0x56	; 86
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	84 ea       	ldi	r24, 0xA4	; 164
    100a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    100c:	e6 e5       	ldi	r30, 0x56	; 86
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	dc f7       	brge	.-10     	; 0x100c <TWI_start+0x10>
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <TWI_stop>:

void TWI_stop(void)
{
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1024:	e6 e5       	ldi	r30, 0x56	; 86
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	84 e9       	ldi	r24, 0x94	; 148
    102a:	80 83       	st	Z, r24
	
}
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TWI_write>:
void TWI_write(Uint8 data)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
	TWDR =data;
    103e:	e3 e2       	ldi	r30, 0x23	; 35
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    1046:	e6 e5       	ldi	r30, 0x56	; 86
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	84 e8       	ldi	r24, 0x84	; 132
    104c:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    104e:	e6 e5       	ldi	r30, 0x56	; 86
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	dc f7       	brge	.-10     	; 0x104e <TWI_write+0x1c>

}
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TWI_read_with_ACK>:
Uint8 TWI_read_with_ACK(void)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	84 ec       	ldi	r24, 0xC4	; 196
    106e:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	dc f7       	brge	.-10     	; 0x1070 <TWI_read_with_ACK+0x10>
	return TWDR;
    107a:	e3 e2       	ldi	r30, 0x23	; 35
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z

}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <TWI_read_with_NACK>:
Uint8 TWI_read_with_NACK(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    108e:	e6 e5       	ldi	r30, 0x56	; 86
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	84 e8       	ldi	r24, 0x84	; 132
    1094:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1096:	e6 e5       	ldi	r30, 0x56	; 86
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	88 23       	and	r24, r24
    109e:	dc f7       	brge	.-10     	; 0x1096 <TWI_read_with_NACK+0x10>
	return TWDR;
    10a0:	e3 e2       	ldi	r30, 0x23	; 35
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z

	
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_getStatus>:
Uint8 TWI_getStatus(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	Uint8 status;
	status=TWSR&0XF8;
    10b6:	e1 e2       	ldi	r30, 0x21	; 33
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 7f       	andi	r24, 0xF8	; 248
    10be:	89 83       	std	Y+1, r24	; 0x01
	return status;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <LCD_init>:
 *  Author: Mohamed Hamada
 */ 
#include "LCD.h"

void LCD_init(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTR_PORT_DIR|=(1<<EN)|(1<<RS)|(1<<RW);
    10d2:	a7 e3       	ldi	r26, 0x37	; 55
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e3       	ldi	r30, 0x37	; 55
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 60       	ori	r24, 0x07	; 7
    10de:	8c 93       	st	X, r24
	#if DATA_BITS_MODE ==4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR|=0XF0;
    10e0:	aa e3       	ldi	r26, 0x3A	; 58
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ea e3       	ldi	r30, 0x3A	; 58
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 6f       	ori	r24, 0xF0	; 240
    10ec:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR|=0X0F;
		#endif	
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	0e 94 85 08 	call	0x110a	; 0x110a <LCD_sendCommand>
		LCD_sendCommand(FOUR_BITS_DATA_2_LINE_MODE);
    10f4:	88 e2       	ldi	r24, 0x28	; 40
    10f6:	0e 94 85 08 	call	0x110a	; 0x110a <LCD_sendCommand>
	#elif DATA_BITS_MODE ==8
		LCD_DATA_PORT_DIR =0XFF;
		LCD_sendCommand(EIGHT_BITS_DATA_2_LINE_MODE);
	#endif
		LCD_sendCommand(CURSOR_OFF);
    10fa:	8e e0       	ldi	r24, 0x0E	; 14
    10fc:	0e 94 85 08 	call	0x110a	; 0x110a <LCD_sendCommand>
		LCD_clear();
    1100:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <LCD_clear>
}
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <LCD_sendCommand>:
void LCD_sendCommand(Uint8 command)
{
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	c5 55       	subi	r28, 0x55	; 85
    1118:	d0 40       	sbci	r29, 0x00	; 0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	fe 01       	movw	r30, r28
    1126:	eb 5a       	subi	r30, 0xAB	; 171
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTR_PORT,RS);
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTR_PORT,RW);
    113a:	a8 e3       	ldi	r26, 0x38	; 56
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e8 e3       	ldi	r30, 0x38	; 56
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8d 7f       	andi	r24, 0xFD	; 253
    1146:	8c 93       	st	X, r24
    1148:	fe 01       	movw	r30, r28
    114a:	ef 5a       	subi	r30, 0xAF	; 175
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a0 e8       	ldi	r26, 0x80	; 128
    1154:	bf e3       	ldi	r27, 0x3F	; 63
    1156:	80 83       	st	Z, r24
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	a2 83       	std	Z+2, r26	; 0x02
    115c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115e:	8e 01       	movw	r16, r28
    1160:	03 5b       	subi	r16, 0xB3	; 179
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	fe 01       	movw	r30, r28
    1166:	ef 5a       	subi	r30, 0xAF	; 175
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a ef       	ldi	r20, 0xFA	; 250
    1178:	54 e4       	ldi	r21, 0x44	; 68
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	f8 01       	movw	r30, r16
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    118c:	fe 01       	movw	r30, r28
    118e:	e3 5b       	subi	r30, 0xB3	; 179
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	44 f4       	brge	.+16     	; 0x11ba <LCD_sendCommand+0xb0>
		__ticks = 1;
    11aa:	fe 01       	movw	r30, r28
    11ac:	e5 5b       	subi	r30, 0xB5	; 181
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	64 c0       	rjmp	.+200    	; 0x1282 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e3 5b       	subi	r30, 0xB3	; 179
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f ef       	ldi	r19, 0xFF	; 255
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	57 e4       	ldi	r21, 0x47	; 71
    11d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	0c f0       	brlt	.+2      	; 0x11da <LCD_sendCommand+0xd0>
    11d8:	43 c0       	rjmp	.+134    	; 0x1260 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11da:	fe 01       	movw	r30, r28
    11dc:	ef 5a       	subi	r30, 0xAF	; 175
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	8e 01       	movw	r16, r28
    11fa:	05 5b       	subi	r16, 0xB5	; 181
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
    1210:	1f c0       	rjmp	.+62     	; 0x1250 <LCD_sendCommand+0x146>
    1212:	fe 01       	movw	r30, r28
    1214:	e7 5b       	subi	r30, 0xB7	; 183
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1220:	fe 01       	movw	r30, r28
    1222:	e7 5b       	subi	r30, 0xB7	; 183
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <LCD_sendCommand+0x120>
    122e:	fe 01       	movw	r30, r28
    1230:	e7 5b       	subi	r30, 0xB7	; 183
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	de 01       	movw	r26, r28
    123a:	a5 5b       	subi	r26, 0xB5	; 181
    123c:	bf 4f       	sbci	r27, 0xFF	; 255
    123e:	fe 01       	movw	r30, r28
    1240:	e5 5b       	subi	r30, 0xB5	; 181
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	fe 01       	movw	r30, r28
    1252:	e5 5b       	subi	r30, 0xB5	; 181
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	d1 f6       	brne	.-76     	; 0x1212 <LCD_sendCommand+0x108>
    125e:	27 c0       	rjmp	.+78     	; 0x12ae <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	8e 01       	movw	r16, r28
    1262:	05 5b       	subi	r16, 0xB5	; 181
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	e3 5b       	subi	r30, 0xB3	; 179
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	82 81       	ldd	r24, Z+2	; 0x02
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	f8 01       	movw	r30, r16
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
    1282:	de 01       	movw	r26, r28
    1284:	a9 5b       	subi	r26, 0xB9	; 185
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	e5 5b       	subi	r30, 0xB5	; 181
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	8d 93       	st	X+, r24
    1294:	9c 93       	st	X, r25
    1296:	fe 01       	movw	r30, r28
    1298:	e9 5b       	subi	r30, 0xB9	; 185
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <LCD_sendCommand+0x196>
    12a4:	fe 01       	movw	r30, r28
    12a6:	e9 5b       	subi	r30, 0xB9	; 185
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTR_PORT,EN);
    12ae:	a8 e3       	ldi	r26, 0x38	; 56
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e3       	ldi	r30, 0x38	; 56
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	8c 93       	st	X, r24
    12bc:	fe 01       	movw	r30, r28
    12be:	ed 5b       	subi	r30, 0xBD	; 189
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e8       	ldi	r26, 0x80	; 128
    12c8:	bf e3       	ldi	r27, 0x3F	; 63
    12ca:	80 83       	st	Z, r24
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	a2 83       	std	Z+2, r26	; 0x02
    12d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	8e 01       	movw	r16, r28
    12d4:	01 5c       	subi	r16, 0xC1	; 193
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	fe 01       	movw	r30, r28
    12da:	ed 5b       	subi	r30, 0xBD	; 189
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	60 81       	ld	r22, Z
    12e0:	71 81       	ldd	r23, Z+1	; 0x01
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	f8 01       	movw	r30, r16
    12f8:	80 83       	st	Z, r24
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	a2 83       	std	Z+2, r26	; 0x02
    12fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1300:	fe 01       	movw	r30, r28
    1302:	ff 96       	adiw	r30, 0x3f	; 63
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <LCD_sendCommand+0x21c>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e af       	std	Y+62, r25	; 0x3e
    1322:	8d af       	std	Y+61, r24	; 0x3d
    1324:	46 c0       	rjmp	.+140    	; 0x13b2 <LCD_sendCommand+0x2a8>
	else if (__tmp > 65535)
    1326:	fe 01       	movw	r30, r28
    1328:	ff 96       	adiw	r30, 0x3f	; 63
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	64 f5       	brge	.+88     	; 0x139a <LCD_sendCommand+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	fe 01       	movw	r30, r28
    1344:	ed 5b       	subi	r30, 0xBD	; 189
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9e af       	std	Y+62, r25	; 0x3e
    136e:	8d af       	std	Y+61, r24	; 0x3d
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <LCD_sendCommand+0x286>
    1372:	88 ec       	ldi	r24, 0xC8	; 200
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c af       	std	Y+60, r25	; 0x3c
    1378:	8b af       	std	Y+59, r24	; 0x3b
    137a:	8b ad       	ldd	r24, Y+59	; 0x3b
    137c:	9c ad       	ldd	r25, Y+60	; 0x3c
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <LCD_sendCommand+0x274>
    1382:	9c af       	std	Y+60, r25	; 0x3c
    1384:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8d ad       	ldd	r24, Y+61	; 0x3d
    1388:	9e ad       	ldd	r25, Y+62	; 0x3e
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9e af       	std	Y+62, r25	; 0x3e
    138e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8d ad       	ldd	r24, Y+61	; 0x3d
    1392:	9e ad       	ldd	r25, Y+62	; 0x3e
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <LCD_sendCommand+0x268>
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <LCD_sendCommand+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	fe 01       	movw	r30, r28
    139c:	ff 96       	adiw	r30, 0x3f	; 63
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e af       	std	Y+62, r25	; 0x3e
    13b0:	8d af       	std	Y+61, r24	; 0x3d
    13b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b6:	9a af       	std	Y+58, r25	; 0x3a
    13b8:	89 af       	std	Y+57, r24	; 0x39
    13ba:	89 ad       	ldd	r24, Y+57	; 0x39
    13bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_sendCommand+0x2b4>
    13c2:	9a af       	std	Y+58, r25	; 0x3a
    13c4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =(command&0XF0)|(LCD_DATA_PORT&0x0F);		
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	fe 01       	movw	r30, r28
    13cc:	eb 5a       	subi	r30, 0xAB	; 171
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 81       	ld	r24, Z
    13d2:	98 2f       	mov	r25, r24
    13d4:	90 7f       	andi	r25, 0xF0	; 240
    13d6:	eb e3       	ldi	r30, 0x3B	; 59
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 70       	andi	r24, 0x0F	; 15
    13de:	89 2b       	or	r24, r25
    13e0:	8c 93       	st	X, r24
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e8       	ldi	r26, 0x80	; 128
    13e8:	bf e3       	ldi	r27, 0x3F	; 63
    13ea:	8d ab       	std	Y+53, r24	; 0x35
    13ec:	9e ab       	std	Y+54, r25	; 0x36
    13ee:	af ab       	std	Y+55, r26	; 0x37
    13f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f2:	6d a9       	ldd	r22, Y+53	; 0x35
    13f4:	7e a9       	ldd	r23, Y+54	; 0x36
    13f6:	8f a9       	ldd	r24, Y+55	; 0x37
    13f8:	98 ad       	ldd	r25, Y+56	; 0x38
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	4a ef       	ldi	r20, 0xFA	; 250
    1400:	54 e4       	ldi	r21, 0x44	; 68
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	89 ab       	std	Y+49, r24	; 0x31
    140c:	9a ab       	std	Y+50, r25	; 0x32
    140e:	ab ab       	std	Y+51, r26	; 0x33
    1410:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1412:	69 a9       	ldd	r22, Y+49	; 0x31
    1414:	7a a9       	ldd	r23, Y+50	; 0x32
    1416:	8b a9       	ldd	r24, Y+51	; 0x33
    1418:	9c a9       	ldd	r25, Y+52	; 0x34
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	2c f4       	brge	.+10     	; 0x1434 <LCD_sendCommand+0x32a>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	98 ab       	std	Y+48, r25	; 0x30
    1430:	8f a7       	std	Y+47, r24	; 0x2f
    1432:	3f c0       	rjmp	.+126    	; 0x14b2 <LCD_sendCommand+0x3a8>
	else if (__tmp > 65535)
    1434:	69 a9       	ldd	r22, Y+49	; 0x31
    1436:	7a a9       	ldd	r23, Y+50	; 0x32
    1438:	8b a9       	ldd	r24, Y+51	; 0x33
    143a:	9c a9       	ldd	r25, Y+52	; 0x34
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	4f e7       	ldi	r20, 0x7F	; 127
    1442:	57 e4       	ldi	r21, 0x47	; 71
    1444:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1448:	18 16       	cp	r1, r24
    144a:	4c f5       	brge	.+82     	; 0x149e <LCD_sendCommand+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144c:	6d a9       	ldd	r22, Y+53	; 0x35
    144e:	7e a9       	ldd	r23, Y+54	; 0x36
    1450:	8f a9       	ldd	r24, Y+55	; 0x37
    1452:	98 ad       	ldd	r25, Y+56	; 0x38
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <LCD_sendCommand+0x38a>
    1476:	88 ec       	ldi	r24, 0xC8	; 200
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9e a7       	std	Y+46, r25	; 0x2e
    147c:	8d a7       	std	Y+45, r24	; 0x2d
    147e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1480:	9e a5       	ldd	r25, Y+46	; 0x2e
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_sendCommand+0x378>
    1486:	9e a7       	std	Y+46, r25	; 0x2e
    1488:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	8f a5       	ldd	r24, Y+47	; 0x2f
    148c:	98 a9       	ldd	r25, Y+48	; 0x30
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	98 ab       	std	Y+48, r25	; 0x30
    1492:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1494:	8f a5       	ldd	r24, Y+47	; 0x2f
    1496:	98 a9       	ldd	r25, Y+48	; 0x30
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f7       	brne	.-38     	; 0x1476 <LCD_sendCommand+0x36c>
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <LCD_sendCommand+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149e:	69 a9       	ldd	r22, Y+49	; 0x31
    14a0:	7a a9       	ldd	r23, Y+50	; 0x32
    14a2:	8b a9       	ldd	r24, Y+51	; 0x33
    14a4:	9c a9       	ldd	r25, Y+52	; 0x34
    14a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	98 ab       	std	Y+48, r25	; 0x30
    14b0:	8f a7       	std	Y+47, r24	; 0x2f
    14b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b4:	98 a9       	ldd	r25, Y+48	; 0x30
    14b6:	9c a7       	std	Y+44, r25	; 0x2c
    14b8:	8b a7       	std	Y+43, r24	; 0x2b
    14ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    14bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCD_sendCommand+0x3b4>
    14c2:	9c a7       	std	Y+44, r25	; 0x2c
    14c4:	8b a7       	std	Y+43, r24	; 0x2b
		#else 
		    LCD_DATA_PORT =((command&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    14c6:	a8 e3       	ldi	r26, 0x38	; 56
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8b 7f       	andi	r24, 0xFB	; 251
    14d2:	8c 93       	st	X, r24
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e8       	ldi	r26, 0x80	; 128
    14da:	bf e3       	ldi	r27, 0x3F	; 63
    14dc:	8f a3       	std	Y+39, r24	; 0x27
    14de:	98 a7       	std	Y+40, r25	; 0x28
    14e0:	a9 a7       	std	Y+41, r26	; 0x29
    14e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6f a1       	ldd	r22, Y+39	; 0x27
    14e6:	78 a5       	ldd	r23, Y+40	; 0x28
    14e8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8b a3       	std	Y+35, r24	; 0x23
    14fe:	9c a3       	std	Y+36, r25	; 0x24
    1500:	ad a3       	std	Y+37, r26	; 0x25
    1502:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1504:	6b a1       	ldd	r22, Y+35	; 0x23
    1506:	7c a1       	ldd	r23, Y+36	; 0x24
    1508:	8d a1       	ldd	r24, Y+37	; 0x25
    150a:	9e a1       	ldd	r25, Y+38	; 0x26
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <LCD_sendCommand+0x41c>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9a a3       	std	Y+34, r25	; 0x22
    1522:	89 a3       	std	Y+33, r24	; 0x21
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1526:	6b a1       	ldd	r22, Y+35	; 0x23
    1528:	7c a1       	ldd	r23, Y+36	; 0x24
    152a:	8d a1       	ldd	r24, Y+37	; 0x25
    152c:	9e a1       	ldd	r25, Y+38	; 0x26
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <LCD_sendCommand+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6f a1       	ldd	r22, Y+39	; 0x27
    1540:	78 a5       	ldd	r23, Y+40	; 0x28
    1542:	89 a5       	ldd	r24, Y+41	; 0x29
    1544:	9a a5       	ldd	r25, Y+42	; 0x2a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9a a3       	std	Y+34, r25	; 0x22
    1564:	89 a3       	std	Y+33, r24	; 0x21
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <LCD_sendCommand+0x47c>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	98 a3       	std	Y+32, r25	; 0x20
    156e:	8f 8f       	std	Y+31, r24	; 0x1f
    1570:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1572:	98 a1       	ldd	r25, Y+32	; 0x20
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_sendCommand+0x46a>
    1578:	98 a3       	std	Y+32, r25	; 0x20
    157a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	89 a1       	ldd	r24, Y+33	; 0x21
    157e:	9a a1       	ldd	r25, Y+34	; 0x22
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9a a3       	std	Y+34, r25	; 0x22
    1584:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	89 a1       	ldd	r24, Y+33	; 0x21
    1588:	9a a1       	ldd	r25, Y+34	; 0x22
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <LCD_sendCommand+0x45e>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6b a1       	ldd	r22, Y+35	; 0x23
    1592:	7c a1       	ldd	r23, Y+36	; 0x24
    1594:	8d a1       	ldd	r24, Y+37	; 0x25
    1596:	9e a1       	ldd	r25, Y+38	; 0x26
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9a a3       	std	Y+34, r25	; 0x22
    15a2:	89 a3       	std	Y+33, r24	; 0x21
    15a4:	89 a1       	ldd	r24, Y+33	; 0x21
    15a6:	9a a1       	ldd	r25, Y+34	; 0x22
    15a8:	9e 8f       	std	Y+30, r25	; 0x1e
    15aa:	8d 8f       	std	Y+29, r24	; 0x1d
    15ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_sendCommand+0x4a6>
    15b4:	9e 8f       	std	Y+30, r25	; 0x1e
    15b6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    15b8:	a8 e3       	ldi	r26, 0x38	; 56
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	84 60       	ori	r24, 0x04	; 4
    15c4:	8c 93       	st	X, r24
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =((command&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
    15c6:	ab e3       	ldi	r26, 0x3B	; 59
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	fe 01       	movw	r30, r28
    15cc:	eb 5a       	subi	r30, 0xAB	; 171
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	80 81       	ld	r24, Z
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	82 95       	swap	r24
    15d8:	92 95       	swap	r25
    15da:	90 7f       	andi	r25, 0xF0	; 240
    15dc:	98 27       	eor	r25, r24
    15de:	80 7f       	andi	r24, 0xF0	; 240
    15e0:	98 27       	eor	r25, r24
    15e2:	98 2f       	mov	r25, r24
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 70       	andi	r24, 0x0F	; 15
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e8       	ldi	r26, 0x80	; 128
    15f6:	bf e3       	ldi	r27, 0x3F	; 63
    15f8:	89 8f       	std	Y+25, r24	; 0x19
    15fa:	9a 8f       	std	Y+26, r25	; 0x1a
    15fc:	ab 8f       	std	Y+27, r26	; 0x1b
    15fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	69 8d       	ldd	r22, Y+25	; 0x19
    1602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8d 8b       	std	Y+21, r24	; 0x15
    161a:	9e 8b       	std	Y+22, r25	; 0x16
    161c:	af 8b       	std	Y+23, r26	; 0x17
    161e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <LCD_sendCommand+0x538>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9c 8b       	std	Y+20, r25	; 0x14
    163e:	8b 8b       	std	Y+19, r24	; 0x13
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <LCD_sendCommand+0x5b6>
	else if (__tmp > 65535)
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <LCD_sendCommand+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	69 8d       	ldd	r22, Y+25	; 0x19
    165c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <LCD_sendCommand+0x598>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	89 8b       	std	Y+17, r24	; 0x11
    168c:	89 89       	ldd	r24, Y+17	; 0x11
    168e:	9a 89       	ldd	r25, Y+18	; 0x12
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <LCD_sendCommand+0x586>
    1694:	9a 8b       	std	Y+18, r25	; 0x12
    1696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <LCD_sendCommand+0x57a>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <LCD_sendCommand+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9c 8b       	std	Y+20, r25	; 0x14
    16be:	8b 8b       	std	Y+19, r24	; 0x13
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	98 8b       	std	Y+16, r25	; 0x10
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_sendCommand+0x5c2>
    16d0:	98 8b       	std	Y+16, r25	; 0x10
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT =((command&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8b 7f       	andi	r24, 0xFB	; 251
    16e0:	8c 93       	st	X, r24
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e8       	ldi	r26, 0x80	; 128
    16e8:	bf e3       	ldi	r27, 0x3F	; 63
    16ea:	8b 87       	std	Y+11, r24	; 0x0b
    16ec:	9c 87       	std	Y+12, r25	; 0x0c
    16ee:	ad 87       	std	Y+13, r26	; 0x0d
    16f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a ef       	ldi	r20, 0xFA	; 250
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8f 83       	std	Y+7, r24	; 0x07
    170c:	98 87       	std	Y+8, r25	; 0x08
    170e:	a9 87       	std	Y+9, r26	; 0x09
    1710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	2c f4       	brge	.+10     	; 0x1734 <LCD_sendCommand+0x62a>
		__ticks = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <LCD_sendCommand+0x6a8>
	else if (__tmp > 65535)
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1748:	18 16       	cp	r1, r24
    174a:	4c f5       	brge	.+82     	; 0x179e <LCD_sendCommand+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <LCD_sendCommand+0x68a>
    1776:	88 ec       	ldi	r24, 0xC8	; 200
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_sendCommand+0x678>
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f7       	brne	.-38     	; 0x1776 <LCD_sendCommand+0x66c>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <LCD_sendCommand+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_sendCommand+0x6b4>
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(LCD_CTR_PORT,EN);
		_delay_ms(1);
	#endif
	
	
}
    17c6:	cb 5a       	subi	r28, 0xAB	; 171
    17c8:	df 4f       	sbci	r29, 0xFF	; 255
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <LCD_displayChar>:
void LCD_displayChar(char data)
{
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	c5 55       	subi	r28, 0x55	; 85
    17ec:	d0 40       	sbci	r29, 0x00	; 0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	fe 01       	movw	r30, r28
    17fa:	eb 5a       	subi	r30, 0xAB	; 171
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 83       	st	Z, r24
		SET_BIT(LCD_CTR_PORT,RS);
    1800:	a8 e3       	ldi	r26, 0x38	; 56
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_CTR_PORT,RW);
    180e:	a8 e3       	ldi	r26, 0x38	; 56
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8d 7f       	andi	r24, 0xFD	; 253
    181a:	8c 93       	st	X, r24
    181c:	fe 01       	movw	r30, r28
    181e:	ef 5a       	subi	r30, 0xAF	; 175
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e8       	ldi	r26, 0x80	; 128
    1828:	bf e3       	ldi	r27, 0x3F	; 63
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	03 5b       	subi	r16, 0xB3	; 179
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	ef 5a       	subi	r30, 0xAF	; 175
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	e3 5b       	subi	r30, 0xB3	; 179
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e8       	ldi	r20, 0x80	; 128
    1874:	5f e3       	ldi	r21, 0x3F	; 63
    1876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    187a:	88 23       	and	r24, r24
    187c:	44 f4       	brge	.+16     	; 0x188e <LCD_displayChar+0xb0>
		__ticks = 1;
    187e:	fe 01       	movw	r30, r28
    1880:	e5 5b       	subi	r30, 0xB5	; 181
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    188e:	fe 01       	movw	r30, r28
    1890:	e3 5b       	subi	r30, 0xB3	; 179
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	3f ef       	ldi	r19, 0xFF	; 255
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	57 e4       	ldi	r21, 0x47	; 71
    18a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <LCD_displayChar+0xd0>
    18ac:	43 c0       	rjmp	.+134    	; 0x1934 <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 5a       	subi	r30, 0xAF	; 175
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e2       	ldi	r20, 0x20	; 32
    18c2:	51 e4       	ldi	r21, 0x41	; 65
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8e 01       	movw	r16, r28
    18ce:	05 5b       	subi	r16, 0xB5	; 181
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	f8 01       	movw	r30, r16
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <LCD_displayChar+0x146>
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5b       	subi	r30, 0xB7	; 183
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	88 ec       	ldi	r24, 0xC8	; 200
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	fe 01       	movw	r30, r28
    18f6:	e7 5b       	subi	r30, 0xB7	; 183
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <LCD_displayChar+0x120>
    1902:	fe 01       	movw	r30, r28
    1904:	e7 5b       	subi	r30, 0xB7	; 183
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	de 01       	movw	r26, r28
    190e:	a5 5b       	subi	r26, 0xB5	; 181
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	fe 01       	movw	r30, r28
    1914:	e5 5b       	subi	r30, 0xB5	; 181
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	fe 01       	movw	r30, r28
    1926:	e5 5b       	subi	r30, 0xB5	; 181
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	d1 f6       	brne	.-76     	; 0x18e6 <LCD_displayChar+0x108>
    1932:	27 c0       	rjmp	.+78     	; 0x1982 <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	8e 01       	movw	r16, r28
    1936:	05 5b       	subi	r16, 0xB5	; 181
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	fe 01       	movw	r30, r28
    193c:	e3 5b       	subi	r30, 0xB3	; 179
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
    1956:	de 01       	movw	r26, r28
    1958:	a9 5b       	subi	r26, 0xB9	; 185
    195a:	bf 4f       	sbci	r27, 0xFF	; 255
    195c:	fe 01       	movw	r30, r28
    195e:	e5 5b       	subi	r30, 0xB5	; 181
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	8d 93       	st	X+, r24
    1968:	9c 93       	st	X, r25
    196a:	fe 01       	movw	r30, r28
    196c:	e9 5b       	subi	r30, 0xB9	; 185
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_displayChar+0x196>
    1978:	fe 01       	movw	r30, r28
    197a:	e9 5b       	subi	r30, 0xB9	; 185
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    1982:	a8 e3       	ldi	r26, 0x38	; 56
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e8 e3       	ldi	r30, 0x38	; 56
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	8c 93       	st	X, r24
    1990:	fe 01       	movw	r30, r28
    1992:	ed 5b       	subi	r30, 0xBD	; 189
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	bf e3       	ldi	r27, 0x3F	; 63
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	8e 01       	movw	r16, r28
    19a8:	01 5c       	subi	r16, 0xC1	; 193
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	fe 01       	movw	r30, r28
    19ae:	ed 5b       	subi	r30, 0xBD	; 189
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d4:	fe 01       	movw	r30, r28
    19d6:	ff 96       	adiw	r30, 0x3f	; 63
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	2c f4       	brge	.+10     	; 0x19fa <LCD_displayChar+0x21c>
		__ticks = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9e af       	std	Y+62, r25	; 0x3e
    19f6:	8d af       	std	Y+61, r24	; 0x3d
    19f8:	46 c0       	rjmp	.+140    	; 0x1a86 <LCD_displayChar+0x2a8>
	else if (__tmp > 65535)
    19fa:	fe 01       	movw	r30, r28
    19fc:	ff 96       	adiw	r30, 0x3f	; 63
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	64 f5       	brge	.+88     	; 0x1a6e <LCD_displayChar+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	fe 01       	movw	r30, r28
    1a18:	ed 5b       	subi	r30, 0xBD	; 189
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e af       	std	Y+62, r25	; 0x3e
    1a42:	8d af       	std	Y+61, r24	; 0x3d
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_displayChar+0x286>
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9c af       	std	Y+60, r25	; 0x3c
    1a4c:	8b af       	std	Y+59, r24	; 0x3b
    1a4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a50:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_displayChar+0x274>
    1a56:	9c af       	std	Y+60, r25	; 0x3c
    1a58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9e af       	std	Y+62, r25	; 0x3e
    1a62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_displayChar+0x268>
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <LCD_displayChar+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ff 96       	adiw	r30, 0x3f	; 63
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e af       	std	Y+62, r25	; 0x3e
    1a84:	8d af       	std	Y+61, r24	; 0x3d
    1a86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8a:	9a af       	std	Y+58, r25	; 0x3a
    1a8c:	89 af       	std	Y+57, r24	; 0x39
    1a8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_displayChar+0x2b4>
    1a96:	9a af       	std	Y+58, r25	; 0x3a
    1a98:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =(data&0XF0)|(LCD_DATA_PORT&0x0F);
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	eb 5a       	subi	r30, 0xAB	; 171
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 81       	ld	r24, Z
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	90 7f       	andi	r25, 0xF0	; 240
    1aaa:	eb e3       	ldi	r30, 0x3B	; 59
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 70       	andi	r24, 0x0F	; 15
    1ab2:	89 2b       	or	r24, r25
    1ab4:	8c 93       	st	X, r24
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e8       	ldi	r26, 0x80	; 128
    1abc:	bf e3       	ldi	r27, 0x3F	; 63
    1abe:	8d ab       	std	Y+53, r24	; 0x35
    1ac0:	9e ab       	std	Y+54, r25	; 0x36
    1ac2:	af ab       	std	Y+55, r26	; 0x37
    1ac4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aca:	8f a9       	ldd	r24, Y+55	; 0x37
    1acc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	89 ab       	std	Y+49, r24	; 0x31
    1ae0:	9a ab       	std	Y+50, r25	; 0x32
    1ae2:	ab ab       	std	Y+51, r26	; 0x33
    1ae4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aea:	8b a9       	ldd	r24, Y+51	; 0x33
    1aec:	9c a9       	ldd	r25, Y+52	; 0x34
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <LCD_displayChar+0x32a>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <LCD_displayChar+0x3a8>
	else if (__tmp > 65535)
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <LCD_displayChar+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	6d a9       	ldd	r22, Y+53	; 0x35
    1b22:	7e a9       	ldd	r23, Y+54	; 0x36
    1b24:	8f a9       	ldd	r24, Y+55	; 0x37
    1b26:	98 ad       	ldd	r25, Y+56	; 0x38
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_displayChar+0x38a>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e a7       	std	Y+46, r25	; 0x2e
    1b50:	8d a7       	std	Y+45, r24	; 0x2d
    1b52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_displayChar+0x378>
    1b5a:	9e a7       	std	Y+46, r25	; 0x2e
    1b5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b60:	98 a9       	ldd	r25, Y+48	; 0x30
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_displayChar+0x36c>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <LCD_displayChar+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	69 a9       	ldd	r22, Y+49	; 0x31
    1b74:	7a a9       	ldd	r23, Y+50	; 0x32
    1b76:	8b a9       	ldd	r24, Y+51	; 0x33
    1b78:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	98 ab       	std	Y+48, r25	; 0x30
    1b84:	8f a7       	std	Y+47, r24	; 0x2f
    1b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b88:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8a:	9c a7       	std	Y+44, r25	; 0x2c
    1b8c:	8b a7       	std	Y+43, r24	; 0x2b
    1b8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_displayChar+0x3b4>
    1b96:	9c a7       	std	Y+44, r25	; 0x2c
    1b98:	8b a7       	std	Y+43, r24	; 0x2b
		#else
		LCD_DATA_PORT =((data&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    1b9a:	a8 e3       	ldi	r26, 0x38	; 56
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8b 7f       	andi	r24, 0xFB	; 251
    1ba6:	8c 93       	st	X, r24
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e8       	ldi	r26, 0x80	; 128
    1bae:	bf e3       	ldi	r27, 0x3F	; 63
    1bb0:	8f a3       	std	Y+39, r24	; 0x27
    1bb2:	98 a7       	std	Y+40, r25	; 0x28
    1bb4:	a9 a7       	std	Y+41, r26	; 0x29
    1bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	9c a3       	std	Y+36, r25	; 0x24
    1bd4:	ad a3       	std	Y+37, r26	; 0x25
    1bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_displayChar+0x41c>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_displayChar+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6f a1       	ldd	r22, Y+39	; 0x27
    1c14:	78 a5       	ldd	r23, Y+40	; 0x28
    1c16:	89 a5       	ldd	r24, Y+41	; 0x29
    1c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_displayChar+0x47c>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
    1c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c46:	98 a1       	ldd	r25, Y+32	; 0x20
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_displayChar+0x46a>
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_displayChar+0x45e>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6b a1       	ldd	r22, Y+35	; 0x23
    1c66:	7c a1       	ldd	r23, Y+36	; 0x24
    1c68:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_displayChar+0x4a6>
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    1c8c:	a8 e3       	ldi	r26, 0x38	; 56
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e8 e3       	ldi	r30, 0x38	; 56
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	84 60       	ori	r24, 0x04	; 4
    1c98:	8c 93       	st	X, r24
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =((data&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
    1c9a:	ab e3       	ldi	r26, 0x3B	; 59
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	eb 5a       	subi	r30, 0xAB	; 171
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	82 95       	swap	r24
    1cac:	92 95       	swap	r25
    1cae:	90 7f       	andi	r25, 0xF0	; 240
    1cb0:	98 27       	eor	r25, r24
    1cb2:	80 7f       	andi	r24, 0xF0	; 240
    1cb4:	98 27       	eor	r25, r24
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	eb e3       	ldi	r30, 0x3B	; 59
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 70       	andi	r24, 0x0F	; 15
    1cc0:	89 2b       	or	r24, r25
    1cc2:	8c 93       	st	X, r24
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	bf e3       	ldi	r27, 0x3F	; 63
    1ccc:	89 8f       	std	Y+25, r24	; 0x19
    1cce:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	54 e4       	ldi	r21, 0x44	; 68
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8d 8b       	std	Y+21, r24	; 0x15
    1cee:	9e 8b       	std	Y+22, r25	; 0x16
    1cf0:	af 8b       	std	Y+23, r26	; 0x17
    1cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <LCD_displayChar+0x538>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <LCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <LCD_displayChar+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_displayChar+0x598>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9a 8b       	std	Y+18, r25	; 0x12
    1d5e:	89 8b       	std	Y+17, r24	; 0x11
    1d60:	89 89       	ldd	r24, Y+17	; 0x11
    1d62:	9a 89       	ldd	r25, Y+18	; 0x12
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_displayChar+0x586>
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_displayChar+0x57a>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <LCD_displayChar+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	98 8b       	std	Y+16, r25	; 0x10
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	98 89       	ldd	r25, Y+16	; 0x10
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_displayChar+0x5c2>
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f
		#else
		LCD_DATA_PORT =((data&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    1da8:	a8 e3       	ldi	r26, 0x38	; 56
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e8 e3       	ldi	r30, 0x38	; 56
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	8b 7f       	andi	r24, 0xFB	; 251
    1db4:	8c 93       	st	X, r24
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a0 e8       	ldi	r26, 0x80	; 128
    1dbc:	bf e3       	ldi	r27, 0x3F	; 63
    1dbe:	8b 87       	std	Y+11, r24	; 0x0b
    1dc0:	9c 87       	std	Y+12, r25	; 0x0c
    1dc2:	ad 87       	std	Y+13, r26	; 0x0d
    1dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a ef       	ldi	r20, 0xFA	; 250
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8f 83       	std	Y+7, r24	; 0x07
    1de0:	98 87       	std	Y+8, r25	; 0x08
    1de2:	a9 87       	std	Y+9, r26	; 0x09
    1de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfa:	88 23       	and	r24, r24
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <LCD_displayChar+0x62a>
		__ticks = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
    1e06:	3f c0       	rjmp	.+126    	; 0x1e86 <LCD_displayChar+0x6a8>
	else if (__tmp > 65535)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	3f ef       	ldi	r19, 0xFF	; 255
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	57 e4       	ldi	r21, 0x47	; 71
    1e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	4c f5       	brge	.+82     	; 0x1e72 <LCD_displayChar+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e2       	ldi	r20, 0x20	; 32
    1e2e:	51 e4       	ldi	r21, 0x41	; 65
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <LCD_displayChar+0x68a>
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayChar+0x678>
    1e5a:	9c 83       	std	Y+4, r25	; 0x04
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	69 f7       	brne	.-38     	; 0x1e4a <LCD_displayChar+0x66c>
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <LCD_displayChar+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	9a 83       	std	Y+2, r25	; 0x02
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_displayChar+0x6b4>
    1e96:	9a 83       	std	Y+2, r25	; 0x02
    1e98:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
		_delay_ms(1);
		#endif
		
}
    1e9a:	cb 5a       	subi	r28, 0xAB	; 171
    1e9c:	df 4f       	sbci	r29, 0xFF	; 255
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	08 95       	ret

00001eb2 <LCD_displayString>:
void LCD_displayString(char*data)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_displayString+0x6>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	9b 83       	std	Y+3, r25	; 0x03
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i=0;
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	0e c0       	rjmp	.+28     	; 0x1ee2 <LCD_displayString+0x30>
	while(data[i]!='\0')
	{
		LCD_displayChar(data[i]);
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	80 81       	ld	r24, Z
    1ed8:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_displayChar>
		i++;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	89 83       	std	Y+1, r24	; 0x01
		
}
void LCD_displayString(char*data)
{
	Uint8 i=0;
	while(data[i]!='\0')
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	fc 01       	movw	r30, r24
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 23       	and	r24, r24
    1ef6:	39 f7       	brne	.-50     	; 0x1ec6 <LCD_displayString+0x14>
	{
		LCD_displayChar(data[i]);
		i++;
	}
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <LCD_clear>:
void LCD_clear()
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	0e 94 85 08 	call	0x110a	; 0x110a <LCD_sendCommand>
}
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(Uint8 row,Uint8 colum, char *data)
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <LCD_displayStringRowColumn+0x6>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <LCD_displayStringRowColumn+0x8>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	6a 83       	std	Y+2, r22	; 0x02
    1f28:	5c 83       	std	Y+4, r21	; 0x04
    1f2a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, colum);
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f30:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_goToRowColumn>
	LCD_displayString(data);
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_displayString>
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <LCD_goToRowColumn>:
void LCD_goToRowColumn(Uint8 row,Uint8 colum)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <LCD_goToRowColumn+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <LCD_goToRowColumn+0x8>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	6b 83       	std	Y+3, r22	; 0x03
		Uint8 address=0;
    1f5c:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3d 83       	std	Y+5, r19	; 0x05
    1f66:	2c 83       	std	Y+4, r18	; 0x04
    1f68:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	c1 f0       	breq	.+48     	; 0x1fa2 <LCD_goToRowColumn+0x58>
    1f72:	2c 81       	ldd	r18, Y+4	; 0x04
    1f74:	3d 81       	ldd	r19, Y+5	; 0x05
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <LCD_goToRowColumn+0x3c>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <LCD_goToRowColumn+0x52>
    1f84:	19 c0       	rjmp	.+50     	; 0x1fb8 <LCD_goToRowColumn+0x6e>
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	69 f0       	breq	.+26     	; 0x1faa <LCD_goToRowColumn+0x60>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <LCD_goToRowColumn+0x68>
    1f9a:	0e c0       	rjmp	.+28     	; 0x1fb8 <LCD_goToRowColumn+0x6e>
	{
		case 0 : address =colum;			break;
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	0b c0       	rjmp	.+22     	; 0x1fb8 <LCD_goToRowColumn+0x6e>
		case 1 : address=colum+0X40;		break;
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	80 5c       	subi	r24, 0xC0	; 192
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <LCD_goToRowColumn+0x6e>
		case 2 : address=colum+0X10;		break;
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	80 5f       	subi	r24, 0xF0	; 240
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <LCD_goToRowColumn+0x6e>
		case 3 : address=colum+0X50;		break;
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	80 5b       	subi	r24, 0xB0	; 176
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(SET_CURSOR_LOCATION | address);
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	0e 94 85 08 	call	0x110a	; 0x110a <LCD_sendCommand>

}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <LCD_intergerToString>:
void LCD_intergerToString(Uint16 data)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	a2 97       	sbiw	r28, 0x22	; 34
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	9a a3       	std	Y+34, r25	; 0x22
    1fe6:	89 a3       	std	Y+33, r24	; 0x21
	Uint16 buffer[16];
	itoa(data,buffer,10);
    1fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fea:	9a a1       	ldd	r25, Y+34	; 0x22
    1fec:	9e 01       	movw	r18, r28
    1fee:	2f 5f       	subi	r18, 0xFF	; 255
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	4a e0       	ldi	r20, 0x0A	; 10
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	0e 94 26 18 	call	0x304c	; 0x304c <itoa>
	LCD_displayString(buffer);
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_displayString>
    2004:	a2 96       	adiw	r28, 0x22	; 34
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <Timer0_SetCallBack>:
static volatile void (*g_callBackptr0)(void)=NULL;
static volatile void (*g_callBackptr1)(void)=NULL;
static volatile void (*g_callBackptr2)(void)=NULL;

void Timer0_SetCallBack(void(*a_ptr)(void))
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <Timer0_SetCallBack+0x6>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr0 =a_ptr;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	90 93 69 00 	sts	0x0069, r25
    202c:	80 93 68 00 	sts	0x0068, r24
}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <Timer1_SetCallBack>:
void Timer1_SetCallBack(void(*a_ptr)(void))
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <Timer1_SetCallBack+0x6>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr1 =a_ptr;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	90 93 6b 00 	sts	0x006B, r25
    2050:	80 93 6a 00 	sts	0x006A, r24
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <Timer2_SetCallBack>:
void Timer2_SetCallBack(void(*a_ptr)(void))
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <Timer2_SetCallBack+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr2 =a_ptr;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	90 93 6d 00 	sts	0x006D, r25
    2074:	80 93 6c 00 	sts	0x006C, r24
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <__vector_9>:
/*Timer 0 interrupt service routine , overflow mode */
ISR(TIMER0_OVF_vect)
{
    2082:	1f 92       	push	r1
    2084:	0f 92       	push	r0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	0f 92       	push	r0
    208a:	11 24       	eor	r1, r1
    208c:	2f 93       	push	r18
    208e:	3f 93       	push	r19
    2090:	4f 93       	push	r20
    2092:	5f 93       	push	r21
    2094:	6f 93       	push	r22
    2096:	7f 93       	push	r23
    2098:	8f 93       	push	r24
    209a:	9f 93       	push	r25
    209c:	af 93       	push	r26
    209e:	bf 93       	push	r27
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr0 != NULL)
    20ac:	80 91 68 00 	lds	r24, 0x0068
    20b0:	90 91 69 00 	lds	r25, 0x0069
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	29 f0       	breq	.+10     	; 0x20c2 <__vector_9+0x40>
	{
		(*g_callBackptr0)();
    20b8:	e0 91 68 00 	lds	r30, 0x0068
    20bc:	f0 91 69 00 	lds	r31, 0x0069
    20c0:	09 95       	icall
	}
}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <__vector_19>:
/*Timer 0 interrupt service routine , compare  mode */
ISR(TIMER0_COMP_vect)
{
    20e8:	1f 92       	push	r1
    20ea:	0f 92       	push	r0
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	0f 92       	push	r0
    20f0:	11 24       	eor	r1, r1
    20f2:	2f 93       	push	r18
    20f4:	3f 93       	push	r19
    20f6:	4f 93       	push	r20
    20f8:	5f 93       	push	r21
    20fa:	6f 93       	push	r22
    20fc:	7f 93       	push	r23
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr0 != NULL)
    2112:	80 91 68 00 	lds	r24, 0x0068
    2116:	90 91 69 00 	lds	r25, 0x0069
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	29 f0       	breq	.+10     	; 0x2128 <__vector_19+0x40>
	{
		(*g_callBackptr0)();
    211e:	e0 91 68 00 	lds	r30, 0x0068
    2122:	f0 91 69 00 	lds	r31, 0x0069
    2126:	09 95       	icall
	}
}
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	ff 91       	pop	r31
    212e:	ef 91       	pop	r30
    2130:	bf 91       	pop	r27
    2132:	af 91       	pop	r26
    2134:	9f 91       	pop	r25
    2136:	8f 91       	pop	r24
    2138:	7f 91       	pop	r23
    213a:	6f 91       	pop	r22
    213c:	5f 91       	pop	r21
    213e:	4f 91       	pop	r20
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <__vector_8>:
/*Timer 1 interrupt service routine , overflow mode */
ISR(TIMER1_OVF_vect)
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr1 != NULL)
    2178:	80 91 6a 00 	lds	r24, 0x006A
    217c:	90 91 6b 00 	lds	r25, 0x006B
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	29 f0       	breq	.+10     	; 0x218e <__vector_8+0x40>
	{
		(*g_callBackptr1)();
    2184:	e0 91 6a 00 	lds	r30, 0x006A
    2188:	f0 91 6b 00 	lds	r31, 0x006B
    218c:	09 95       	icall
	}
}
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	ff 91       	pop	r31
    2194:	ef 91       	pop	r30
    2196:	bf 91       	pop	r27
    2198:	af 91       	pop	r26
    219a:	9f 91       	pop	r25
    219c:	8f 91       	pop	r24
    219e:	7f 91       	pop	r23
    21a0:	6f 91       	pop	r22
    21a2:	5f 91       	pop	r21
    21a4:	4f 91       	pop	r20
    21a6:	3f 91       	pop	r19
    21a8:	2f 91       	pop	r18
    21aa:	0f 90       	pop	r0
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	0f 90       	pop	r0
    21b0:	1f 90       	pop	r1
    21b2:	18 95       	reti

000021b4 <__vector_7>:
/*Timer 1 interrupt service routine , compare mode */
ISR(TIMER1_COMPB_vect)
{
    21b4:	1f 92       	push	r1
    21b6:	0f 92       	push	r0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	0f 92       	push	r0
    21bc:	11 24       	eor	r1, r1
    21be:	2f 93       	push	r18
    21c0:	3f 93       	push	r19
    21c2:	4f 93       	push	r20
    21c4:	5f 93       	push	r21
    21c6:	6f 93       	push	r22
    21c8:	7f 93       	push	r23
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr1 != NULL)
    21de:	80 91 6a 00 	lds	r24, 0x006A
    21e2:	90 91 6b 00 	lds	r25, 0x006B
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <__vector_7+0x40>
	{
		(*g_callBackptr1)();
    21ea:	e0 91 6a 00 	lds	r30, 0x006A
    21ee:	f0 91 6b 00 	lds	r31, 0x006B
    21f2:	09 95       	icall
	}
}
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	ff 91       	pop	r31
    21fa:	ef 91       	pop	r30
    21fc:	bf 91       	pop	r27
    21fe:	af 91       	pop	r26
    2200:	9f 91       	pop	r25
    2202:	8f 91       	pop	r24
    2204:	7f 91       	pop	r23
    2206:	6f 91       	pop	r22
    2208:	5f 91       	pop	r21
    220a:	4f 91       	pop	r20
    220c:	3f 91       	pop	r19
    220e:	2f 91       	pop	r18
    2210:	0f 90       	pop	r0
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_4>:
/*Timer 2 interrupt service routine , overflow mode */
ISR(TIMER2_OVF_vect)
{
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	0f 92       	push	r0
    2222:	11 24       	eor	r1, r1
    2224:	2f 93       	push	r18
    2226:	3f 93       	push	r19
    2228:	4f 93       	push	r20
    222a:	5f 93       	push	r21
    222c:	6f 93       	push	r22
    222e:	7f 93       	push	r23
    2230:	8f 93       	push	r24
    2232:	9f 93       	push	r25
    2234:	af 93       	push	r26
    2236:	bf 93       	push	r27
    2238:	ef 93       	push	r30
    223a:	ff 93       	push	r31
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr2 != NULL)
    2244:	80 91 6c 00 	lds	r24, 0x006C
    2248:	90 91 6d 00 	lds	r25, 0x006D
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	29 f0       	breq	.+10     	; 0x225a <__vector_4+0x40>
	{
		(*g_callBackptr2)();
    2250:	e0 91 6c 00 	lds	r30, 0x006C
    2254:	f0 91 6d 00 	lds	r31, 0x006D
    2258:	09 95       	icall
	}
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	ff 91       	pop	r31
    2260:	ef 91       	pop	r30
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <__vector_3>:

/*Timer 2 interrupt service routine , compare mode */
ISR(TIMER2_COMP_vect)
{
    2280:	1f 92       	push	r1
    2282:	0f 92       	push	r0
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	0f 92       	push	r0
    2288:	11 24       	eor	r1, r1
    228a:	2f 93       	push	r18
    228c:	3f 93       	push	r19
    228e:	4f 93       	push	r20
    2290:	5f 93       	push	r21
    2292:	6f 93       	push	r22
    2294:	7f 93       	push	r23
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr2 != NULL)
    22aa:	80 91 6c 00 	lds	r24, 0x006C
    22ae:	90 91 6d 00 	lds	r25, 0x006D
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <__vector_3+0x40>
	{
		(*g_callBackptr2)();
    22b6:	e0 91 6c 00 	lds	r30, 0x006C
    22ba:	f0 91 6d 00 	lds	r31, 0x006D
    22be:	09 95       	icall
	}
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <Timer_Init>:


/***************************************function defination *************************************/

void Timer_Init(const TIMER_ConfigType* config_ptr)
{  
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	2a 97       	sbiw	r28, 0x0a	; 10
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
	
	switch (config_ptr->timerType)
    22fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	80 81       	ld	r24, Z
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3a 87       	std	Y+10, r19	; 0x0a
    230a:	29 87       	std	Y+9, r18	; 0x09
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <Timer_Init+0x32>
    2316:	52 c0       	rjmp	.+164    	; 0x23bc <Timer_Init+0xd6>
    2318:	29 85       	ldd	r18, Y+9	; 0x09
    231a:	3a 85       	ldd	r19, Y+10	; 0x0a
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <Timer_Init+0x3e>
    2322:	9e c0       	rjmp	.+316    	; 0x2460 <Timer_Init+0x17a>
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	09 f0       	breq	.+2      	; 0x232e <Timer_Init+0x48>
    232c:	df c0       	rjmp	.+446    	; 0x24ec <Timer_Init+0x206>
	{
		case TIMER0 : 
					SET_BIT(TCCR0,FOC0);
    232e:	a3 e5       	ldi	r26, 0x53	; 83
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e3 e5       	ldi	r30, 0x53	; 83
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 68       	ori	r24, 0x80	; 128
    233a:	8c 93       	st	X, r24
					TCCR0 |=config_ptr->prescalar;
    233c:	a3 e5       	ldi	r26, 0x53	; 83
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e3 e5       	ldi	r30, 0x53	; 83
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	90 81       	ld	r25, Z
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	89 2b       	or	r24, r25
    234e:	8c 93       	st	X, r24
					TCNT0 =config_ptr->Timer_InitValue;
    2350:	a2 e5       	ldi	r26, 0x52	; 82
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e9 81       	ldd	r30, Y+1	; 0x01
    2356:	fa 81       	ldd	r31, Y+2	; 0x02
    2358:	83 81       	ldd	r24, Z+3	; 0x03
    235a:	94 81       	ldd	r25, Z+4	; 0x04
    235c:	8c 93       	st	X, r24
					switch(config_ptr->mode)
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	81 81       	ldd	r24, Z+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	38 87       	std	Y+8, r19	; 0x08
    236a:	2f 83       	std	Y+7, r18	; 0x07
    236c:	8f 81       	ldd	r24, Y+7	; 0x07
    236e:	98 85       	ldd	r25, Y+8	; 0x08
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	31 f0       	breq	.+12     	; 0x2380 <Timer_Init+0x9a>
    2374:	2f 81       	ldd	r18, Y+7	; 0x07
    2376:	38 85       	ldd	r19, Y+8	; 0x08
    2378:	21 30       	cpi	r18, 0x01	; 1
    237a:	31 05       	cpc	r19, r1
    237c:	49 f0       	breq	.+18     	; 0x2390 <Timer_Init+0xaa>
    237e:	b6 c0       	rjmp	.+364    	; 0x24ec <Timer_Init+0x206>
					{
						case OVERFLOW : 
										SET_BIT(TIMSK,TOIE0);
    2380:	a9 e5       	ldi	r26, 0x59	; 89
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e9 e5       	ldi	r30, 0x59	; 89
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	81 60       	ori	r24, 0x01	; 1
    238c:	8c 93       	st	X, r24
    238e:	ae c0       	rjmp	.+348    	; 0x24ec <Timer_Init+0x206>
										break;
						case COMPARE  : SET_BIT(TIMSK,OCIE0);
    2390:	a9 e5       	ldi	r26, 0x59	; 89
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e9 e5       	ldi	r30, 0x59	; 89
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	82 60       	ori	r24, 0x02	; 2
    239c:	8c 93       	st	X, r24
										OCR0=config_ptr->Timer_ComValue;
    239e:	ac e5       	ldi	r26, 0x5C	; 92
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e9 81       	ldd	r30, Y+1	; 0x01
    23a4:	fa 81       	ldd	r31, Y+2	; 0x02
    23a6:	85 81       	ldd	r24, Z+5	; 0x05
    23a8:	96 81       	ldd	r25, Z+6	; 0x06
    23aa:	8c 93       	st	X, r24
										SET_BIT(TCCR0,WGM01);
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	88 60       	ori	r24, 0x08	; 8
    23b8:	8c 93       	st	X, r24
    23ba:	98 c0       	rjmp	.+304    	; 0x24ec <Timer_Init+0x206>
									    break;
					}
					break;
		case TIMER1 :
					SET_BIT(TCCR1A,FOC1A);
    23bc:	af e4       	ldi	r26, 0x4F	; 79
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ef e4       	ldi	r30, 0x4F	; 79
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 60       	ori	r24, 0x08	; 8
    23c8:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,FOC1B);
    23ca:	af e4       	ldi	r26, 0x4F	; 79
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ef e4       	ldi	r30, 0x4F	; 79
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	84 60       	ori	r24, 0x04	; 4
    23d6:	8c 93       	st	X, r24
					TCCR1B |=config_ptr->prescalar;
    23d8:	ae e4       	ldi	r26, 0x4E	; 78
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ee e4       	ldi	r30, 0x4E	; 78
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	90 81       	ld	r25, Z
    23e2:	e9 81       	ldd	r30, Y+1	; 0x01
    23e4:	fa 81       	ldd	r31, Y+2	; 0x02
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	89 2b       	or	r24, r25
    23ea:	8c 93       	st	X, r24
					TCNT1 =config_ptr->Timer_InitValue;
    23ec:	ac e4       	ldi	r26, 0x4C	; 76
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	83 81       	ldd	r24, Z+3	; 0x03
    23f6:	94 81       	ldd	r25, Z+4	; 0x04
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	9c 93       	st	X, r25
    23fc:	8e 93       	st	-X, r24
					switch(config_ptr->mode)
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	81 81       	ldd	r24, Z+1	; 0x01
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	3e 83       	std	Y+6, r19	; 0x06
    240a:	2d 83       	std	Y+5, r18	; 0x05
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	31 f0       	breq	.+12     	; 0x2420 <Timer_Init+0x13a>
    2414:	2d 81       	ldd	r18, Y+5	; 0x05
    2416:	3e 81       	ldd	r19, Y+6	; 0x06
    2418:	21 30       	cpi	r18, 0x01	; 1
    241a:	31 05       	cpc	r19, r1
    241c:	49 f0       	breq	.+18     	; 0x2430 <Timer_Init+0x14a>
    241e:	66 c0       	rjmp	.+204    	; 0x24ec <Timer_Init+0x206>
					{
						case OVERFLOW :
										SET_BIT(TIMSK,TOIE1);
    2420:	a9 e5       	ldi	r26, 0x59	; 89
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e9 e5       	ldi	r30, 0x59	; 89
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	84 60       	ori	r24, 0x04	; 4
    242c:	8c 93       	st	X, r24
    242e:	5e c0       	rjmp	.+188    	; 0x24ec <Timer_Init+0x206>
										break;
						case COMPARE  : 
										SET_BIT(TIMSK,OCIE1B);
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 60       	ori	r24, 0x08	; 8
    243c:	8c 93       	st	X, r24
										OCR1B=config_ptr->Timer_ComValue;
    243e:	a8 e4       	ldi	r26, 0x48	; 72
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	85 81       	ldd	r24, Z+5	; 0x05
    2448:	96 81       	ldd	r25, Z+6	; 0x06
    244a:	11 96       	adiw	r26, 0x01	; 1
    244c:	9c 93       	st	X, r25
    244e:	8e 93       	st	-X, r24
										SET_BIT(TCCR0,WGM12);
    2450:	a3 e5       	ldi	r26, 0x53	; 83
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e3 e5       	ldi	r30, 0x53	; 83
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	88 60       	ori	r24, 0x08	; 8
    245c:	8c 93       	st	X, r24
    245e:	46 c0       	rjmp	.+140    	; 0x24ec <Timer_Init+0x206>
										break;
					}
					break;
		case TIMER2 :
					SET_BIT(TCCR2,FOC2);
    2460:	a5 e4       	ldi	r26, 0x45	; 69
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e5 e4       	ldi	r30, 0x45	; 69
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 68       	ori	r24, 0x80	; 128
    246c:	8c 93       	st	X, r24
					TCCR2 |=config_ptr->prescalar;
    246e:	a5 e4       	ldi	r26, 0x45	; 69
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e5 e4       	ldi	r30, 0x45	; 69
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	90 81       	ld	r25, Z
    2478:	e9 81       	ldd	r30, Y+1	; 0x01
    247a:	fa 81       	ldd	r31, Y+2	; 0x02
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	89 2b       	or	r24, r25
    2480:	8c 93       	st	X, r24
					TCNT2 =config_ptr->Timer_InitValue;
    2482:	a4 e4       	ldi	r26, 0x44	; 68
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	83 81       	ldd	r24, Z+3	; 0x03
    248c:	94 81       	ldd	r25, Z+4	; 0x04
    248e:	8c 93       	st	X, r24
					switch(config_ptr->mode)
    2490:	e9 81       	ldd	r30, Y+1	; 0x01
    2492:	fa 81       	ldd	r31, Y+2	; 0x02
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	3c 83       	std	Y+4, r19	; 0x04
    249c:	2b 83       	std	Y+3, r18	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	31 f0       	breq	.+12     	; 0x24b2 <Timer_Init+0x1cc>
    24a6:	2b 81       	ldd	r18, Y+3	; 0x03
    24a8:	3c 81       	ldd	r19, Y+4	; 0x04
    24aa:	21 30       	cpi	r18, 0x01	; 1
    24ac:	31 05       	cpc	r19, r1
    24ae:	49 f0       	breq	.+18     	; 0x24c2 <Timer_Init+0x1dc>
    24b0:	1d c0       	rjmp	.+58     	; 0x24ec <Timer_Init+0x206>
					{
						case OVERFLOW :
										SET_BIT(TIMSK,TOIE2);
    24b2:	a9 e5       	ldi	r26, 0x59	; 89
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e9 e5       	ldi	r30, 0x59	; 89
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 64       	ori	r24, 0x40	; 64
    24be:	8c 93       	st	X, r24
    24c0:	15 c0       	rjmp	.+42     	; 0x24ec <Timer_Init+0x206>
										break;
						case COMPARE  : 
										SET_BIT(TIMSK,OCIE2);
    24c2:	a9 e5       	ldi	r26, 0x59	; 89
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e9 e5       	ldi	r30, 0x59	; 89
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 68       	ori	r24, 0x80	; 128
    24ce:	8c 93       	st	X, r24
										OCR2=config_ptr->Timer_ComValue;
    24d0:	a3 e4       	ldi	r26, 0x43	; 67
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	85 81       	ldd	r24, Z+5	; 0x05
    24da:	96 81       	ldd	r25, Z+6	; 0x06
    24dc:	8c 93       	st	X, r24
										SET_BIT(TCCR2,WGM21);
    24de:	a5 e4       	ldi	r26, 0x45	; 69
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e4       	ldi	r30, 0x45	; 69
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	88 60       	ori	r24, 0x08	; 8
    24ea:	8c 93       	st	X, r24
										break;
					}
					break;
	}
    24ec:	2a 96       	adiw	r28, 0x0a	; 10
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <UART_init>:
#include "UART.h"

#define BAUD_PRESCALE (((F_CPU / (UART_BAUDRATE * 8UL))) - 1)

void UART_init(void)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
		SET_BIT(DDRD,0);
    2506:	a1 e3       	ldi	r26, 0x31	; 49
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e1 e3       	ldi	r30, 0x31	; 49
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	81 60       	ori	r24, 0x01	; 1
    2512:	8c 93       	st	X, r24
		CLEAR_BIT(DDRD,0);
    2514:	a1 e3       	ldi	r26, 0x31	; 49
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e1 e3       	ldi	r30, 0x31	; 49
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	8c 93       	st	X, r24
	UCSRA = (1<<U2X);
    2522:	eb e2       	ldi	r30, 0x2B	; 43
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    252a:	ea e2       	ldi	r30, 0x2A	; 42
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	88 e1       	ldi	r24, 0x18	; 24
    2530:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2532:	e0 e4       	ldi	r30, 0x40	; 64
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	86 e8       	ldi	r24, 0x86	; 134
    2538:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    253a:	e0 e4       	ldi	r30, 0x40	; 64
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2540:	e9 e2       	ldi	r30, 0x29	; 41
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	87 e6       	ldi	r24, 0x67	; 103
    2546:	80 83       	st	Z, r24
}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <UART_sendByte>:
void UART_sendByte(const Uint8 data)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	89 83       	std	Y+1, r24	; 0x01
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    255a:	eb e2       	ldi	r30, 0x2B	; 43
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 72       	andi	r24, 0x20	; 32
    2566:	90 70       	andi	r25, 0x00	; 0
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	b9 f3       	breq	.-18     	; 0x255a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    256c:	ec e2       	ldi	r30, 0x2C	; 44
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <UART_recieveByte>:
Uint8 UART_recieveByte()
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2584:	eb e2       	ldi	r30, 0x2B	; 43
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	dc f7       	brge	.-10     	; 0x2584 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    258e:	ec e2       	ldi	r30, 0x2C	; 44
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <UART_sendString>:
void UART_sendString(const Uint8* data)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <UART_sendString+0x6>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
		Uint8 i = 0;
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <UART_sendString+0x30>
		while(data[i] != '\0')
		{
			UART_sendByte(data[i]);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
			i++;
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	89 83       	std	Y+1, r24	; 0x01
    return UDR;		
}
void UART_sendString(const Uint8* data)
{
		Uint8 i = 0;
		while(data[i] != '\0')
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	fc 01       	movw	r30, r24
    25d6:	e2 0f       	add	r30, r18
    25d8:	f3 1f       	adc	r31, r19
    25da:	80 81       	ld	r24, Z
    25dc:	88 23       	and	r24, r24
    25de:	39 f7       	brne	.-50     	; 0x25ae <UART_sendString+0x14>
		{
			UART_sendByte(data[i]);
			i++;
		}

}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <UART_recieveString>:
void UART_recieveString(Uint8* data)
{
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <UART_recieveString+0xa>
    25f6:	0f 92       	push	r0
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i = 0;
    2600:	19 82       	std	Y+1, r1	; 0x01
	data[i] = UART_recieveByte();
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	8c 01       	movw	r16, r24
    260e:	02 0f       	add	r16, r18
    2610:	13 1f       	adc	r17, r19
    2612:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	0f c0       	rjmp	.+30     	; 0x263a <UART_recieveString+0x4e>
	while(data[i] != '#')
	{
		i++;
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	8f 5f       	subi	r24, 0xFF	; 255
    2620:	89 83       	std	Y+1, r24	; 0x01
		data[i] = UART_recieveByte();
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	28 2f       	mov	r18, r24
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	8c 01       	movw	r16, r24
    262e:	02 0f       	add	r16, r18
    2630:	13 1f       	adc	r17, r19
    2632:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    2636:	f8 01       	movw	r30, r16
    2638:	80 83       	st	Z, r24
}
void UART_recieveString(Uint8* data)
{
	Uint8 i = 0;
	data[i] = UART_recieveByte();
	while(data[i] != '#')
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	fc 01       	movw	r30, r24
    2646:	e2 0f       	add	r30, r18
    2648:	f3 1f       	adc	r31, r19
    264a:	80 81       	ld	r24, Z
    264c:	83 32       	cpi	r24, 0x23	; 35
    264e:	31 f7       	brne	.-52     	; 0x261c <UART_recieveString+0x30>
	{
		i++;
		data[i] = UART_recieveByte();
	}
	data[i] = '\0';
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	fc 01       	movw	r30, r24
    265c:	e2 0f       	add	r30, r18
    265e:	f3 1f       	adc	r31, r19
    2660:	10 82       	st	Z, r1
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	08 95       	ret

00002672 <EEPROM_init>:




void EEPROM_init(void)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
    267a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TWI_init>
}
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <EEPROM_writeByte>:
Uint8 EEPROM_writeByte(Uint16 address,Uint16 data)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <EEPROM_writeByte+0x6>
    268a:	00 d0       	rcall	.+0      	; 0x268c <EEPROM_writeByte+0x8>
    268c:	0f 92       	push	r0
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	7c 83       	std	Y+4, r23	; 0x04
    2698:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
    269a:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_start>
	if(TWI_getStatus()!=TW_START)
    269e:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    26a2:	88 30       	cpi	r24, 0x08	; 8
    26a4:	11 f0       	breq	.+4      	; 0x26aa <EEPROM_writeByte+0x26>
	return ERROR;
    26a6:	1d 82       	std	Y+5, r1	; 0x05
    26a8:	28 c0       	rjmp	.+80     	; 0x26fa <EEPROM_writeByte+0x76>
	
	TWI_write((Uint8)(0XA0|((address&0X0700)>>7)));
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	80 70       	andi	r24, 0x00	; 0
    26b0:	97 70       	andi	r25, 0x07	; 7
    26b2:	88 0f       	add	r24, r24
    26b4:	89 2f       	mov	r24, r25
    26b6:	88 1f       	adc	r24, r24
    26b8:	99 0b       	sbc	r25, r25
    26ba:	91 95       	neg	r25
    26bc:	80 6a       	ori	r24, 0xA0	; 160
    26be:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
    26c2:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    26c6:	88 31       	cpi	r24, 0x18	; 24
    26c8:	11 f0       	breq	.+4      	; 0x26ce <EEPROM_writeByte+0x4a>
	return ERROR;
    26ca:	1d 82       	std	Y+5, r1	; 0x05
    26cc:	16 c0       	rjmp	.+44     	; 0x26fa <EEPROM_writeByte+0x76>
	TWI_write((Uint8)(address));
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
    26d4:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    26d8:	88 32       	cpi	r24, 0x28	; 40
    26da:	11 f0       	breq	.+4      	; 0x26e0 <EEPROM_writeByte+0x5c>
	return ERROR;
    26dc:	1d 82       	std	Y+5, r1	; 0x05
    26de:	0d c0       	rjmp	.+26     	; 0x26fa <EEPROM_writeByte+0x76>
	TWI_write((data));
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
    26e6:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    26ea:	88 32       	cpi	r24, 0x28	; 40
    26ec:	11 f0       	breq	.+4      	; 0x26f2 <EEPROM_writeByte+0x6e>
	return ERROR;
    26ee:	1d 82       	std	Y+5, r1	; 0x05
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <EEPROM_writeByte+0x76>
	TWI_stop();
    26f2:	0e 94 0e 08 	call	0x101c	; 0x101c <TWI_stop>
	return SUCCESS;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	8d 83       	std	Y+5, r24	; 0x05
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <EEPROM_readByte>:

Uint8 EEPROM_readByte(Uint16 address,Uint16* data)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <EEPROM_readByte+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <EEPROM_readByte+0x8>
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	7c 83       	std	Y+4, r23	; 0x04
    2720:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
    2722:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_start>
	if(TWI_getStatus()!=TW_START)
    2726:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    272a:	88 30       	cpi	r24, 0x08	; 8
    272c:	11 f0       	breq	.+4      	; 0x2732 <EEPROM_readByte+0x26>
	return ERROR;
    272e:	1d 82       	std	Y+5, r1	; 0x05
    2730:	47 c0       	rjmp	.+142    	; 0x27c0 <EEPROM_readByte+0xb4>
	TWI_write((Uint8)(0XA0|((address&0X0700)>>7)));
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	80 70       	andi	r24, 0x00	; 0
    2738:	97 70       	andi	r25, 0x07	; 7
    273a:	88 0f       	add	r24, r24
    273c:	89 2f       	mov	r24, r25
    273e:	88 1f       	adc	r24, r24
    2740:	99 0b       	sbc	r25, r25
    2742:	91 95       	neg	r25
    2744:	80 6a       	ori	r24, 0xA0	; 160
    2746:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
    274a:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    274e:	88 31       	cpi	r24, 0x18	; 24
    2750:	11 f0       	breq	.+4      	; 0x2756 <EEPROM_readByte+0x4a>
	return ERROR;
    2752:	1d 82       	std	Y+5, r1	; 0x05
    2754:	35 c0       	rjmp	.+106    	; 0x27c0 <EEPROM_readByte+0xb4>
	TWI_write((Uint8)(address));
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
    275c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    2760:	88 32       	cpi	r24, 0x28	; 40
    2762:	11 f0       	breq	.+4      	; 0x2768 <EEPROM_readByte+0x5c>
	return ERROR;
    2764:	1d 82       	std	Y+5, r1	; 0x05
    2766:	2c c0       	rjmp	.+88     	; 0x27c0 <EEPROM_readByte+0xb4>
	
	
	TWI_start();
    2768:	0e 94 fe 07 	call	0xffc	; 0xffc <TWI_start>
	if(TWI_getStatus()!=TW_REP_START)
    276c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    2770:	80 31       	cpi	r24, 0x10	; 16
    2772:	11 f0       	breq	.+4      	; 0x2778 <EEPROM_readByte+0x6c>
	return ERROR;
    2774:	1d 82       	std	Y+5, r1	; 0x05
    2776:	24 c0       	rjmp	.+72     	; 0x27c0 <EEPROM_readByte+0xb4>
	TWI_write((Uint8)(0XA0|((address&0X0700)>>7)|1));
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	80 70       	andi	r24, 0x00	; 0
    277e:	97 70       	andi	r25, 0x07	; 7
    2780:	88 0f       	add	r24, r24
    2782:	89 2f       	mov	r24, r25
    2784:	88 1f       	adc	r24, r24
    2786:	99 0b       	sbc	r25, r25
    2788:	91 95       	neg	r25
    278a:	81 6a       	ori	r24, 0xA1	; 161
    278c:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
    2790:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    2794:	80 34       	cpi	r24, 0x40	; 64
    2796:	11 f0       	breq	.+4      	; 0x279c <EEPROM_readByte+0x90>
	return ERROR;
    2798:	1d 82       	std	Y+5, r1	; 0x05
    279a:	12 c0       	rjmp	.+36     	; 0x27c0 <EEPROM_readByte+0xb4>
	*data = TWI_read_with_NACK();
    279c:	0e 94 43 08 	call	0x1086	; 0x1086 <TWI_read_with_NACK>
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	eb 81       	ldd	r30, Y+3	; 0x03
    27a6:	fc 81       	ldd	r31, Y+4	; 0x04
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	80 83       	st	Z, r24
	if(TWI_getStatus()!=TW_MR_DATA_NACK)
    27ac:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    27b0:	88 35       	cpi	r24, 0x58	; 88
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <EEPROM_readByte+0xac>
	return ERROR;
    27b4:	1d 82       	std	Y+5, r1	; 0x05
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <EEPROM_readByte+0xb4>
	
	TWI_stop();
    27b8:	0e 94 0e 08 	call	0x101c	; 0x101c <TWI_stop>

	
	return SUCCESS;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
	
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <main>:
bool checkStoredPassword();/*read stored password from EEPROM*/



int main(void)
{
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	c6 54       	subi	r28, 0x46	; 70
    27e0:	d0 40       	sbci	r29, 0x00	; 0
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
	
	static Uint8 trial=0;
	/*
	 * PORD : PIN6 && PIN7 for DC motor
	 */
    SET_BIT(DDRD,PIN6);
    27ec:	a1 e3       	ldi	r26, 0x31	; 49
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	e1 e3       	ldi	r30, 0x31	; 49
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	80 64       	ori	r24, 0x40	; 64
    27f8:	8c 93       	st	X, r24
	SET_BIT(DDRD,PIN7);
    27fa:	a1 e3       	ldi	r26, 0x31	; 49
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e1 e3       	ldi	r30, 0x31	; 49
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	8c 93       	st	X, r24
	SET_BIT(DDRC,PIN7);/*PORTC .PC7 for buzzer */
    2808:	a4 e3       	ldi	r26, 0x34	; 52
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e4 e3       	ldi	r30, 0x34	; 52
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 68       	ori	r24, 0x80	; 128
    2814:	8c 93       	st	X, r24
	UART_init();
    2816:	0e 94 7f 12 	call	0x24fe	; 0x24fe <UART_init>
	EEPROM_init();
    281a:	0e 94 39 13 	call	0x2672	; 0x2672 <EEPROM_init>
	LCD_init();
    281e:	0e 94 65 08 	call	0x10ca	; 0x10ca <LCD_init>
		 * 3 options : 
					 1- set new password command 
					 2- check password
					 3- open door           
		 */
		g_receiveCommand = UART_recieveByte();
    2822:	0e 94 be 12 	call	0x257c	; 0x257c <UART_recieveByte>
    2826:	80 93 6f 00 	sts	0x006F, r24
		if(g_receiveCommand == setNewPassword)
    282a:	80 91 6f 00 	lds	r24, 0x006F
    282e:	80 34       	cpi	r24, 0x40	; 64
    2830:	19 f4       	brne	.+6      	; 0x2838 <main+0x66>
		{
			storeNewPassword();
    2832:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <storeNewPassword>
    2836:	f5 cf       	rjmp	.-22     	; 0x2822 <main+0x50>
		}
		else if(g_receiveCommand == checkPassword)
    2838:	80 91 6f 00 	lds	r24, 0x006F
    283c:	86 32       	cpi	r24, 0x26	; 38
    283e:	09 f0       	breq	.+2      	; 0x2842 <main+0x70>
    2840:	b1 c0       	rjmp	.+354    	; 0x29a4 <main+0x1d2>
		{
			
			 if (checkStoredPassword())
    2842:	0e 94 99 17 	call	0x2f32	; 0x2f32 <checkStoredPassword>
    2846:	88 23       	and	r24, r24
    2848:	31 f0       	breq	.+12     	; 0x2856 <main+0x84>
			 {
				 UART_sendByte(correctPassword);
    284a:	8b e2       	ldi	r24, 0x2B	; 43
    284c:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
				  trial=0;
    2850:	10 92 70 00 	sts	0x0070, r1
    2854:	e6 cf       	rjmp	.-52     	; 0x2822 <main+0x50>
			 }
			 else
			 {				 
				
				  trial++;
    2856:	80 91 70 00 	lds	r24, 0x0070
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	80 93 70 00 	sts	0x0070, r24
				 if (trial>=3)
    2860:	80 91 70 00 	lds	r24, 0x0070
    2864:	83 30       	cpi	r24, 0x03	; 3
    2866:	08 f4       	brcc	.+2      	; 0x286a <main+0x98>
    2868:	99 c0       	rjmp	.+306    	; 0x299c <main+0x1ca>
				 {
					 UART_sendByte(thief);
    286a:	8a e2       	ldi	r24, 0x2A	; 42
    286c:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
					 SET_BIT(PORTC,PC7);
    2870:	a5 e3       	ldi	r26, 0x35	; 53
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e5 e3       	ldi	r30, 0x35	; 53
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	80 68       	ori	r24, 0x80	; 128
    287c:	8c 93       	st	X, r24
    287e:	fe 01       	movw	r30, r28
    2880:	ed 5b       	subi	r30, 0xBD	; 189
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e4       	ldi	r25, 0x40	; 64
    2888:	ac e1       	ldi	r26, 0x1C	; 28
    288a:	b6 e4       	ldi	r27, 0x46	; 70
    288c:	80 83       	st	Z, r24
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	a2 83       	std	Z+2, r26	; 0x02
    2892:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	8e 01       	movw	r16, r28
    2896:	01 5c       	subi	r16, 0xC1	; 193
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	ed 5b       	subi	r30, 0xBD	; 189
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	60 81       	ld	r22, Z
    28a2:	71 81       	ldd	r23, Z+1	; 0x01
    28a4:	82 81       	ldd	r24, Z+2	; 0x02
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a ef       	ldi	r20, 0xFA	; 250
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	f8 01       	movw	r30, r16
    28ba:	80 83       	st	Z, r24
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	a2 83       	std	Z+2, r26	; 0x02
    28c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c2:	fe 01       	movw	r30, r28
    28c4:	ff 96       	adiw	r30, 0x3f	; 63
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	2c f4       	brge	.+10     	; 0x28e8 <main+0x116>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9e af       	std	Y+62, r25	; 0x3e
    28e4:	8d af       	std	Y+61, r24	; 0x3d
    28e6:	46 c0       	rjmp	.+140    	; 0x2974 <main+0x1a2>
	else if (__tmp > 65535)
    28e8:	fe 01       	movw	r30, r28
    28ea:	ff 96       	adiw	r30, 0x3f	; 63
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	64 f5       	brge	.+88     	; 0x295c <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	fe 01       	movw	r30, r28
    2906:	ed 5b       	subi	r30, 0xBD	; 189
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	60 81       	ld	r22, Z
    290c:	71 81       	ldd	r23, Z+1	; 0x01
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	93 81       	ldd	r25, Z+3	; 0x03
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	9e af       	std	Y+62, r25	; 0x3e
    2930:	8d af       	std	Y+61, r24	; 0x3d
    2932:	0f c0       	rjmp	.+30     	; 0x2952 <main+0x180>
    2934:	88 ec       	ldi	r24, 0xC8	; 200
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9c af       	std	Y+60, r25	; 0x3c
    293a:	8b af       	std	Y+59, r24	; 0x3b
    293c:	8b ad       	ldd	r24, Y+59	; 0x3b
    293e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <main+0x16e>
    2944:	9c af       	std	Y+60, r25	; 0x3c
    2946:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2948:	8d ad       	ldd	r24, Y+61	; 0x3d
    294a:	9e ad       	ldd	r25, Y+62	; 0x3e
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	9e af       	std	Y+62, r25	; 0x3e
    2950:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2952:	8d ad       	ldd	r24, Y+61	; 0x3d
    2954:	9e ad       	ldd	r25, Y+62	; 0x3e
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	69 f7       	brne	.-38     	; 0x2934 <main+0x162>
    295a:	16 c0       	rjmp	.+44     	; 0x2988 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295c:	fe 01       	movw	r30, r28
    295e:	ff 96       	adiw	r30, 0x3f	; 63
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9e af       	std	Y+62, r25	; 0x3e
    2972:	8d af       	std	Y+61, r24	; 0x3d
    2974:	8d ad       	ldd	r24, Y+61	; 0x3d
    2976:	9e ad       	ldd	r25, Y+62	; 0x3e
    2978:	9a af       	std	Y+58, r25	; 0x3a
    297a:	89 af       	std	Y+57, r24	; 0x39
    297c:	89 ad       	ldd	r24, Y+57	; 0x39
    297e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <main+0x1ae>
    2984:	9a af       	std	Y+58, r25	; 0x3a
    2986:	89 af       	std	Y+57, r24	; 0x39
					  _delay_ms(10000);
					  CLEAR_BIT(PORTC,PC7);
    2988:	a5 e3       	ldi	r26, 0x35	; 53
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e5 e3       	ldi	r30, 0x35	; 53
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	8c 93       	st	X, r24
					  trial=0;
    2996:	10 92 70 00 	sts	0x0070, r1
    299a:	43 cf       	rjmp	.-378    	; 0x2822 <main+0x50>
				 }
				 else
				 {
					  UART_sendByte(inCorrectPassword);
    299c:	8d e2       	ldi	r24, 0x2D	; 45
    299e:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
    29a2:	3f cf       	rjmp	.-386    	; 0x2822 <main+0x50>
				 }
			 }
			 
		}
		else if (g_receiveCommand == checkAndOpenDoor )
    29a4:	80 91 6f 00 	lds	r24, 0x006F
    29a8:	81 32       	cpi	r24, 0x21	; 33
    29aa:	09 f0       	breq	.+2      	; 0x29ae <main+0x1dc>
    29ac:	3a cf       	rjmp	.-396    	; 0x2822 <main+0x50>
		{
			 
			 if (checkStoredPassword())
    29ae:	0e 94 99 17 	call	0x2f32	; 0x2f32 <checkStoredPassword>
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <main+0x1e6>
    29b6:	64 c1       	rjmp	.+712    	; 0x2c80 <main+0x4ae>
			 {
				 UART_sendByte(correctPassword);
    29b8:	8b e2       	ldi	r24, 0x2B	; 43
    29ba:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
				 DC_Motor_RotateClockWise();
    29be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DC_Motor_RotateClockWise>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e4       	ldi	r25, 0x40	; 64
    29c6:	ac e9       	ldi	r26, 0x9C	; 156
    29c8:	b5 e4       	ldi	r27, 0x45	; 69
    29ca:	8d ab       	std	Y+53, r24	; 0x35
    29cc:	9e ab       	std	Y+54, r25	; 0x36
    29ce:	af ab       	std	Y+55, r26	; 0x37
    29d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6d a9       	ldd	r22, Y+53	; 0x35
    29d4:	7e a9       	ldd	r23, Y+54	; 0x36
    29d6:	8f a9       	ldd	r24, Y+55	; 0x37
    29d8:	98 ad       	ldd	r25, Y+56	; 0x38
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a ef       	ldi	r20, 0xFA	; 250
    29e0:	54 e4       	ldi	r21, 0x44	; 68
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	89 ab       	std	Y+49, r24	; 0x31
    29ec:	9a ab       	std	Y+50, r25	; 0x32
    29ee:	ab ab       	std	Y+51, r26	; 0x33
    29f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29f2:	69 a9       	ldd	r22, Y+49	; 0x31
    29f4:	7a a9       	ldd	r23, Y+50	; 0x32
    29f6:	8b a9       	ldd	r24, Y+51	; 0x33
    29f8:	9c a9       	ldd	r25, Y+52	; 0x34
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <main+0x242>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	98 ab       	std	Y+48, r25	; 0x30
    2a10:	8f a7       	std	Y+47, r24	; 0x2f
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <main+0x2c0>
	else if (__tmp > 65535)
    2a14:	69 a9       	ldd	r22, Y+49	; 0x31
    2a16:	7a a9       	ldd	r23, Y+50	; 0x32
    2a18:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a30:	8f a9       	ldd	r24, Y+55	; 0x37
    2a32:	98 ad       	ldd	r25, Y+56	; 0x38
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	98 ab       	std	Y+48, r25	; 0x30
    2a52:	8f a7       	std	Y+47, r24	; 0x2f
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <main+0x2a2>
    2a56:	88 ec       	ldi	r24, 0xC8	; 200
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9e a7       	std	Y+46, r25	; 0x2e
    2a5c:	8d a7       	std	Y+45, r24	; 0x2d
    2a5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a60:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <main+0x290>
    2a66:	9e a7       	std	Y+46, r25	; 0x2e
    2a68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a76:	98 a9       	ldd	r25, Y+48	; 0x30
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <main+0x284>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a80:	7a a9       	ldd	r23, Y+50	; 0x32
    2a82:	8b a9       	ldd	r24, Y+51	; 0x33
    2a84:	9c a9       	ldd	r25, Y+52	; 0x34
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	98 ab       	std	Y+48, r25	; 0x30
    2a90:	8f a7       	std	Y+47, r24	; 0x2f
    2a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a94:	98 a9       	ldd	r25, Y+48	; 0x30
    2a96:	9c a7       	std	Y+44, r25	; 0x2c
    2a98:	8b a7       	std	Y+43, r24	; 0x2b
    2a9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <main+0x2cc>
    2aa2:	9c a7       	std	Y+44, r25	; 0x2c
    2aa4:	8b a7       	std	Y+43, r24	; 0x2b
				 
			       _delay_ms(5000);
				 DC_Motor_stop();
    2aa6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DC_Motor_stop>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e4       	ldi	r25, 0x40	; 64
    2aae:	ac e9       	ldi	r26, 0x9C	; 156
    2ab0:	b5 e4       	ldi	r27, 0x45	; 69
    2ab2:	8f a3       	std	Y+39, r24	; 0x27
    2ab4:	98 a7       	std	Y+40, r25	; 0x28
    2ab6:	a9 a7       	std	Y+41, r26	; 0x29
    2ab8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	6f a1       	ldd	r22, Y+39	; 0x27
    2abc:	78 a5       	ldd	r23, Y+40	; 0x28
    2abe:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a ef       	ldi	r20, 0xFA	; 250
    2ac8:	54 e4       	ldi	r21, 0x44	; 68
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8b a3       	std	Y+35, r24	; 0x23
    2ad4:	9c a3       	std	Y+36, r25	; 0x24
    2ad6:	ad a3       	std	Y+37, r26	; 0x25
    2ad8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ada:	6b a1       	ldd	r22, Y+35	; 0x23
    2adc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ade:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	2c f4       	brge	.+10     	; 0x2afc <main+0x32a>
		__ticks = 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9a a3       	std	Y+34, r25	; 0x22
    2af8:	89 a3       	std	Y+33, r24	; 0x21
    2afa:	3f c0       	rjmp	.+126    	; 0x2b7a <main+0x3a8>
	else if (__tmp > 65535)
    2afc:	6b a1       	ldd	r22, Y+35	; 0x23
    2afe:	7c a1       	ldd	r23, Y+36	; 0x24
    2b00:	8d a1       	ldd	r24, Y+37	; 0x25
    2b02:	9e a1       	ldd	r25, Y+38	; 0x26
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	4c f5       	brge	.+82     	; 0x2b66 <main+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	6f a1       	ldd	r22, Y+39	; 0x27
    2b16:	78 a5       	ldd	r23, Y+40	; 0x28
    2b18:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e2       	ldi	r20, 0x20	; 32
    2b22:	51 e4       	ldi	r21, 0x41	; 65
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9a a3       	std	Y+34, r25	; 0x22
    2b3a:	89 a3       	std	Y+33, r24	; 0x21
    2b3c:	0f c0       	rjmp	.+30     	; 0x2b5c <main+0x38a>
    2b3e:	88 ec       	ldi	r24, 0xC8	; 200
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	98 a3       	std	Y+32, r25	; 0x20
    2b44:	8f 8f       	std	Y+31, r24	; 0x1f
    2b46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b48:	98 a1       	ldd	r25, Y+32	; 0x20
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <main+0x378>
    2b4e:	98 a3       	std	Y+32, r25	; 0x20
    2b50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b52:	89 a1       	ldd	r24, Y+33	; 0x21
    2b54:	9a a1       	ldd	r25, Y+34	; 0x22
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	9a a3       	std	Y+34, r25	; 0x22
    2b5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <main+0x36c>
    2b64:	14 c0       	rjmp	.+40     	; 0x2b8e <main+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b66:	6b a1       	ldd	r22, Y+35	; 0x23
    2b68:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9a a3       	std	Y+34, r25	; 0x22
    2b78:	89 a3       	std	Y+33, r24	; 0x21
    2b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b80:	8d 8f       	std	Y+29, r24	; 0x1d
    2b82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0x3b4>
    2b8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b8c:	8d 8f       	std	Y+29, r24	; 0x1d
				  _delay_ms(5000);
				 DC_Motor_RotateAntiClockWise();
    2b8e:	0e 94 b8 05 	call	0xb70	; 0xb70 <DC_Motor_RotateAntiClockWise>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e4       	ldi	r25, 0x40	; 64
    2b96:	ac e9       	ldi	r26, 0x9C	; 156
    2b98:	b5 e4       	ldi	r27, 0x45	; 69
    2b9a:	89 8f       	std	Y+25, r24	; 0x19
    2b9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2ba0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8d 8b       	std	Y+21, r24	; 0x15
    2bbc:	9e 8b       	std	Y+22, r25	; 0x16
    2bbe:	af 8b       	std	Y+23, r26	; 0x17
    2bc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <main+0x412>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9c 8b       	std	Y+20, r25	; 0x14
    2be0:	8b 8b       	std	Y+19, r24	; 0x13
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <main+0x490>
	else if (__tmp > 65535)
    2be4:	6d 89       	ldd	r22, Y+21	; 0x15
    2be6:	7e 89       	ldd	r23, Y+22	; 0x16
    2be8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bea:	98 8d       	ldd	r25, Y+24	; 0x18
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <main+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <main+0x472>
    2c26:	88 ec       	ldi	r24, 0xC8	; 200
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9a 8b       	std	Y+18, r25	; 0x12
    2c2c:	89 8b       	std	Y+17, r24	; 0x11
    2c2e:	89 89       	ldd	r24, Y+17	; 0x11
    2c30:	9a 89       	ldd	r25, Y+18	; 0x12
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <main+0x460>
    2c36:	9a 8b       	std	Y+18, r25	; 0x12
    2c38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	9c 8b       	std	Y+20, r25	; 0x14
    2c42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8b 89       	ldd	r24, Y+19	; 0x13
    2c46:	9c 89       	ldd	r25, Y+20	; 0x14
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <main+0x454>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <main+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9c 8b       	std	Y+20, r25	; 0x14
    2c60:	8b 8b       	std	Y+19, r24	; 0x13
    2c62:	8b 89       	ldd	r24, Y+19	; 0x13
    2c64:	9c 89       	ldd	r25, Y+20	; 0x14
    2c66:	98 8b       	std	Y+16, r25	; 0x10
    2c68:	8f 87       	std	Y+15, r24	; 0x0f
    2c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6c:	98 89       	ldd	r25, Y+16	; 0x10
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <main+0x49c>
    2c72:	98 8b       	std	Y+16, r25	; 0x10
    2c74:	8f 87       	std	Y+15, r24	; 0x0f
				 _delay_ms(5000);
				 DC_Motor_stop();
    2c76:	0e 94 cd 05 	call	0xb9a	; 0xb9a <DC_Motor_stop>
				
				
				 trial=0;
    2c7a:	10 92 70 00 	sts	0x0070, r1
    2c7e:	d1 cd       	rjmp	.-1118   	; 0x2822 <main+0x50>
			 }
			 else
			 { 
				 
				 trial++;
    2c80:	80 91 70 00 	lds	r24, 0x0070
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 70 00 	sts	0x0070, r24
				 if (trial>=3)
    2c8a:	80 91 70 00 	lds	r24, 0x0070
    2c8e:	83 30       	cpi	r24, 0x03	; 3
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <main+0x4c2>
    2c92:	86 c0       	rjmp	.+268    	; 0x2da0 <main+0x5ce>
				 {
					  UART_sendByte(thief);
    2c94:	8a e2       	ldi	r24, 0x2A	; 42
    2c96:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
					  SET_BIT(PORTC,PC7);
    2c9a:	a5 e3       	ldi	r26, 0x35	; 53
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 68       	ori	r24, 0x80	; 128
    2ca6:	8c 93       	st	X, r24
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e4       	ldi	r25, 0x40	; 64
    2cac:	ac e1       	ldi	r26, 0x1C	; 28
    2cae:	b6 e4       	ldi	r27, 0x46	; 70
    2cb0:	8b 87       	std	Y+11, r24	; 0x0b
    2cb2:	9c 87       	std	Y+12, r25	; 0x0c
    2cb4:	ad 87       	std	Y+13, r26	; 0x0d
    2cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	8f 83       	std	Y+7, r24	; 0x07
    2cd2:	98 87       	std	Y+8, r25	; 0x08
    2cd4:	a9 87       	std	Y+9, r26	; 0x09
    2cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	2c f4       	brge	.+10     	; 0x2cfa <main+0x528>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	3f c0       	rjmp	.+126    	; 0x2d78 <main+0x5a6>
	else if (__tmp > 65535)
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	3f ef       	ldi	r19, 0xFF	; 255
    2d06:	4f e7       	ldi	r20, 0x7F	; 127
    2d08:	57 e4       	ldi	r21, 0x47	; 71
    2d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0e:	18 16       	cp	r1, r24
    2d10:	4c f5       	brge	.+82     	; 0x2d64 <main+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <main+0x588>
    2d3c:	88 ec       	ldi	r24, 0xC8	; 200
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <main+0x576>
    2d4c:	9c 83       	std	Y+4, r25	; 0x04
    2d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	8d 81       	ldd	r24, Y+5	; 0x05
    2d52:	9e 81       	ldd	r25, Y+6	; 0x06
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	69 f7       	brne	.-38     	; 0x2d3c <main+0x56a>
    2d62:	14 c0       	rjmp	.+40     	; 0x2d8c <main+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d64:	6f 81       	ldd	r22, Y+7	; 0x07
    2d66:	78 85       	ldd	r23, Y+8	; 0x08
    2d68:	89 85       	ldd	r24, Y+9	; 0x09
    2d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <main+0x5b2>
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
					  _delay_ms(10000);
					  CLEAR_BIT(PORTC,PC7);
    2d8c:	a5 e3       	ldi	r26, 0x35	; 53
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e5 e3       	ldi	r30, 0x35	; 53
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8f 77       	andi	r24, 0x7F	; 127
    2d98:	8c 93       	st	X, r24
					  trial=0;
    2d9a:	10 92 70 00 	sts	0x0070, r1
    2d9e:	41 cd       	rjmp	.-1406   	; 0x2822 <main+0x50>
				 }
				 else
				 {
				     UART_sendByte(inCorrectPassword);
    2da0:	8d e2       	ldi	r24, 0x2D	; 45
    2da2:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_sendByte>
    2da6:	3d cd       	rjmp	.-1414   	; 0x2822 <main+0x50>

00002da8 <storeNewPassword>:
		
	
}
	
void storeNewPassword()
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	a4 97       	sbiw	r28, 0x24	; 36
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
	UART_recieveString(g_receiveString);
    2dbc:	81 e7       	ldi	r24, 0x71	; 113
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <UART_recieveString>
    /////////////////////////////////////////////////////////////
	
	Uint8 iter=0;
    2dc4:	18 8a       	std	Y+16, r1	; 0x10
    2dc6:	88 c0       	rjmp	.+272    	; 0x2ed8 <storeNewPassword+0x130>
	while (g_receiveString[iter] !='\0')
	{
		EEPROM_writeByte(0x0311+iter, g_receiveString[iter]);
    2dc8:	88 89       	ldd	r24, Y+16	; 0x10
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	8f 5e       	subi	r24, 0xEF	; 239
    2dd0:	9c 4f       	sbci	r25, 0xFC	; 252
    2dd2:	ac 01       	movw	r20, r24
    2dd4:	88 89       	ldd	r24, Y+16	; 0x10
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	fc 01       	movw	r30, r24
    2ddc:	ef 58       	subi	r30, 0x8F	; 143
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	ca 01       	movw	r24, r20
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 42 13 	call	0x2684	; 0x2684 <EEPROM_writeByte>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e2       	ldi	r26, 0x20	; 32
    2df4:	b1 e4       	ldi	r27, 0x41	; 65
    2df6:	8b 87       	std	Y+11, r24	; 0x0b
    2df8:	9c 87       	std	Y+12, r25	; 0x0c
    2dfa:	ad 87       	std	Y+13, r26	; 0x0d
    2dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8f 83       	std	Y+7, r24	; 0x07
    2e18:	98 87       	std	Y+8, r25	; 0x08
    2e1a:	a9 87       	std	Y+9, r26	; 0x09
    2e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e20:	78 85       	ldd	r23, Y+8	; 0x08
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <storeNewPassword+0x98>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <storeNewPassword+0x116>
	else if (__tmp > 65535)
    2e40:	6f 81       	ldd	r22, Y+7	; 0x07
    2e42:	78 85       	ldd	r23, Y+8	; 0x08
    2e44:	89 85       	ldd	r24, Y+9	; 0x09
    2e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <storeNewPassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <storeNewPassword+0xf8>
    2e82:	88 ec       	ldi	r24, 0xC8	; 200
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <storeNewPassword+0xe6>
    2e92:	9c 83       	std	Y+4, r25	; 0x04
    2e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <storeNewPassword+0xda>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <storeNewPassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <storeNewPassword+0x122>
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		
		iter++;
    2ed2:	88 89       	ldd	r24, Y+16	; 0x10
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	88 8b       	std	Y+16, r24	; 0x10
{
	UART_recieveString(g_receiveString);
    /////////////////////////////////////////////////////////////
	
	Uint8 iter=0;
	while (g_receiveString[iter] !='\0')
    2ed8:	88 89       	ldd	r24, Y+16	; 0x10
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	fc 01       	movw	r30, r24
    2ee0:	ef 58       	subi	r30, 0x8F	; 143
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 23       	and	r24, r24
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <storeNewPassword+0x144>
    2eea:	6e cf       	rjmp	.-292    	; 0x2dc8 <storeNewPassword+0x20>
		_delay_ms(10);
		
		iter++;
	}
	Uint8 EEPROMpassword[20];
	for (Uint8 it =0;it<4;it++)
    2eec:	1f 86       	std	Y+15, r1	; 0x0f
    2eee:	15 c0       	rjmp	.+42     	; 0x2f1a <storeNewPassword+0x172>
	{
		EEPROM_readByte(0x0311+it, &EEPROMpassword[it]);
    2ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	8f 5e       	subi	r24, 0xEF	; 239
    2ef8:	9c 4f       	sbci	r25, 0xFC	; 252
    2efa:	ac 01       	movw	r20, r24
    2efc:	9e 01       	movw	r18, r28
    2efe:	2f 5e       	subi	r18, 0xEF	; 239
    2f00:	3f 4f       	sbci	r19, 0xFF	; 255
    2f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f04:	88 2f       	mov	r24, r24
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	28 0f       	add	r18, r24
    2f0a:	39 1f       	adc	r19, r25
    2f0c:	ca 01       	movw	r24, r20
    2f0e:	b9 01       	movw	r22, r18
    2f10:	0e 94 86 13 	call	0x270c	; 0x270c <EEPROM_readByte>
		_delay_ms(10);
		
		iter++;
	}
	Uint8 EEPROMpassword[20];
	for (Uint8 it =0;it<4;it++)
    2f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	8f 87       	std	Y+15, r24	; 0x0f
    2f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1c:	84 30       	cpi	r24, 0x04	; 4
    2f1e:	40 f3       	brcs	.-48     	; 0x2ef0 <storeNewPassword+0x148>
		EEPROM_readByte(0x0311+it, &EEPROMpassword[it]);
	}

	
	
}
    2f20:	a4 96       	adiw	r28, 0x24	; 36
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <checkStoredPassword>:

bool checkStoredPassword()
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	68 97       	sbiw	r28, 0x18	; 24
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
	UART_recieveString(g_receiveString);
    2f46:	81 e7       	ldi	r24, 0x71	; 113
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <UART_recieveString>

	bool flag ;
	Uint8 i=0;
    2f4e:	1a 82       	std	Y+2, r1	; 0x02
	
	Uint8 EEPROMpassword[20];
	for (Uint8 iter =0;iter<4;iter++)
    2f50:	19 82       	std	Y+1, r1	; 0x01
    2f52:	15 c0       	rjmp	.+42     	; 0x2f7e <checkStoredPassword+0x4c>
	{
		EEPROM_readByte(0x0311+iter, &EEPROMpassword[iter]);
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	88 2f       	mov	r24, r24
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	8f 5e       	subi	r24, 0xEF	; 239
    2f5c:	9c 4f       	sbci	r25, 0xFC	; 252
    2f5e:	ac 01       	movw	r20, r24
    2f60:	9e 01       	movw	r18, r28
    2f62:	2c 5f       	subi	r18, 0xFC	; 252
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	28 0f       	add	r18, r24
    2f6e:	39 1f       	adc	r19, r25
    2f70:	ca 01       	movw	r24, r20
    2f72:	b9 01       	movw	r22, r18
    2f74:	0e 94 86 13 	call	0x270c	; 0x270c <EEPROM_readByte>

	bool flag ;
	Uint8 i=0;
	
	Uint8 EEPROMpassword[20];
	for (Uint8 iter =0;iter<4;iter++)
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	8f 5f       	subi	r24, 0xFF	; 255
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	84 30       	cpi	r24, 0x04	; 4
    2f82:	40 f3       	brcs	.-48     	; 0x2f54 <checkStoredPassword+0x22>
    2f84:	17 c0       	rjmp	.+46     	; 0x2fb4 <checkStoredPassword+0x82>
		EEPROM_readByte(0x0311+iter, &EEPROMpassword[iter]);
	}
	while (g_receiveString[i] !='\0')
	{
		
		if( g_receiveString[i] !=EEPROMpassword[i] )
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	ef 58       	subi	r30, 0x8F	; 143
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	40 81       	ld	r20, Z
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	04 96       	adiw	r24, 0x04	; 4
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	80 81       	ld	r24, Z
    2fa6:	48 17       	cp	r20, r24
    2fa8:	11 f0       	breq	.+4      	; 0x2fae <checkStoredPassword+0x7c>
		{
			
			return FALSE;
    2faa:	18 8e       	std	Y+24, r1	; 0x18
    2fac:	0e c0       	rjmp	.+28     	; 0x2fca <checkStoredPassword+0x98>
		}
		i++;
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 EEPROMpassword[20];
	for (Uint8 iter =0;iter<4;iter++)
	{
		EEPROM_readByte(0x0311+iter, &EEPROMpassword[iter]);
	}
	while (g_receiveString[i] !='\0')
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	fc 01       	movw	r30, r24
    2fbc:	ef 58       	subi	r30, 0x8F	; 143
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 23       	and	r24, r24
    2fc4:	01 f7       	brne	.-64     	; 0x2f86 <checkStoredPassword+0x54>
			return FALSE;
		}
		i++;
	}
	
	return TRUE;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	88 8f       	std	Y+24, r24	; 0x18
    2fca:	88 8d       	ldd	r24, Y+24	; 0x18
}
    2fcc:	68 96       	adiw	r28, 0x18	; 24
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <__prologue_saves__>:
    2fde:	2f 92       	push	r2
    2fe0:	3f 92       	push	r3
    2fe2:	4f 92       	push	r4
    2fe4:	5f 92       	push	r5
    2fe6:	6f 92       	push	r6
    2fe8:	7f 92       	push	r7
    2fea:	8f 92       	push	r8
    2fec:	9f 92       	push	r9
    2fee:	af 92       	push	r10
    2ff0:	bf 92       	push	r11
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	ca 1b       	sub	r28, r26
    3008:	db 0b       	sbc	r29, r27
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	09 94       	ijmp

00003016 <__epilogue_restores__>:
    3016:	2a 88       	ldd	r2, Y+18	; 0x12
    3018:	39 88       	ldd	r3, Y+17	; 0x11
    301a:	48 88       	ldd	r4, Y+16	; 0x10
    301c:	5f 84       	ldd	r5, Y+15	; 0x0f
    301e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3020:	7d 84       	ldd	r7, Y+13	; 0x0d
    3022:	8c 84       	ldd	r8, Y+12	; 0x0c
    3024:	9b 84       	ldd	r9, Y+11	; 0x0b
    3026:	aa 84       	ldd	r10, Y+10	; 0x0a
    3028:	b9 84       	ldd	r11, Y+9	; 0x09
    302a:	c8 84       	ldd	r12, Y+8	; 0x08
    302c:	df 80       	ldd	r13, Y+7	; 0x07
    302e:	ee 80       	ldd	r14, Y+6	; 0x06
    3030:	fd 80       	ldd	r15, Y+5	; 0x05
    3032:	0c 81       	ldd	r16, Y+4	; 0x04
    3034:	1b 81       	ldd	r17, Y+3	; 0x03
    3036:	aa 81       	ldd	r26, Y+2	; 0x02
    3038:	b9 81       	ldd	r27, Y+1	; 0x01
    303a:	ce 0f       	add	r28, r30
    303c:	d1 1d       	adc	r29, r1
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	ed 01       	movw	r28, r26
    304a:	08 95       	ret

0000304c <itoa>:
    304c:	fb 01       	movw	r30, r22
    304e:	9f 01       	movw	r18, r30
    3050:	e8 94       	clt
    3052:	42 30       	cpi	r20, 0x02	; 2
    3054:	c4 f0       	brlt	.+48     	; 0x3086 <itoa+0x3a>
    3056:	45 32       	cpi	r20, 0x25	; 37
    3058:	b4 f4       	brge	.+44     	; 0x3086 <itoa+0x3a>
    305a:	4a 30       	cpi	r20, 0x0A	; 10
    305c:	29 f4       	brne	.+10     	; 0x3068 <itoa+0x1c>
    305e:	97 fb       	bst	r25, 7
    3060:	1e f4       	brtc	.+6      	; 0x3068 <itoa+0x1c>
    3062:	90 95       	com	r25
    3064:	81 95       	neg	r24
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	64 2f       	mov	r22, r20
    306a:	77 27       	eor	r23, r23
    306c:	0e 94 57 18 	call	0x30ae	; 0x30ae <__udivmodhi4>
    3070:	80 5d       	subi	r24, 0xD0	; 208
    3072:	8a 33       	cpi	r24, 0x3A	; 58
    3074:	0c f0       	brlt	.+2      	; 0x3078 <itoa+0x2c>
    3076:	89 5d       	subi	r24, 0xD9	; 217
    3078:	81 93       	st	Z+, r24
    307a:	cb 01       	movw	r24, r22
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	a1 f7       	brne	.-24     	; 0x3068 <itoa+0x1c>
    3080:	16 f4       	brtc	.+4      	; 0x3086 <itoa+0x3a>
    3082:	5d e2       	ldi	r21, 0x2D	; 45
    3084:	51 93       	st	Z+, r21
    3086:	10 82       	st	Z, r1
    3088:	c9 01       	movw	r24, r18
    308a:	0c 94 47 18 	jmp	0x308e	; 0x308e <strrev>

0000308e <strrev>:
    308e:	dc 01       	movw	r26, r24
    3090:	fc 01       	movw	r30, r24
    3092:	67 2f       	mov	r22, r23
    3094:	71 91       	ld	r23, Z+
    3096:	77 23       	and	r23, r23
    3098:	e1 f7       	brne	.-8      	; 0x3092 <strrev+0x4>
    309a:	32 97       	sbiw	r30, 0x02	; 2
    309c:	04 c0       	rjmp	.+8      	; 0x30a6 <strrev+0x18>
    309e:	7c 91       	ld	r23, X
    30a0:	6d 93       	st	X+, r22
    30a2:	70 83       	st	Z, r23
    30a4:	62 91       	ld	r22, -Z
    30a6:	ae 17       	cp	r26, r30
    30a8:	bf 07       	cpc	r27, r31
    30aa:	c8 f3       	brcs	.-14     	; 0x309e <strrev+0x10>
    30ac:	08 95       	ret

000030ae <__udivmodhi4>:
    30ae:	aa 1b       	sub	r26, r26
    30b0:	bb 1b       	sub	r27, r27
    30b2:	51 e1       	ldi	r21, 0x11	; 17
    30b4:	07 c0       	rjmp	.+14     	; 0x30c4 <__udivmodhi4_ep>

000030b6 <__udivmodhi4_loop>:
    30b6:	aa 1f       	adc	r26, r26
    30b8:	bb 1f       	adc	r27, r27
    30ba:	a6 17       	cp	r26, r22
    30bc:	b7 07       	cpc	r27, r23
    30be:	10 f0       	brcs	.+4      	; 0x30c4 <__udivmodhi4_ep>
    30c0:	a6 1b       	sub	r26, r22
    30c2:	b7 0b       	sbc	r27, r23

000030c4 <__udivmodhi4_ep>:
    30c4:	88 1f       	adc	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	5a 95       	dec	r21
    30ca:	a9 f7       	brne	.-22     	; 0x30b6 <__udivmodhi4_loop>
    30cc:	80 95       	com	r24
    30ce:	90 95       	com	r25
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	08 95       	ret

000030d6 <_exit>:
    30d6:	f8 94       	cli

000030d8 <__stop_program>:
    30d8:	ff cf       	rjmp	.-2      	; 0x30d8 <__stop_program>
