
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  000039fe  00003a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080014c  0080014c  00003b7e  2**0
                  ALLOC
  3 .stab         00002fe8  00000000  00000000  00003b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f51  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b64c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 84 10 	jmp	0x2108	; 0x2108 <__vector_3>
      10:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__vector_7>
      20:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_8>
      24:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 35       	cpi	r26, 0x53	; 83
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 13 	call	0x2616	; 0x2616 <main>
      8a:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setPinDirection>:
 /********************************************************************************/
 /********************		    Functions definations 		**********************/
 /********************************************************************************/ 
 /*				Determine pin in Port as Input or Output           				 */
void GPIO_setPinDirection(Uint8 a_port , Uint8 a_pin, Uint8 a_mode)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_port)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	6c 81       	ldd	r22, Y+4	; 0x04
     b66:	7d 81       	ldd	r23, Y+5	; 0x05
     b68:	61 30       	cpi	r22, 0x01	; 1
     b6a:	71 05       	cpc	r23, r1
     b6c:	69 f1       	breq	.+90     	; 0xbc8 <GPIO_setPinDirection+0x82>
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	9d 81       	ldd	r25, Y+5	; 0x05
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	34 f4       	brge	.+12     	; 0xb84 <GPIO_setPinDirection+0x3e>
     b78:	2c 81       	ldd	r18, Y+4	; 0x04
     b7a:	3d 81       	ldd	r19, Y+5	; 0x05
     b7c:	21 15       	cp	r18, r1
     b7e:	31 05       	cpc	r19, r1
     b80:	69 f0       	breq	.+26     	; 0xb9c <GPIO_setPinDirection+0x56>
     b82:	63 c0       	rjmp	.+198    	; 0xc4a <GPIO_setPinDirection+0x104>
     b84:	6c 81       	ldd	r22, Y+4	; 0x04
     b86:	7d 81       	ldd	r23, Y+5	; 0x05
     b88:	62 30       	cpi	r22, 0x02	; 2
     b8a:	71 05       	cpc	r23, r1
     b8c:	99 f1       	breq	.+102    	; 0xbf4 <GPIO_setPinDirection+0xae>
     b8e:	8c 81       	ldd	r24, Y+4	; 0x04
     b90:	9d 81       	ldd	r25, Y+5	; 0x05
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <GPIO_setPinDirection+0x54>
     b98:	43 c0       	rjmp	.+134    	; 0xc20 <GPIO_setPinDirection+0xda>
     b9a:	57 c0       	rjmp	.+174    	; 0xc4a <GPIO_setPinDirection+0x104>
	{
		case GPIO_PORTA :     DDRA|=(a_mode<<a_pin); break; 
     b9c:	aa e3       	ldi	r26, 0x3A	; 58
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	ea e3       	ldi	r30, 0x3A	; 58
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	48 2f       	mov	r20, r24
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	b9 01       	movw	r22, r18
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <GPIO_setPinDirection+0x76>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	8a 95       	dec	r24
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <GPIO_setPinDirection+0x72>
     bc0:	cb 01       	movw	r24, r22
     bc2:	84 2b       	or	r24, r20
     bc4:	8c 93       	st	X, r24
     bc6:	41 c0       	rjmp	.+130    	; 0xc4a <GPIO_setPinDirection+0x104>
		case GPIO_PORTB :     DDRB|=(a_mode<<a_pin); break;
     bc8:	a7 e3       	ldi	r26, 0x37	; 55
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e7 e3       	ldi	r30, 0x37	; 55
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	48 2f       	mov	r20, r24
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	b9 01       	movw	r22, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <GPIO_setPinDirection+0xa2>
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	8a 95       	dec	r24
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <GPIO_setPinDirection+0x9e>
     bec:	cb 01       	movw	r24, r22
     bee:	84 2b       	or	r24, r20
     bf0:	8c 93       	st	X, r24
     bf2:	2b c0       	rjmp	.+86     	; 0xc4a <GPIO_setPinDirection+0x104>
		case GPIO_PORTC :     DDRC|=(a_mode<<a_pin); break;
     bf4:	a4 e3       	ldi	r26, 0x34	; 52
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e4 e3       	ldi	r30, 0x34	; 52
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	b9 01       	movw	r22, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <GPIO_setPinDirection+0xce>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	8a 95       	dec	r24
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <GPIO_setPinDirection+0xca>
     c18:	cb 01       	movw	r24, r22
     c1a:	84 2b       	or	r24, r20
     c1c:	8c 93       	st	X, r24
     c1e:	15 c0       	rjmp	.+42     	; 0xc4a <GPIO_setPinDirection+0x104>
		case GPIO_PORTD :     DDRD|=(a_mode<<a_pin); break;
     c20:	a1 e3       	ldi	r26, 0x31	; 49
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e1 e3       	ldi	r30, 0x31	; 49
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	b9 01       	movw	r22, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <GPIO_setPinDirection+0xfa>
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	8a 95       	dec	r24
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <GPIO_setPinDirection+0xf6>
     c44:	cb 01       	movw	r24, r22
     c46:	84 2b       	or	r24, r20
     c48:	8c 93       	st	X, r24
	}
	
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <GPIO_setPinValue>:
 /*				set pin in Port by value 0 or 1           				         */
void GPIO_setPinValue(Uint8 a_port , Uint8 a_pin, Uint8 a_value)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <GPIO_setPinValue+0x6>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <GPIO_setPinValue+0x8>
     c62:	0f 92       	push	r0
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	6a 83       	std	Y+2, r22	; 0x02
     c6c:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_port)
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	3d 83       	std	Y+5, r19	; 0x05
     c76:	2c 83       	std	Y+4, r18	; 0x04
     c78:	8c 81       	ldd	r24, Y+4	; 0x04
     c7a:	9d 81       	ldd	r25, Y+5	; 0x05
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	91 05       	cpc	r25, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <GPIO_setPinValue+0x2a>
     c82:	47 c0       	rjmp	.+142    	; 0xd12 <GPIO_setPinValue+0xb8>
     c84:	2c 81       	ldd	r18, Y+4	; 0x04
     c86:	3d 81       	ldd	r19, Y+5	; 0x05
     c88:	22 30       	cpi	r18, 0x02	; 2
     c8a:	31 05       	cpc	r19, r1
     c8c:	2c f4       	brge	.+10     	; 0xc98 <GPIO_setPinValue+0x3e>
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
     c90:	9d 81       	ldd	r25, Y+5	; 0x05
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	71 f0       	breq	.+28     	; 0xcb2 <GPIO_setPinValue+0x58>
     c96:	cb c0       	rjmp	.+406    	; 0xe2e <GPIO_setPinValue+0x1d4>
     c98:	2c 81       	ldd	r18, Y+4	; 0x04
     c9a:	3d 81       	ldd	r19, Y+5	; 0x05
     c9c:	22 30       	cpi	r18, 0x02	; 2
     c9e:	31 05       	cpc	r19, r1
     ca0:	09 f4       	brne	.+2      	; 0xca4 <GPIO_setPinValue+0x4a>
     ca2:	67 c0       	rjmp	.+206    	; 0xd72 <GPIO_setPinValue+0x118>
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <GPIO_setPinValue+0x56>
     cae:	91 c0       	rjmp	.+290    	; 0xdd2 <GPIO_setPinValue+0x178>
     cb0:	be c0       	rjmp	.+380    	; 0xe2e <GPIO_setPinValue+0x1d4>
	{
		case GPIO_PORTA :    if (a_value == HIGH)
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <GPIO_setPinValue+0x86>
							{
								SET_BIT(PORTA,a_pin);
     cb8:	ab e3       	ldi	r26, 0x3B	; 59
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	eb e3       	ldi	r30, 0x3B	; 59
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <GPIO_setPinValue+0x7c>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <GPIO_setPinValue+0x78>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	a7 c0       	rjmp	.+334    	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	88 23       	and	r24, r24
     ce4:	09 f0       	breq	.+2      	; 0xce8 <GPIO_setPinValue+0x8e>
     ce6:	a3 c0       	rjmp	.+326    	; 0xe2e <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTA,a_pin);
     ce8:	ab e3       	ldi	r26, 0x3B	; 59
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	48 2f       	mov	r20, r24
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <GPIO_setPinValue+0xac>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <GPIO_setPinValue+0xa8>
     d0a:	80 95       	com	r24
     d0c:	84 23       	and	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	8e c0       	rjmp	.+284    	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							 break;
		case GPIO_PORTB :    if (a_value == HIGH)
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	a1 f4       	brne	.+40     	; 0xd40 <GPIO_setPinValue+0xe6>
						 	{
								SET_BIT(PORTB,a_pin);
     d18:	a8 e3       	ldi	r26, 0x38	; 56
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e8 e3       	ldi	r30, 0x38	; 56
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_setPinValue+0xdc>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_setPinValue+0xd8>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	77 c0       	rjmp	.+238    	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	88 23       	and	r24, r24
     d44:	09 f0       	breq	.+2      	; 0xd48 <GPIO_setPinValue+0xee>
     d46:	73 c0       	rjmp	.+230    	; 0xe2e <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTB,a_pin);
     d48:	a8 e3       	ldi	r26, 0x38	; 56
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e8 e3       	ldi	r30, 0x38	; 56
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <GPIO_setPinValue+0x10c>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <GPIO_setPinValue+0x108>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	5e c0       	rjmp	.+188    	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							break;
		case GPIO_PORTC :    if (a_value == HIGH)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	a1 f4       	brne	.+40     	; 0xda0 <GPIO_setPinValue+0x146>
							{
								SET_BIT(PORTC,a_pin);
     d78:	a5 e3       	ldi	r26, 0x35	; 53
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e3       	ldi	r30, 0x35	; 53
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <GPIO_setPinValue+0x13c>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <GPIO_setPinValue+0x138>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	47 c0       	rjmp	.+142    	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	88 23       	and	r24, r24
     da4:	09 f0       	breq	.+2      	; 0xda8 <GPIO_setPinValue+0x14e>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTC,a_pin);
     da8:	a5 e3       	ldi	r26, 0x35	; 53
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e5 e3       	ldi	r30, 0x35	; 53
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <GPIO_setPinValue+0x16c>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <GPIO_setPinValue+0x168>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	2e c0       	rjmp	.+92     	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							break;
		case GPIO_PORTD :    if (a_value == HIGH)
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	a1 f4       	brne	.+40     	; 0xe00 <GPIO_setPinValue+0x1a6>
							{
								SET_BIT(PORTD,a_pin);
     dd8:	a2 e3       	ldi	r26, 0x32	; 50
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e2 e3       	ldi	r30, 0x32	; 50
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <GPIO_setPinValue+0x19c>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <GPIO_setPinValue+0x198>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <GPIO_setPinValue+0x1d4>
							}
							else if(a_value == LOW)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	a1 f4       	brne	.+40     	; 0xe2e <GPIO_setPinValue+0x1d4>
							{
								CLEAR_BIT(PORTD,a_pin);
     e06:	a2 e3       	ldi	r26, 0x32	; 50
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e2 e3       	ldi	r30, 0x32	; 50
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <GPIO_setPinValue+0x1ca>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <GPIO_setPinValue+0x1c6>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
							break;
	}
	
	

}
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <GPIO_getPinValue>:
/*				get value from pin in Port                      				 */
Uint8 GPIO_getPinValue(Uint8 a_port , Uint8 a_pin)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <GPIO_getPinValue+0x6>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <GPIO_getPinValue+0x8>
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	6b 83       	std	Y+3, r22	; 0x03
	Uint8 Local_Value =0;
     e50:	19 82       	std	Y+1, r1	; 0x01
	switch(a_port)
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3d 83       	std	Y+5, r19	; 0x05
     e5a:	2c 83       	std	Y+4, r18	; 0x04
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	91 05       	cpc	r25, r1
     e64:	61 f1       	breq	.+88     	; 0xebe <GPIO_getPinValue+0x80>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	22 30       	cpi	r18, 0x02	; 2
     e6c:	31 05       	cpc	r19, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <GPIO_getPinValue+0x3c>
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	69 f0       	breq	.+26     	; 0xe92 <GPIO_getPinValue+0x54>
     e78:	63 c0       	rjmp	.+198    	; 0xf40 <GPIO_getPinValue+0x102>
     e7a:	2c 81       	ldd	r18, Y+4	; 0x04
     e7c:	3d 81       	ldd	r19, Y+5	; 0x05
     e7e:	22 30       	cpi	r18, 0x02	; 2
     e80:	31 05       	cpc	r19, r1
     e82:	99 f1       	breq	.+102    	; 0xeea <GPIO_getPinValue+0xac>
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	83 30       	cpi	r24, 0x03	; 3
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <GPIO_getPinValue+0x52>
     e8e:	43 c0       	rjmp	.+134    	; 0xf16 <GPIO_getPinValue+0xd8>
     e90:	57 c0       	rjmp	.+174    	; 0xf40 <GPIO_getPinValue+0x102>
	{
		case GPIO_PORTA :     Local_Value=GET_BIT(PINA,a_pin); break;
     e92:	a9 e3       	ldi	r26, 0x39	; 57
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e9 e3       	ldi	r30, 0x39	; 57
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_getPinValue+0x72>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_getPinValue+0x6e>
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	8c 91       	ld	r24, X
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	41 c0       	rjmp	.+130    	; 0xf40 <GPIO_getPinValue+0x102>
		case GPIO_PORTB :     Local_Value=GET_BIT(PINB,a_pin); break;
     ebe:	a6 e3       	ldi	r26, 0x36	; 54
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e3       	ldi	r30, 0x36	; 54
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <GPIO_getPinValue+0x9e>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <GPIO_getPinValue+0x9a>
     ee0:	84 23       	and	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	8c 91       	ld	r24, X
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	2b c0       	rjmp	.+86     	; 0xf40 <GPIO_getPinValue+0x102>
		case GPIO_PORTC :     Local_Value=GET_BIT(PINC,a_pin); break;
     eea:	a3 e3       	ldi	r26, 0x33	; 51
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e3 e3       	ldi	r30, 0x33	; 51
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_getPinValue+0xca>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_getPinValue+0xc6>
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	8c 91       	ld	r24, X
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	15 c0       	rjmp	.+42     	; 0xf40 <GPIO_getPinValue+0x102>
		case GPIO_PORTD :     Local_Value=GET_BIT(PIND,a_pin); break;
     f16:	a0 e3       	ldi	r26, 0x30	; 48
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e0 e3       	ldi	r30, 0x30	; 48
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_getPinValue+0xf6>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_getPinValue+0xf2>
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	8c 91       	ld	r24, X
     f3e:	89 83       	std	Y+1, r24	; 0x01
		default			:								       break;
	}
	return Local_Value;
     f40:	89 81       	ldd	r24, Y+1	; 0x01
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <LCD_init>:
 *  Author: Mohamed Hamada
 */ 
#include "LCD.h"

void LCD_init(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	LCD_CTR_PORT_DIR|=(1<<EN)|(1<<RS)|(1<<RW);
     f5a:	a4 e3       	ldi	r26, 0x34	; 52
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	87 60       	ori	r24, 0x07	; 7
     f66:	8c 93       	st	X, r24
	#if DATA_BITS_MODE ==4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR|=0XF0;
     f68:	a7 e3       	ldi	r26, 0x37	; 55
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 6f       	ori	r24, 0xF0	; 240
     f74:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR|=0X0F;
		#endif	
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_sendCommand>
		LCD_sendCommand(FOUR_BITS_DATA_2_LINE_MODE);
     f7c:	88 e2       	ldi	r24, 0x28	; 40
     f7e:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_sendCommand>
	#elif DATA_BITS_MODE ==8
		LCD_DATA_PORT_DIR =0XFF;
		LCD_sendCommand(EIGHT_BITS_DATA_2_LINE_MODE);
	#endif
		LCD_sendCommand(CURSOR_OFF);
     f82:	8e e0       	ldi	r24, 0x0E	; 14
     f84:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_sendCommand>
		LCD_clear();
     f88:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <LCD_sendCommand>:
void LCD_sendCommand(Uint8 command)
{
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	c5 55       	subi	r28, 0x55	; 85
     fa0:	d0 40       	sbci	r29, 0x00	; 0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	fe 01       	movw	r30, r28
     fae:	eb 5a       	subi	r30, 0xAB	; 171
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTR_PORT,RS);
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTR_PORT,RW);
     fc2:	a5 e3       	ldi	r26, 0x35	; 53
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e5 e3       	ldi	r30, 0x35	; 53
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8d 7f       	andi	r24, 0xFD	; 253
     fce:	8c 93       	st	X, r24
     fd0:	fe 01       	movw	r30, r28
     fd2:	ef 5a       	subi	r30, 0xAF	; 175
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e8       	ldi	r26, 0x80	; 128
     fdc:	bf e3       	ldi	r27, 0x3F	; 63
     fde:	80 83       	st	Z, r24
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	a2 83       	std	Z+2, r26	; 0x02
     fe4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	8e 01       	movw	r16, r28
     fe8:	03 5b       	subi	r16, 0xB3	; 179
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	fe 01       	movw	r30, r28
     fee:	ef 5a       	subi	r30, 0xAF	; 175
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a ef       	ldi	r20, 0xFA	; 250
    1000:	54 e4       	ldi	r21, 0x44	; 68
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	f8 01       	movw	r30, r16
    100c:	80 83       	st	Z, r24
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	a2 83       	std	Z+2, r26	; 0x02
    1012:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1014:	fe 01       	movw	r30, r28
    1016:	e3 5b       	subi	r30, 0xB3	; 179
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	60 81       	ld	r22, Z
    101c:	71 81       	ldd	r23, Z+1	; 0x01
    101e:	82 81       	ldd	r24, Z+2	; 0x02
    1020:	93 81       	ldd	r25, Z+3	; 0x03
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	44 f4       	brge	.+16     	; 0x1042 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1032:	fe 01       	movw	r30, r28
    1034:	e5 5b       	subi	r30, 0xB5	; 181
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24
    1040:	64 c0       	rjmp	.+200    	; 0x110a <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1042:	fe 01       	movw	r30, r28
    1044:	e3 5b       	subi	r30, 0xB3	; 179
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	0c f0       	brlt	.+2      	; 0x1062 <LCD_sendCommand+0xd0>
    1060:	43 c0       	rjmp	.+134    	; 0x10e8 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1062:	fe 01       	movw	r30, r28
    1064:	ef 5a       	subi	r30, 0xAF	; 175
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e2       	ldi	r20, 0x20	; 32
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8e 01       	movw	r16, r28
    1082:	05 5b       	subi	r16, 0xB5	; 181
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	f8 01       	movw	r30, r16
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
    1098:	1f c0       	rjmp	.+62     	; 0x10d8 <LCD_sendCommand+0x146>
    109a:	fe 01       	movw	r30, r28
    109c:	e7 5b       	subi	r30, 0xB7	; 183
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	88 ec       	ldi	r24, 0xC8	; 200
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a8:	fe 01       	movw	r30, r28
    10aa:	e7 5b       	subi	r30, 0xB7	; 183
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_sendCommand+0x120>
    10b6:	fe 01       	movw	r30, r28
    10b8:	e7 5b       	subi	r30, 0xB7	; 183
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	de 01       	movw	r26, r28
    10c2:	a5 5b       	subi	r26, 0xB5	; 181
    10c4:	bf 4f       	sbci	r27, 0xFF	; 255
    10c6:	fe 01       	movw	r30, r28
    10c8:	e5 5b       	subi	r30, 0xB5	; 181
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	11 96       	adiw	r26, 0x01	; 1
    10d4:	9c 93       	st	X, r25
    10d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	fe 01       	movw	r30, r28
    10da:	e5 5b       	subi	r30, 0xB5	; 181
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	d1 f6       	brne	.-76     	; 0x109a <LCD_sendCommand+0x108>
    10e6:	27 c0       	rjmp	.+78     	; 0x1136 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e8:	8e 01       	movw	r16, r28
    10ea:	05 5b       	subi	r16, 0xB5	; 181
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	fe 01       	movw	r30, r28
    10f0:	e3 5b       	subi	r30, 0xB3	; 179
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	f8 01       	movw	r30, r16
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	80 83       	st	Z, r24
    110a:	de 01       	movw	r26, r28
    110c:	a9 5b       	subi	r26, 0xB9	; 185
    110e:	bf 4f       	sbci	r27, 0xFF	; 255
    1110:	fe 01       	movw	r30, r28
    1112:	e5 5b       	subi	r30, 0xB5	; 181
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 81       	ld	r24, Z
    1118:	91 81       	ldd	r25, Z+1	; 0x01
    111a:	8d 93       	st	X+, r24
    111c:	9c 93       	st	X, r25
    111e:	fe 01       	movw	r30, r28
    1120:	e9 5b       	subi	r30, 0xB9	; 185
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <LCD_sendCommand+0x196>
    112c:	fe 01       	movw	r30, r28
    112e:	e9 5b       	subi	r30, 0xB9	; 185
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTR_PORT,EN);
    1136:	a5 e3       	ldi	r26, 0x35	; 53
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e5 e3       	ldi	r30, 0x35	; 53
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	84 60       	ori	r24, 0x04	; 4
    1142:	8c 93       	st	X, r24
    1144:	fe 01       	movw	r30, r28
    1146:	ed 5b       	subi	r30, 0xBD	; 189
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e8       	ldi	r26, 0x80	; 128
    1150:	bf e3       	ldi	r27, 0x3F	; 63
    1152:	80 83       	st	Z, r24
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	a2 83       	std	Z+2, r26	; 0x02
    1158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	8e 01       	movw	r16, r28
    115c:	01 5c       	subi	r16, 0xC1	; 193
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	fe 01       	movw	r30, r28
    1162:	ed 5b       	subi	r30, 0xBD	; 189
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a ef       	ldi	r20, 0xFA	; 250
    1174:	54 e4       	ldi	r21, 0x44	; 68
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	f8 01       	movw	r30, r16
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
    1186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1188:	fe 01       	movw	r30, r28
    118a:	ff 96       	adiw	r30, 0x3f	; 63
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	2c f4       	brge	.+10     	; 0x11ae <LCD_sendCommand+0x21c>
		__ticks = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9e af       	std	Y+62, r25	; 0x3e
    11aa:	8d af       	std	Y+61, r24	; 0x3d
    11ac:	46 c0       	rjmp	.+140    	; 0x123a <LCD_sendCommand+0x2a8>
	else if (__tmp > 65535)
    11ae:	fe 01       	movw	r30, r28
    11b0:	ff 96       	adiw	r30, 0x3f	; 63
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	64 f5       	brge	.+88     	; 0x1222 <LCD_sendCommand+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ca:	fe 01       	movw	r30, r28
    11cc:	ed 5b       	subi	r30, 0xBD	; 189
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9e af       	std	Y+62, r25	; 0x3e
    11f6:	8d af       	std	Y+61, r24	; 0x3d
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <LCD_sendCommand+0x286>
    11fa:	88 ec       	ldi	r24, 0xC8	; 200
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9c af       	std	Y+60, r25	; 0x3c
    1200:	8b af       	std	Y+59, r24	; 0x3b
    1202:	8b ad       	ldd	r24, Y+59	; 0x3b
    1204:	9c ad       	ldd	r25, Y+60	; 0x3c
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <LCD_sendCommand+0x274>
    120a:	9c af       	std	Y+60, r25	; 0x3c
    120c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1210:	9e ad       	ldd	r25, Y+62	; 0x3e
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9e af       	std	Y+62, r25	; 0x3e
    1216:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1218:	8d ad       	ldd	r24, Y+61	; 0x3d
    121a:	9e ad       	ldd	r25, Y+62	; 0x3e
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	69 f7       	brne	.-38     	; 0x11fa <LCD_sendCommand+0x268>
    1220:	16 c0       	rjmp	.+44     	; 0x124e <LCD_sendCommand+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1222:	fe 01       	movw	r30, r28
    1224:	ff 96       	adiw	r30, 0x3f	; 63
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e af       	std	Y+62, r25	; 0x3e
    1238:	8d af       	std	Y+61, r24	; 0x3d
    123a:	8d ad       	ldd	r24, Y+61	; 0x3d
    123c:	9e ad       	ldd	r25, Y+62	; 0x3e
    123e:	9a af       	std	Y+58, r25	; 0x3a
    1240:	89 af       	std	Y+57, r24	; 0x39
    1242:	89 ad       	ldd	r24, Y+57	; 0x39
    1244:	9a ad       	ldd	r25, Y+58	; 0x3a
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_sendCommand+0x2b4>
    124a:	9a af       	std	Y+58, r25	; 0x3a
    124c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =(command&0XF0)|(LCD_DATA_PORT&0x0F);		
    124e:	a8 e3       	ldi	r26, 0x38	; 56
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	fe 01       	movw	r30, r28
    1254:	eb 5a       	subi	r30, 0xAB	; 171
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	98 2f       	mov	r25, r24
    125c:	90 7f       	andi	r25, 0xF0	; 240
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 70       	andi	r24, 0x0F	; 15
    1266:	89 2b       	or	r24, r25
    1268:	8c 93       	st	X, r24
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a0 e8       	ldi	r26, 0x80	; 128
    1270:	bf e3       	ldi	r27, 0x3F	; 63
    1272:	8d ab       	std	Y+53, r24	; 0x35
    1274:	9e ab       	std	Y+54, r25	; 0x36
    1276:	af ab       	std	Y+55, r26	; 0x37
    1278:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6d a9       	ldd	r22, Y+53	; 0x35
    127c:	7e a9       	ldd	r23, Y+54	; 0x36
    127e:	8f a9       	ldd	r24, Y+55	; 0x37
    1280:	98 ad       	ldd	r25, Y+56	; 0x38
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a ef       	ldi	r20, 0xFA	; 250
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	89 ab       	std	Y+49, r24	; 0x31
    1294:	9a ab       	std	Y+50, r25	; 0x32
    1296:	ab ab       	std	Y+51, r26	; 0x33
    1298:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    129a:	69 a9       	ldd	r22, Y+49	; 0x31
    129c:	7a a9       	ldd	r23, Y+50	; 0x32
    129e:	8b a9       	ldd	r24, Y+51	; 0x33
    12a0:	9c a9       	ldd	r25, Y+52	; 0x34
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <LCD_sendCommand+0x32a>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	98 ab       	std	Y+48, r25	; 0x30
    12b8:	8f a7       	std	Y+47, r24	; 0x2f
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <LCD_sendCommand+0x3a8>
	else if (__tmp > 65535)
    12bc:	69 a9       	ldd	r22, Y+49	; 0x31
    12be:	7a a9       	ldd	r23, Y+50	; 0x32
    12c0:	8b a9       	ldd	r24, Y+51	; 0x33
    12c2:	9c a9       	ldd	r25, Y+52	; 0x34
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <LCD_sendCommand+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6d a9       	ldd	r22, Y+53	; 0x35
    12d6:	7e a9       	ldd	r23, Y+54	; 0x36
    12d8:	8f a9       	ldd	r24, Y+55	; 0x37
    12da:	98 ad       	ldd	r25, Y+56	; 0x38
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	98 ab       	std	Y+48, r25	; 0x30
    12fa:	8f a7       	std	Y+47, r24	; 0x2f
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <LCD_sendCommand+0x38a>
    12fe:	88 ec       	ldi	r24, 0xC8	; 200
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9e a7       	std	Y+46, r25	; 0x2e
    1304:	8d a7       	std	Y+45, r24	; 0x2d
    1306:	8d a5       	ldd	r24, Y+45	; 0x2d
    1308:	9e a5       	ldd	r25, Y+46	; 0x2e
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_sendCommand+0x378>
    130e:	9e a7       	std	Y+46, r25	; 0x2e
    1310:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8f a5       	ldd	r24, Y+47	; 0x2f
    1314:	98 a9       	ldd	r25, Y+48	; 0x30
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	98 ab       	std	Y+48, r25	; 0x30
    131a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <LCD_sendCommand+0x36c>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <LCD_sendCommand+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	69 a9       	ldd	r22, Y+49	; 0x31
    1328:	7a a9       	ldd	r23, Y+50	; 0x32
    132a:	8b a9       	ldd	r24, Y+51	; 0x33
    132c:	9c a9       	ldd	r25, Y+52	; 0x34
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
    133a:	8f a5       	ldd	r24, Y+47	; 0x2f
    133c:	98 a9       	ldd	r25, Y+48	; 0x30
    133e:	9c a7       	std	Y+44, r25	; 0x2c
    1340:	8b a7       	std	Y+43, r24	; 0x2b
    1342:	8b a5       	ldd	r24, Y+43	; 0x2b
    1344:	9c a5       	ldd	r25, Y+44	; 0x2c
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <LCD_sendCommand+0x3b4>
    134a:	9c a7       	std	Y+44, r25	; 0x2c
    134c:	8b a7       	std	Y+43, r24	; 0x2b
		#else 
		    LCD_DATA_PORT =((command&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    134e:	a5 e3       	ldi	r26, 0x35	; 53
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e3       	ldi	r30, 0x35	; 53
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8b 7f       	andi	r24, 0xFB	; 251
    135a:	8c 93       	st	X, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a0 e8       	ldi	r26, 0x80	; 128
    1362:	bf e3       	ldi	r27, 0x3F	; 63
    1364:	8f a3       	std	Y+39, r24	; 0x27
    1366:	98 a7       	std	Y+40, r25	; 0x28
    1368:	a9 a7       	std	Y+41, r26	; 0x29
    136a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6f a1       	ldd	r22, Y+39	; 0x27
    136e:	78 a5       	ldd	r23, Y+40	; 0x28
    1370:	89 a5       	ldd	r24, Y+41	; 0x29
    1372:	9a a5       	ldd	r25, Y+42	; 0x2a
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a ef       	ldi	r20, 0xFA	; 250
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8b a3       	std	Y+35, r24	; 0x23
    1386:	9c a3       	std	Y+36, r25	; 0x24
    1388:	ad a3       	std	Y+37, r26	; 0x25
    138a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    138c:	6b a1       	ldd	r22, Y+35	; 0x23
    138e:	7c a1       	ldd	r23, Y+36	; 0x24
    1390:	8d a1       	ldd	r24, Y+37	; 0x25
    1392:	9e a1       	ldd	r25, Y+38	; 0x26
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <LCD_sendCommand+0x41c>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    13ae:	6b a1       	ldd	r22, Y+35	; 0x23
    13b0:	7c a1       	ldd	r23, Y+36	; 0x24
    13b2:	8d a1       	ldd	r24, Y+37	; 0x25
    13b4:	9e a1       	ldd	r25, Y+38	; 0x26
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <LCD_sendCommand+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6f a1       	ldd	r22, Y+39	; 0x27
    13c8:	78 a5       	ldd	r23, Y+40	; 0x28
    13ca:	89 a5       	ldd	r24, Y+41	; 0x29
    13cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9a a3       	std	Y+34, r25	; 0x22
    13ec:	89 a3       	std	Y+33, r24	; 0x21
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <LCD_sendCommand+0x47c>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	98 a3       	std	Y+32, r25	; 0x20
    13f6:	8f 8f       	std	Y+31, r24	; 0x1f
    13f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13fa:	98 a1       	ldd	r25, Y+32	; 0x20
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_sendCommand+0x46a>
    1400:	98 a3       	std	Y+32, r25	; 0x20
    1402:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	89 a1       	ldd	r24, Y+33	; 0x21
    1406:	9a a1       	ldd	r25, Y+34	; 0x22
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9a a3       	std	Y+34, r25	; 0x22
    140c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	89 a1       	ldd	r24, Y+33	; 0x21
    1410:	9a a1       	ldd	r25, Y+34	; 0x22
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <LCD_sendCommand+0x45e>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6b a1       	ldd	r22, Y+35	; 0x23
    141a:	7c a1       	ldd	r23, Y+36	; 0x24
    141c:	8d a1       	ldd	r24, Y+37	; 0x25
    141e:	9e a1       	ldd	r25, Y+38	; 0x26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9a a3       	std	Y+34, r25	; 0x22
    142a:	89 a3       	std	Y+33, r24	; 0x21
    142c:	89 a1       	ldd	r24, Y+33	; 0x21
    142e:	9a a1       	ldd	r25, Y+34	; 0x22
    1430:	9e 8f       	std	Y+30, r25	; 0x1e
    1432:	8d 8f       	std	Y+29, r24	; 0x1d
    1434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1436:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <LCD_sendCommand+0x4a6>
    143c:	9e 8f       	std	Y+30, r25	; 0x1e
    143e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    1440:	a5 e3       	ldi	r26, 0x35	; 53
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e3       	ldi	r30, 0x35	; 53
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	84 60       	ori	r24, 0x04	; 4
    144c:	8c 93       	st	X, r24
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =((command&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
    144e:	a8 e3       	ldi	r26, 0x38	; 56
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	fe 01       	movw	r30, r28
    1454:	eb 5a       	subi	r30, 0xAB	; 171
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	82 95       	swap	r24
    1460:	92 95       	swap	r25
    1462:	90 7f       	andi	r25, 0xF0	; 240
    1464:	98 27       	eor	r25, r24
    1466:	80 7f       	andi	r24, 0xF0	; 240
    1468:	98 27       	eor	r25, r24
    146a:	98 2f       	mov	r25, r24
    146c:	e8 e3       	ldi	r30, 0x38	; 56
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8f 70       	andi	r24, 0x0F	; 15
    1474:	89 2b       	or	r24, r25
    1476:	8c 93       	st	X, r24
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	89 8f       	std	Y+25, r24	; 0x19
    1482:	9a 8f       	std	Y+26, r25	; 0x1a
    1484:	ab 8f       	std	Y+27, r26	; 0x1b
    1486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	69 8d       	ldd	r22, Y+25	; 0x19
    148a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a ef       	ldi	r20, 0xFA	; 250
    1496:	54 e4       	ldi	r21, 0x44	; 68
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8d 8b       	std	Y+21, r24	; 0x15
    14a2:	9e 8b       	std	Y+22, r25	; 0x16
    14a4:	af 8b       	std	Y+23, r26	; 0x17
    14a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_sendCommand+0x538>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <LCD_sendCommand+0x5b6>
	else if (__tmp > 65535)
    14ca:	6d 89       	ldd	r22, Y+21	; 0x15
    14cc:	7e 89       	ldd	r23, Y+22	; 0x16
    14ce:	8f 89       	ldd	r24, Y+23	; 0x17
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <LCD_sendCommand+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	69 8d       	ldd	r22, Y+25	; 0x19
    14e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9c 8b       	std	Y+20, r25	; 0x14
    1508:	8b 8b       	std	Y+19, r24	; 0x13
    150a:	0f c0       	rjmp	.+30     	; 0x152a <LCD_sendCommand+0x598>
    150c:	88 ec       	ldi	r24, 0xC8	; 200
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9a 8b       	std	Y+18, r25	; 0x12
    1512:	89 8b       	std	Y+17, r24	; 0x11
    1514:	89 89       	ldd	r24, Y+17	; 0x11
    1516:	9a 89       	ldd	r25, Y+18	; 0x12
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <LCD_sendCommand+0x586>
    151c:	9a 8b       	std	Y+18, r25	; 0x12
    151e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	9c 89       	ldd	r25, Y+20	; 0x14
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <LCD_sendCommand+0x57a>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <LCD_sendCommand+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	8b 89       	ldd	r24, Y+19	; 0x13
    154a:	9c 89       	ldd	r25, Y+20	; 0x14
    154c:	98 8b       	std	Y+16, r25	; 0x10
    154e:	8f 87       	std	Y+15, r24	; 0x0f
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	98 89       	ldd	r25, Y+16	; 0x10
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_sendCommand+0x5c2>
    1558:	98 8b       	std	Y+16, r25	; 0x10
    155a:	8f 87       	std	Y+15, r24	; 0x0f
		#else
			LCD_DATA_PORT =((command&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    155c:	a5 e3       	ldi	r26, 0x35	; 53
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e5 e3       	ldi	r30, 0x35	; 53
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8b 7f       	andi	r24, 0xFB	; 251
    1568:	8c 93       	st	X, r24
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e8       	ldi	r26, 0x80	; 128
    1570:	bf e3       	ldi	r27, 0x3F	; 63
    1572:	8b 87       	std	Y+11, r24	; 0x0b
    1574:	9c 87       	std	Y+12, r25	; 0x0c
    1576:	ad 87       	std	Y+13, r26	; 0x0d
    1578:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a ef       	ldi	r20, 0xFA	; 250
    1588:	54 e4       	ldi	r21, 0x44	; 68
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8f 83       	std	Y+7, r24	; 0x07
    1594:	98 87       	std	Y+8, r25	; 0x08
    1596:	a9 87       	std	Y+9, r26	; 0x09
    1598:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <LCD_sendCommand+0x62a>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <LCD_sendCommand+0x6a8>
	else if (__tmp > 65535)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <LCD_sendCommand+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <LCD_sendCommand+0x68a>
    15fe:	88 ec       	ldi	r24, 0xC8	; 200
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0x678>
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <LCD_sendCommand+0x66c>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <LCD_sendCommand+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9e 83       	std	Y+6, r25	; 0x06
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_sendCommand+0x6b4>
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(LCD_CTR_PORT,EN);
		_delay_ms(1);
	#endif
	
	
}
    164e:	cb 5a       	subi	r28, 0xAB	; 171
    1650:	df 4f       	sbci	r29, 0xFF	; 255
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <LCD_displayChar>:
void LCD_displayChar(char data)
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	c5 55       	subi	r28, 0x55	; 85
    1674:	d0 40       	sbci	r29, 0x00	; 0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	fe 01       	movw	r30, r28
    1682:	eb 5a       	subi	r30, 0xAB	; 171
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 83       	st	Z, r24
		SET_BIT(LCD_CTR_PORT,RS);
    1688:	a5 e3       	ldi	r26, 0x35	; 53
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e5 e3       	ldi	r30, 0x35	; 53
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	81 60       	ori	r24, 0x01	; 1
    1694:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_CTR_PORT,RW);
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8d 7f       	andi	r24, 0xFD	; 253
    16a2:	8c 93       	st	X, r24
    16a4:	fe 01       	movw	r30, r28
    16a6:	ef 5a       	subi	r30, 0xAF	; 175
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e8       	ldi	r26, 0x80	; 128
    16b0:	bf e3       	ldi	r27, 0x3F	; 63
    16b2:	80 83       	st	Z, r24
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	a2 83       	std	Z+2, r26	; 0x02
    16b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	8e 01       	movw	r16, r28
    16bc:	03 5b       	subi	r16, 0xB3	; 179
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	fe 01       	movw	r30, r28
    16c2:	ef 5a       	subi	r30, 0xAF	; 175
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	60 81       	ld	r22, Z
    16c8:	71 81       	ldd	r23, Z+1	; 0x01
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	93 81       	ldd	r25, Z+3	; 0x03
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a ef       	ldi	r20, 0xFA	; 250
    16d4:	54 e4       	ldi	r21, 0x44	; 68
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	80 83       	st	Z, r24
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	a2 83       	std	Z+2, r26	; 0x02
    16e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16e8:	fe 01       	movw	r30, r28
    16ea:	e3 5b       	subi	r30, 0xB3	; 179
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e8       	ldi	r20, 0x80	; 128
    16fc:	5f e3       	ldi	r21, 0x3F	; 63
    16fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1702:	88 23       	and	r24, r24
    1704:	44 f4       	brge	.+16     	; 0x1716 <LCD_displayChar+0xb0>
		__ticks = 1;
    1706:	fe 01       	movw	r30, r28
    1708:	e5 5b       	subi	r30, 0xB5	; 181
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
    1714:	64 c0       	rjmp	.+200    	; 0x17de <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    1716:	fe 01       	movw	r30, r28
    1718:	e3 5b       	subi	r30, 0xB3	; 179
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	0c f0       	brlt	.+2      	; 0x1736 <LCD_displayChar+0xd0>
    1734:	43 c0       	rjmp	.+134    	; 0x17bc <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	fe 01       	movw	r30, r28
    1738:	ef 5a       	subi	r30, 0xAF	; 175
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8e 01       	movw	r16, r28
    1756:	05 5b       	subi	r16, 0xB5	; 181
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	f8 01       	movw	r30, r16
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
    176c:	1f c0       	rjmp	.+62     	; 0x17ac <LCD_displayChar+0x146>
    176e:	fe 01       	movw	r30, r28
    1770:	e7 5b       	subi	r30, 0xB7	; 183
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	88 ec       	ldi	r24, 0xC8	; 200
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	fe 01       	movw	r30, r28
    177e:	e7 5b       	subi	r30, 0xB7	; 183
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_displayChar+0x120>
    178a:	fe 01       	movw	r30, r28
    178c:	e7 5b       	subi	r30, 0xB7	; 183
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1794:	de 01       	movw	r26, r28
    1796:	a5 5b       	subi	r26, 0xB5	; 181
    1798:	bf 4f       	sbci	r27, 0xFF	; 255
    179a:	fe 01       	movw	r30, r28
    179c:	e5 5b       	subi	r30, 0xB5	; 181
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	11 96       	adiw	r26, 0x01	; 1
    17a8:	9c 93       	st	X, r25
    17aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e5 5b       	subi	r30, 0xB5	; 181
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	d1 f6       	brne	.-76     	; 0x176e <LCD_displayChar+0x108>
    17ba:	27 c0       	rjmp	.+78     	; 0x180a <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	8e 01       	movw	r16, r28
    17be:	05 5b       	subi	r16, 0xB5	; 181
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	fe 01       	movw	r30, r28
    17c4:	e3 5b       	subi	r30, 0xB3	; 179
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	f8 01       	movw	r30, r16
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	80 83       	st	Z, r24
    17de:	de 01       	movw	r26, r28
    17e0:	a9 5b       	subi	r26, 0xB9	; 185
    17e2:	bf 4f       	sbci	r27, 0xFF	; 255
    17e4:	fe 01       	movw	r30, r28
    17e6:	e5 5b       	subi	r30, 0xB5	; 181
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	8d 93       	st	X+, r24
    17f0:	9c 93       	st	X, r25
    17f2:	fe 01       	movw	r30, r28
    17f4:	e9 5b       	subi	r30, 0xB9	; 185
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_displayChar+0x196>
    1800:	fe 01       	movw	r30, r28
    1802:	e9 5b       	subi	r30, 0xB9	; 185
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	84 60       	ori	r24, 0x04	; 4
    1816:	8c 93       	st	X, r24
    1818:	fe 01       	movw	r30, r28
    181a:	ed 5b       	subi	r30, 0xBD	; 189
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	bf e3       	ldi	r27, 0x3F	; 63
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	8e 01       	movw	r16, r28
    1830:	01 5c       	subi	r16, 0xC1	; 193
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	fe 01       	movw	r30, r28
    1836:	ed 5b       	subi	r30, 0xBD	; 189
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ef       	ldi	r20, 0xFA	; 250
    1848:	54 e4       	ldi	r21, 0x44	; 68
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	f8 01       	movw	r30, r16
    1854:	80 83       	st	Z, r24
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	a2 83       	std	Z+2, r26	; 0x02
    185a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    185c:	fe 01       	movw	r30, r28
    185e:	ff 96       	adiw	r30, 0x3f	; 63
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <LCD_displayChar+0x21c>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9e af       	std	Y+62, r25	; 0x3e
    187e:	8d af       	std	Y+61, r24	; 0x3d
    1880:	46 c0       	rjmp	.+140    	; 0x190e <LCD_displayChar+0x2a8>
	else if (__tmp > 65535)
    1882:	fe 01       	movw	r30, r28
    1884:	ff 96       	adiw	r30, 0x3f	; 63
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	64 f5       	brge	.+88     	; 0x18f6 <LCD_displayChar+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 5b       	subi	r30, 0xBD	; 189
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e af       	std	Y+62, r25	; 0x3e
    18ca:	8d af       	std	Y+61, r24	; 0x3d
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <LCD_displayChar+0x286>
    18ce:	88 ec       	ldi	r24, 0xC8	; 200
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c af       	std	Y+60, r25	; 0x3c
    18d4:	8b af       	std	Y+59, r24	; 0x3b
    18d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    18d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_displayChar+0x274>
    18de:	9c af       	std	Y+60, r25	; 0x3c
    18e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	9e af       	std	Y+62, r25	; 0x3e
    18ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	69 f7       	brne	.-38     	; 0x18ce <LCD_displayChar+0x268>
    18f4:	16 c0       	rjmp	.+44     	; 0x1922 <LCD_displayChar+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f6:	fe 01       	movw	r30, r28
    18f8:	ff 96       	adiw	r30, 0x3f	; 63
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	9e af       	std	Y+62, r25	; 0x3e
    190c:	8d af       	std	Y+61, r24	; 0x3d
    190e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1910:	9e ad       	ldd	r25, Y+62	; 0x3e
    1912:	9a af       	std	Y+58, r25	; 0x3a
    1914:	89 af       	std	Y+57, r24	; 0x39
    1916:	89 ad       	ldd	r24, Y+57	; 0x39
    1918:	9a ad       	ldd	r25, Y+58	; 0x3a
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <LCD_displayChar+0x2b4>
    191e:	9a af       	std	Y+58, r25	; 0x3a
    1920:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
		#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =(data&0XF0)|(LCD_DATA_PORT&0x0F);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	fe 01       	movw	r30, r28
    1928:	eb 5a       	subi	r30, 0xAB	; 171
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	98 2f       	mov	r25, r24
    1930:	90 7f       	andi	r25, 0xF0	; 240
    1932:	e8 e3       	ldi	r30, 0x38	; 56
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 70       	andi	r24, 0x0F	; 15
    193a:	89 2b       	or	r24, r25
    193c:	8c 93       	st	X, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 e8       	ldi	r26, 0x80	; 128
    1944:	bf e3       	ldi	r27, 0x3F	; 63
    1946:	8d ab       	std	Y+53, r24	; 0x35
    1948:	9e ab       	std	Y+54, r25	; 0x36
    194a:	af ab       	std	Y+55, r26	; 0x37
    194c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6d a9       	ldd	r22, Y+53	; 0x35
    1950:	7e a9       	ldd	r23, Y+54	; 0x36
    1952:	8f a9       	ldd	r24, Y+55	; 0x37
    1954:	98 ad       	ldd	r25, Y+56	; 0x38
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	89 ab       	std	Y+49, r24	; 0x31
    1968:	9a ab       	std	Y+50, r25	; 0x32
    196a:	ab ab       	std	Y+51, r26	; 0x33
    196c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    196e:	69 a9       	ldd	r22, Y+49	; 0x31
    1970:	7a a9       	ldd	r23, Y+50	; 0x32
    1972:	8b a9       	ldd	r24, Y+51	; 0x33
    1974:	9c a9       	ldd	r25, Y+52	; 0x34
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <LCD_displayChar+0x32a>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	98 ab       	std	Y+48, r25	; 0x30
    198c:	8f a7       	std	Y+47, r24	; 0x2f
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <LCD_displayChar+0x3a8>
	else if (__tmp > 65535)
    1990:	69 a9       	ldd	r22, Y+49	; 0x31
    1992:	7a a9       	ldd	r23, Y+50	; 0x32
    1994:	8b a9       	ldd	r24, Y+51	; 0x33
    1996:	9c a9       	ldd	r25, Y+52	; 0x34
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <LCD_displayChar+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6d a9       	ldd	r22, Y+53	; 0x35
    19aa:	7e a9       	ldd	r23, Y+54	; 0x36
    19ac:	8f a9       	ldd	r24, Y+55	; 0x37
    19ae:	98 ad       	ldd	r25, Y+56	; 0x38
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	98 ab       	std	Y+48, r25	; 0x30
    19ce:	8f a7       	std	Y+47, r24	; 0x2f
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <LCD_displayChar+0x38a>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9e a7       	std	Y+46, r25	; 0x2e
    19d8:	8d a7       	std	Y+45, r24	; 0x2d
    19da:	8d a5       	ldd	r24, Y+45	; 0x2d
    19dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_displayChar+0x378>
    19e2:	9e a7       	std	Y+46, r25	; 0x2e
    19e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	98 ab       	std	Y+48, r25	; 0x30
    19ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f2:	98 a9       	ldd	r25, Y+48	; 0x30
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <LCD_displayChar+0x36c>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <LCD_displayChar+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	69 a9       	ldd	r22, Y+49	; 0x31
    19fc:	7a a9       	ldd	r23, Y+50	; 0x32
    19fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1a00:	9c a9       	ldd	r25, Y+52	; 0x34
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	9c a7       	std	Y+44, r25	; 0x2c
    1a14:	8b a7       	std	Y+43, r24	; 0x2b
    1a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_displayChar+0x3b4>
    1a1e:	9c a7       	std	Y+44, r25	; 0x2c
    1a20:	8b a7       	std	Y+43, r24	; 0x2b
		#else
		LCD_DATA_PORT =((data&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    1a22:	a5 e3       	ldi	r26, 0x35	; 53
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e5 e3       	ldi	r30, 0x35	; 53
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8b 7f       	andi	r24, 0xFB	; 251
    1a2e:	8c 93       	st	X, r24
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 e8       	ldi	r26, 0x80	; 128
    1a36:	bf e3       	ldi	r27, 0x3F	; 63
    1a38:	8f a3       	std	Y+39, r24	; 0x27
    1a3a:	98 a7       	std	Y+40, r25	; 0x28
    1a3c:	a9 a7       	std	Y+41, r26	; 0x29
    1a3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	6f a1       	ldd	r22, Y+39	; 0x27
    1a42:	78 a5       	ldd	r23, Y+40	; 0x28
    1a44:	89 a5       	ldd	r24, Y+41	; 0x29
    1a46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	4a ef       	ldi	r20, 0xFA	; 250
    1a4e:	54 e4       	ldi	r21, 0x44	; 68
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8b a3       	std	Y+35, r24	; 0x23
    1a5a:	9c a3       	std	Y+36, r25	; 0x24
    1a5c:	ad a3       	std	Y+37, r26	; 0x25
    1a5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a60:	6b a1       	ldd	r22, Y+35	; 0x23
    1a62:	7c a1       	ldd	r23, Y+36	; 0x24
    1a64:	8d a1       	ldd	r24, Y+37	; 0x25
    1a66:	9e a1       	ldd	r25, Y+38	; 0x26
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <LCD_displayChar+0x41c>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9a a3       	std	Y+34, r25	; 0x22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <LCD_displayChar+0x49a>
	else if (__tmp > 65535)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	3f ef       	ldi	r19, 0xFF	; 255
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	57 e4       	ldi	r21, 0x47	; 71
    1a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <LCD_displayChar+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e2       	ldi	r20, 0x20	; 32
    1aa8:	51 e4       	ldi	r21, 0x41	; 65
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <LCD_displayChar+0x47c>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	8f 8f       	std	Y+31, r24	; 0x1f
    1acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ace:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_displayChar+0x46a>
    1ad4:	98 a3       	std	Y+32, r25	; 0x20
    1ad6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <LCD_displayChar+0x45e>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <LCD_displayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	9e 8f       	std	Y+30, r25	; 0x1e
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
    1b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_displayChar+0x4a6>
    1b10:	9e 8f       	std	Y+30, r25	; 0x1e
    1b12:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
    1b14:	a5 e3       	ldi	r26, 0x35	; 53
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e5 e3       	ldi	r30, 0x35	; 53
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	84 60       	ori	r24, 0x04	; 4
    1b20:	8c 93       	st	X, r24
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =((data&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	fe 01       	movw	r30, r28
    1b28:	eb 5a       	subi	r30, 0xAB	; 171
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	82 95       	swap	r24
    1b34:	92 95       	swap	r25
    1b36:	90 7f       	andi	r25, 0xF0	; 240
    1b38:	98 27       	eor	r25, r24
    1b3a:	80 7f       	andi	r24, 0xF0	; 240
    1b3c:	98 27       	eor	r25, r24
    1b3e:	98 2f       	mov	r25, r24
    1b40:	e8 e3       	ldi	r30, 0x38	; 56
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 70       	andi	r24, 0x0F	; 15
    1b48:	89 2b       	or	r24, r25
    1b4a:	8c 93       	st	X, r24
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	89 8f       	std	Y+25, r24	; 0x19
    1b56:	9a 8f       	std	Y+26, r25	; 0x1a
    1b58:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a ef       	ldi	r20, 0xFA	; 250
    1b6a:	54 e4       	ldi	r21, 0x44	; 68
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8d 8b       	std	Y+21, r24	; 0x15
    1b76:	9e 8b       	std	Y+22, r25	; 0x16
    1b78:	af 8b       	std	Y+23, r26	; 0x17
    1b7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b80:	8f 89       	ldd	r24, Y+23	; 0x17
    1b82:	98 8d       	ldd	r25, Y+24	; 0x18
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_displayChar+0x538>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_displayChar+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_displayChar+0x598>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9a 8b       	std	Y+18, r25	; 0x12
    1be6:	89 8b       	std	Y+17, r24	; 0x11
    1be8:	89 89       	ldd	r24, Y+17	; 0x11
    1bea:	9a 89       	ldd	r25, Y+18	; 0x12
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_displayChar+0x586>
    1bf0:	9a 8b       	std	Y+18, r25	; 0x12
    1bf2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9c 8b       	std	Y+20, r25	; 0x14
    1bfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_displayChar+0x57a>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_displayChar+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
    1c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c20:	98 8b       	std	Y+16, r25	; 0x10
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    1c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c26:	98 89       	ldd	r25, Y+16	; 0x10
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_displayChar+0x5c2>
    1c2c:	98 8b       	std	Y+16, r25	; 0x10
    1c2e:	8f 87       	std	Y+15, r24	; 0x0f
		#else
		LCD_DATA_PORT =((data&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
    1c30:	a5 e3       	ldi	r26, 0x35	; 53
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e3       	ldi	r30, 0x35	; 53
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8b 7f       	andi	r24, 0xFB	; 251
    1c3c:	8c 93       	st	X, r24
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e8       	ldi	r26, 0x80	; 128
    1c44:	bf e3       	ldi	r27, 0x3F	; 63
    1c46:	8b 87       	std	Y+11, r24	; 0x0b
    1c48:	9c 87       	std	Y+12, r25	; 0x0c
    1c4a:	ad 87       	std	Y+13, r26	; 0x0d
    1c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8f 83       	std	Y+7, r24	; 0x07
    1c68:	98 87       	std	Y+8, r25	; 0x08
    1c6a:	a9 87       	std	Y+9, r26	; 0x09
    1c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_displayChar+0x62a>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_displayChar+0x6a8>
	else if (__tmp > 65535)
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_displayChar+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_displayChar+0x68a>
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_displayChar+0x678>
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_displayChar+0x66c>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <LCD_displayChar+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_displayChar+0x6b4>
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
		_delay_ms(1);
		#endif
		
}
    1d22:	cb 5a       	subi	r28, 0xAB	; 171
    1d24:	df 4f       	sbci	r29, 0xFF	; 255
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <LCD_displayString>:
void LCD_displayString(char*data)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <LCD_displayString+0x6>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i=0;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <LCD_displayString+0x30>
	while(data[i]!='\0')
	{
		LCD_displayChar(data[i]);
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	80 81       	ld	r24, Z
    1d60:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_displayChar>
		i++;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	89 83       	std	Y+1, r24	; 0x01
		
}
void LCD_displayString(char*data)
{
	Uint8 i=0;
	while(data[i]!='\0')
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	9b 81       	ldd	r25, Y+3	; 0x03
    1d74:	fc 01       	movw	r30, r24
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 23       	and	r24, r24
    1d7e:	39 f7       	brne	.-50     	; 0x1d4e <LCD_displayString+0x14>
	{
		LCD_displayChar(data[i]);
		i++;
	}
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_clear>:
void LCD_clear()
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_sendCommand>
}
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(Uint8 row,Uint8 colum, char *data)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <LCD_displayStringRowColumn+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <LCD_displayStringRowColumn+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	6a 83       	std	Y+2, r22	; 0x02
    1db0:	5c 83       	std	Y+4, r21	; 0x04
    1db2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, colum);
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	6a 81       	ldd	r22, Y+2	; 0x02
    1db8:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_goToRowColumn>
	LCD_displayString(data);
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <LCD_goToRowColumn>:
void LCD_goToRowColumn(Uint8 row,Uint8 colum)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <LCD_goToRowColumn+0x6>
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <LCD_goToRowColumn+0x8>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	6b 83       	std	Y+3, r22	; 0x03
		Uint8 address=0;
    1de4:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	c1 f0       	breq	.+48     	; 0x1e2a <LCD_goToRowColumn+0x58>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_goToRowColumn+0x3c>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <LCD_goToRowColumn+0x52>
    1e0c:	19 c0       	rjmp	.+50     	; 0x1e40 <LCD_goToRowColumn+0x6e>
    1e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e10:	3d 81       	ldd	r19, Y+5	; 0x05
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	69 f0       	breq	.+26     	; 0x1e32 <LCD_goToRowColumn+0x60>
    1e18:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <LCD_goToRowColumn+0x68>
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <LCD_goToRowColumn+0x6e>
	{
		case 0 : address =colum;			break;
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	0b c0       	rjmp	.+22     	; 0x1e40 <LCD_goToRowColumn+0x6e>
		case 1 : address=colum+0X40;		break;
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	80 5c       	subi	r24, 0xC0	; 192
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <LCD_goToRowColumn+0x6e>
		case 2 : address=colum+0X10;		break;
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	80 5f       	subi	r24, 0xF0	; 240
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <LCD_goToRowColumn+0x6e>
		case 3 : address=colum+0X50;		break;
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	80 5b       	subi	r24, 0xB0	; 176
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(SET_CURSOR_LOCATION | address);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	80 68       	ori	r24, 0x80	; 128
    1e44:	0e 94 c9 07 	call	0xf92	; 0xf92 <LCD_sendCommand>

}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <LCD_intergerToString>:
void LCD_intergerToString(Uint16 data)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	a2 97       	sbiw	r28, 0x22	; 34
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	9a a3       	std	Y+34, r25	; 0x22
    1e6e:	89 a3       	std	Y+33, r24	; 0x21
	Uint16 buffer[16];
	itoa(data,buffer,10);
    1e70:	89 a1       	ldd	r24, Y+33	; 0x21
    1e72:	9a a1       	ldd	r25, Y+34	; 0x22
    1e74:	9e 01       	movw	r18, r28
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	b9 01       	movw	r22, r18
    1e7c:	4a e0       	ldi	r20, 0x0A	; 10
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	0e 94 b8 1c 	call	0x3970	; 0x3970 <itoa>
	LCD_displayString(buffer);
    1e84:	ce 01       	movw	r24, r28
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    1e8c:	a2 96       	adiw	r28, 0x22	; 34
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <Timer0_SetCallBack>:
static volatile void (*g_callBackptr0)(void)=NULL;
static volatile void (*g_callBackptr1)(void)=NULL;
static volatile void (*g_callBackptr2)(void)=NULL;

void Timer0_SetCallBack(void(*a_ptr)(void))
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <Timer0_SetCallBack+0x6>
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr0 =a_ptr;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	90 93 4d 01 	sts	0x014D, r25
    1eb4:	80 93 4c 01 	sts	0x014C, r24
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <Timer1_SetCallBack>:
void Timer1_SetCallBack(void(*a_ptr)(void))
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <Timer1_SetCallBack+0x6>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr1 =a_ptr;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	90 93 4f 01 	sts	0x014F, r25
    1ed8:	80 93 4e 01 	sts	0x014E, r24
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <Timer2_SetCallBack>:
void Timer2_SetCallBack(void(*a_ptr)(void))
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <Timer2_SetCallBack+0x6>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackptr2 =a_ptr;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	90 93 51 01 	sts	0x0151, r25
    1efc:	80 93 50 01 	sts	0x0150, r24
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <__vector_9>:
/*Timer 0 interrupt service routine , overflow mode */
ISR(TIMER0_OVF_vect)
{
    1f0a:	1f 92       	push	r1
    1f0c:	0f 92       	push	r0
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	0f 92       	push	r0
    1f12:	11 24       	eor	r1, r1
    1f14:	2f 93       	push	r18
    1f16:	3f 93       	push	r19
    1f18:	4f 93       	push	r20
    1f1a:	5f 93       	push	r21
    1f1c:	6f 93       	push	r22
    1f1e:	7f 93       	push	r23
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	af 93       	push	r26
    1f26:	bf 93       	push	r27
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr0 != NULL)
    1f34:	80 91 4c 01 	lds	r24, 0x014C
    1f38:	90 91 4d 01 	lds	r25, 0x014D
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	29 f0       	breq	.+10     	; 0x1f4a <__vector_9+0x40>
	{
		(*g_callBackptr0)();
    1f40:	e0 91 4c 01 	lds	r30, 0x014C
    1f44:	f0 91 4d 01 	lds	r31, 0x014D
    1f48:	09 95       	icall
	}
}
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	ff 91       	pop	r31
    1f50:	ef 91       	pop	r30
    1f52:	bf 91       	pop	r27
    1f54:	af 91       	pop	r26
    1f56:	9f 91       	pop	r25
    1f58:	8f 91       	pop	r24
    1f5a:	7f 91       	pop	r23
    1f5c:	6f 91       	pop	r22
    1f5e:	5f 91       	pop	r21
    1f60:	4f 91       	pop	r20
    1f62:	3f 91       	pop	r19
    1f64:	2f 91       	pop	r18
    1f66:	0f 90       	pop	r0
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	0f 90       	pop	r0
    1f6c:	1f 90       	pop	r1
    1f6e:	18 95       	reti

00001f70 <__vector_19>:
/*Timer 0 interrupt service routine , compare  mode */
ISR(TIMER0_COMP_vect)
{
    1f70:	1f 92       	push	r1
    1f72:	0f 92       	push	r0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	0f 92       	push	r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr0 != NULL)
    1f9a:	80 91 4c 01 	lds	r24, 0x014C
    1f9e:	90 91 4d 01 	lds	r25, 0x014D
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	29 f0       	breq	.+10     	; 0x1fb0 <__vector_19+0x40>
	{
		(*g_callBackptr0)();
    1fa6:	e0 91 4c 01 	lds	r30, 0x014C
    1faa:	f0 91 4d 01 	lds	r31, 0x014D
    1fae:	09 95       	icall
	}
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	ff 91       	pop	r31
    1fb6:	ef 91       	pop	r30
    1fb8:	bf 91       	pop	r27
    1fba:	af 91       	pop	r26
    1fbc:	9f 91       	pop	r25
    1fbe:	8f 91       	pop	r24
    1fc0:	7f 91       	pop	r23
    1fc2:	6f 91       	pop	r22
    1fc4:	5f 91       	pop	r21
    1fc6:	4f 91       	pop	r20
    1fc8:	3f 91       	pop	r19
    1fca:	2f 91       	pop	r18
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_8>:
/*Timer 1 interrupt service routine , overflow mode */
ISR(TIMER1_OVF_vect)
{
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	2f 93       	push	r18
    1fe2:	3f 93       	push	r19
    1fe4:	4f 93       	push	r20
    1fe6:	5f 93       	push	r21
    1fe8:	6f 93       	push	r22
    1fea:	7f 93       	push	r23
    1fec:	8f 93       	push	r24
    1fee:	9f 93       	push	r25
    1ff0:	af 93       	push	r26
    1ff2:	bf 93       	push	r27
    1ff4:	ef 93       	push	r30
    1ff6:	ff 93       	push	r31
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr1 != NULL)
    2000:	80 91 4e 01 	lds	r24, 0x014E
    2004:	90 91 4f 01 	lds	r25, 0x014F
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <__vector_8+0x40>
	{
		(*g_callBackptr1)();
    200c:	e0 91 4e 01 	lds	r30, 0x014E
    2010:	f0 91 4f 01 	lds	r31, 0x014F
    2014:	09 95       	icall
	}
}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <__vector_7>:
/*Timer 1 interrupt service routine , compare mode */
ISR(TIMER1_COMPB_vect)
{
    203c:	1f 92       	push	r1
    203e:	0f 92       	push	r0
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	0f 92       	push	r0
    2044:	11 24       	eor	r1, r1
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr1 != NULL)
    2066:	80 91 4e 01 	lds	r24, 0x014E
    206a:	90 91 4f 01 	lds	r25, 0x014F
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	29 f0       	breq	.+10     	; 0x207c <__vector_7+0x40>
	{
		(*g_callBackptr1)();
    2072:	e0 91 4e 01 	lds	r30, 0x014E
    2076:	f0 91 4f 01 	lds	r31, 0x014F
    207a:	09 95       	icall
	}
}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	ff 91       	pop	r31
    2082:	ef 91       	pop	r30
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	7f 91       	pop	r23
    208e:	6f 91       	pop	r22
    2090:	5f 91       	pop	r21
    2092:	4f 91       	pop	r20
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <__vector_4>:
/*Timer 2 interrupt service routine , overflow mode */
ISR(TIMER2_OVF_vect)
{
    20a2:	1f 92       	push	r1
    20a4:	0f 92       	push	r0
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	0f 92       	push	r0
    20aa:	11 24       	eor	r1, r1
    20ac:	2f 93       	push	r18
    20ae:	3f 93       	push	r19
    20b0:	4f 93       	push	r20
    20b2:	5f 93       	push	r21
    20b4:	6f 93       	push	r22
    20b6:	7f 93       	push	r23
    20b8:	8f 93       	push	r24
    20ba:	9f 93       	push	r25
    20bc:	af 93       	push	r26
    20be:	bf 93       	push	r27
    20c0:	ef 93       	push	r30
    20c2:	ff 93       	push	r31
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr2 != NULL)
    20cc:	80 91 50 01 	lds	r24, 0x0150
    20d0:	90 91 51 01 	lds	r25, 0x0151
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	29 f0       	breq	.+10     	; 0x20e2 <__vector_4+0x40>
	{
		(*g_callBackptr2)();
    20d8:	e0 91 50 01 	lds	r30, 0x0150
    20dc:	f0 91 51 01 	lds	r31, 0x0151
    20e0:	09 95       	icall
	}
}
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <__vector_3>:

/*Timer 2 interrupt service routine , compare mode */
ISR(TIMER2_COMP_vect)
{
    2108:	1f 92       	push	r1
    210a:	0f 92       	push	r0
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	0f 92       	push	r0
    2110:	11 24       	eor	r1, r1
    2112:	2f 93       	push	r18
    2114:	3f 93       	push	r19
    2116:	4f 93       	push	r20
    2118:	5f 93       	push	r21
    211a:	6f 93       	push	r22
    211c:	7f 93       	push	r23
    211e:	8f 93       	push	r24
    2120:	9f 93       	push	r25
    2122:	af 93       	push	r26
    2124:	bf 93       	push	r27
    2126:	ef 93       	push	r30
    2128:	ff 93       	push	r31
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackptr2 != NULL)
    2132:	80 91 50 01 	lds	r24, 0x0150
    2136:	90 91 51 01 	lds	r25, 0x0151
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	29 f0       	breq	.+10     	; 0x2148 <__vector_3+0x40>
	{
		(*g_callBackptr2)();
    213e:	e0 91 50 01 	lds	r30, 0x0150
    2142:	f0 91 51 01 	lds	r31, 0x0151
    2146:	09 95       	icall
	}
}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <Timer_Init>:


/***************************************function defination *************************************/

void Timer_Init(const TIMER_ConfigType* config_ptr)
{  
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	2a 97       	sbiw	r28, 0x0a	; 10
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
	
	switch (config_ptr->timerType)
    2186:	e9 81       	ldd	r30, Y+1	; 0x01
    2188:	fa 81       	ldd	r31, Y+2	; 0x02
    218a:	80 81       	ld	r24, Z
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	3a 87       	std	Y+10, r19	; 0x0a
    2192:	29 87       	std	Y+9, r18	; 0x09
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	91 05       	cpc	r25, r1
    219c:	09 f4       	brne	.+2      	; 0x21a0 <Timer_Init+0x32>
    219e:	52 c0       	rjmp	.+164    	; 0x2244 <Timer_Init+0xd6>
    21a0:	29 85       	ldd	r18, Y+9	; 0x09
    21a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    21a4:	22 30       	cpi	r18, 0x02	; 2
    21a6:	31 05       	cpc	r19, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <Timer_Init+0x3e>
    21aa:	9e c0       	rjmp	.+316    	; 0x22e8 <Timer_Init+0x17a>
    21ac:	89 85       	ldd	r24, Y+9	; 0x09
    21ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <Timer_Init+0x48>
    21b4:	df c0       	rjmp	.+446    	; 0x2374 <Timer_Init+0x206>
	{
		case TIMER0 : 
					SET_BIT(TCCR0,FOC0);
    21b6:	a3 e5       	ldi	r26, 0x53	; 83
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e3 e5       	ldi	r30, 0x53	; 83
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	80 68       	ori	r24, 0x80	; 128
    21c2:	8c 93       	st	X, r24
					TCCR0 |=config_ptr->prescalar;
    21c4:	a3 e5       	ldi	r26, 0x53	; 83
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e3 e5       	ldi	r30, 0x53	; 83
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	90 81       	ld	r25, Z
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	89 2b       	or	r24, r25
    21d6:	8c 93       	st	X, r24
					TCNT0 =config_ptr->Timer_InitValue;
    21d8:	a2 e5       	ldi	r26, 0x52	; 82
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	83 81       	ldd	r24, Z+3	; 0x03
    21e2:	94 81       	ldd	r25, Z+4	; 0x04
    21e4:	8c 93       	st	X, r24
					switch(config_ptr->mode)
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	81 81       	ldd	r24, Z+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	38 87       	std	Y+8, r19	; 0x08
    21f2:	2f 83       	std	Y+7, r18	; 0x07
    21f4:	8f 81       	ldd	r24, Y+7	; 0x07
    21f6:	98 85       	ldd	r25, Y+8	; 0x08
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	31 f0       	breq	.+12     	; 0x2208 <Timer_Init+0x9a>
    21fc:	2f 81       	ldd	r18, Y+7	; 0x07
    21fe:	38 85       	ldd	r19, Y+8	; 0x08
    2200:	21 30       	cpi	r18, 0x01	; 1
    2202:	31 05       	cpc	r19, r1
    2204:	49 f0       	breq	.+18     	; 0x2218 <Timer_Init+0xaa>
    2206:	b6 c0       	rjmp	.+364    	; 0x2374 <Timer_Init+0x206>
					{
						case OVERFLOW : 
										SET_BIT(TIMSK,TOIE0);
    2208:	a9 e5       	ldi	r26, 0x59	; 89
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e9 e5       	ldi	r30, 0x59	; 89
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	81 60       	ori	r24, 0x01	; 1
    2214:	8c 93       	st	X, r24
    2216:	ae c0       	rjmp	.+348    	; 0x2374 <Timer_Init+0x206>
										break;
						case COMPARE  : SET_BIT(TIMSK,OCIE0);
    2218:	a9 e5       	ldi	r26, 0x59	; 89
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e9 e5       	ldi	r30, 0x59	; 89
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	82 60       	ori	r24, 0x02	; 2
    2224:	8c 93       	st	X, r24
										OCR0=config_ptr->Timer_ComValue;
    2226:	ac e5       	ldi	r26, 0x5C	; 92
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	85 81       	ldd	r24, Z+5	; 0x05
    2230:	96 81       	ldd	r25, Z+6	; 0x06
    2232:	8c 93       	st	X, r24
										SET_BIT(TCCR0,WGM01);
    2234:	a3 e5       	ldi	r26, 0x53	; 83
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e3 e5       	ldi	r30, 0x53	; 83
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	88 60       	ori	r24, 0x08	; 8
    2240:	8c 93       	st	X, r24
    2242:	98 c0       	rjmp	.+304    	; 0x2374 <Timer_Init+0x206>
									    break;
					}
					break;
		case TIMER1 :
					SET_BIT(TCCR1A,FOC1A);
    2244:	af e4       	ldi	r26, 0x4F	; 79
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ef e4       	ldi	r30, 0x4F	; 79
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	88 60       	ori	r24, 0x08	; 8
    2250:	8c 93       	st	X, r24
					SET_BIT(TCCR1A,FOC1B);
    2252:	af e4       	ldi	r26, 0x4F	; 79
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	ef e4       	ldi	r30, 0x4F	; 79
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	84 60       	ori	r24, 0x04	; 4
    225e:	8c 93       	st	X, r24
					TCCR1B |=config_ptr->prescalar;
    2260:	ae e4       	ldi	r26, 0x4E	; 78
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	ee e4       	ldi	r30, 0x4E	; 78
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	90 81       	ld	r25, Z
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	89 2b       	or	r24, r25
    2272:	8c 93       	st	X, r24
					TCNT1 =config_ptr->Timer_InitValue;
    2274:	ac e4       	ldi	r26, 0x4C	; 76
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	83 81       	ldd	r24, Z+3	; 0x03
    227e:	94 81       	ldd	r25, Z+4	; 0x04
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	9c 93       	st	X, r25
    2284:	8e 93       	st	-X, r24
					switch(config_ptr->mode)
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	81 81       	ldd	r24, Z+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	3e 83       	std	Y+6, r19	; 0x06
    2292:	2d 83       	std	Y+5, r18	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	31 f0       	breq	.+12     	; 0x22a8 <Timer_Init+0x13a>
    229c:	2d 81       	ldd	r18, Y+5	; 0x05
    229e:	3e 81       	ldd	r19, Y+6	; 0x06
    22a0:	21 30       	cpi	r18, 0x01	; 1
    22a2:	31 05       	cpc	r19, r1
    22a4:	49 f0       	breq	.+18     	; 0x22b8 <Timer_Init+0x14a>
    22a6:	66 c0       	rjmp	.+204    	; 0x2374 <Timer_Init+0x206>
					{
						case OVERFLOW :
										SET_BIT(TIMSK,TOIE1);
    22a8:	a9 e5       	ldi	r26, 0x59	; 89
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e9 e5       	ldi	r30, 0x59	; 89
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	84 60       	ori	r24, 0x04	; 4
    22b4:	8c 93       	st	X, r24
    22b6:	5e c0       	rjmp	.+188    	; 0x2374 <Timer_Init+0x206>
										break;
						case COMPARE  : 
										SET_BIT(TIMSK,OCIE1B);
    22b8:	a9 e5       	ldi	r26, 0x59	; 89
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e9 e5       	ldi	r30, 0x59	; 89
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	88 60       	ori	r24, 0x08	; 8
    22c4:	8c 93       	st	X, r24
										OCR1B=config_ptr->Timer_ComValue;
    22c6:	a8 e4       	ldi	r26, 0x48	; 72
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	85 81       	ldd	r24, Z+5	; 0x05
    22d0:	96 81       	ldd	r25, Z+6	; 0x06
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	9c 93       	st	X, r25
    22d6:	8e 93       	st	-X, r24
										SET_BIT(TCCR0,WGM12);
    22d8:	a3 e5       	ldi	r26, 0x53	; 83
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e3 e5       	ldi	r30, 0x53	; 83
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	88 60       	ori	r24, 0x08	; 8
    22e4:	8c 93       	st	X, r24
    22e6:	46 c0       	rjmp	.+140    	; 0x2374 <Timer_Init+0x206>
										break;
					}
					break;
		case TIMER2 :
					SET_BIT(TCCR2,FOC2);
    22e8:	a5 e4       	ldi	r26, 0x45	; 69
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e5 e4       	ldi	r30, 0x45	; 69
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	80 68       	ori	r24, 0x80	; 128
    22f4:	8c 93       	st	X, r24
					TCCR2 |=config_ptr->prescalar;
    22f6:	a5 e4       	ldi	r26, 0x45	; 69
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e5 e4       	ldi	r30, 0x45	; 69
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	90 81       	ld	r25, Z
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	89 2b       	or	r24, r25
    2308:	8c 93       	st	X, r24
					TCNT2 =config_ptr->Timer_InitValue;
    230a:	a4 e4       	ldi	r26, 0x44	; 68
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e9 81       	ldd	r30, Y+1	; 0x01
    2310:	fa 81       	ldd	r31, Y+2	; 0x02
    2312:	83 81       	ldd	r24, Z+3	; 0x03
    2314:	94 81       	ldd	r25, Z+4	; 0x04
    2316:	8c 93       	st	X, r24
					switch(config_ptr->mode)
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	81 81       	ldd	r24, Z+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	3c 83       	std	Y+4, r19	; 0x04
    2324:	2b 83       	std	Y+3, r18	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	31 f0       	breq	.+12     	; 0x233a <Timer_Init+0x1cc>
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	21 30       	cpi	r18, 0x01	; 1
    2334:	31 05       	cpc	r19, r1
    2336:	49 f0       	breq	.+18     	; 0x234a <Timer_Init+0x1dc>
    2338:	1d c0       	rjmp	.+58     	; 0x2374 <Timer_Init+0x206>
					{
						case OVERFLOW :
										SET_BIT(TIMSK,TOIE2);
    233a:	a9 e5       	ldi	r26, 0x59	; 89
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e9 e5       	ldi	r30, 0x59	; 89
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	80 64       	ori	r24, 0x40	; 64
    2346:	8c 93       	st	X, r24
    2348:	15 c0       	rjmp	.+42     	; 0x2374 <Timer_Init+0x206>
										break;
						case COMPARE  : 
										SET_BIT(TIMSK,OCIE2);
    234a:	a9 e5       	ldi	r26, 0x59	; 89
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e9 e5       	ldi	r30, 0x59	; 89
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	8c 93       	st	X, r24
										OCR2=config_ptr->Timer_ComValue;
    2358:	a3 e4       	ldi	r26, 0x43	; 67
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	85 81       	ldd	r24, Z+5	; 0x05
    2362:	96 81       	ldd	r25, Z+6	; 0x06
    2364:	8c 93       	st	X, r24
										SET_BIT(TCCR2,WGM21);
    2366:	a5 e4       	ldi	r26, 0x45	; 69
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e5 e4       	ldi	r30, 0x45	; 69
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	88 60       	ori	r24, 0x08	; 8
    2372:	8c 93       	st	X, r24
										break;
					}
					break;
	}
    2374:	2a 96       	adiw	r28, 0x0a	; 10
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <UART_init>:
#include "UART.h"

#define BAUD_PRESCALE (((F_CPU / (UART_BAUDRATE * 8UL))) - 1)

void UART_init(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	SET_BIT(DDRD,0);
    238e:	a1 e3       	ldi	r26, 0x31	; 49
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e1 e3       	ldi	r30, 0x31	; 49
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,0);
    239c:	a1 e3       	ldi	r26, 0x31	; 49
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e1 e3       	ldi	r30, 0x31	; 49
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8e 7f       	andi	r24, 0xFE	; 254
    23a8:	8c 93       	st	X, r24
	UCSRA = (1<<U2X);
    23aa:	eb e2       	ldi	r30, 0x2B	; 43
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	82 e0       	ldi	r24, 0x02	; 2
    23b0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23b2:	ea e2       	ldi	r30, 0x2A	; 42
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	88 e1       	ldi	r24, 0x18	; 24
    23b8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    23ba:	e0 e4       	ldi	r30, 0x40	; 64
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	86 e8       	ldi	r24, 0x86	; 134
    23c0:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    23c2:	e0 e4       	ldi	r30, 0x40	; 64
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    23c8:	e9 e2       	ldi	r30, 0x29	; 41
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	87 e6       	ldi	r24, 0x67	; 103
    23ce:	80 83       	st	Z, r24
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <UART_sendByte>:
void UART_sendByte(const Uint8 data)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23e2:	eb e2       	ldi	r30, 0x2B	; 43
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	80 72       	andi	r24, 0x20	; 32
    23ee:	90 70       	andi	r25, 0x00	; 0
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	b9 f3       	breq	.-18     	; 0x23e2 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    23f4:	ec e2       	ldi	r30, 0x2C	; 44
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <UART_recieveByte>:
Uint8 UART_recieveByte()
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    240c:	eb e2       	ldi	r30, 0x2B	; 43
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	88 23       	and	r24, r24
    2414:	dc f7       	brge	.-10     	; 0x240c <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2416:	ec e2       	ldi	r30, 0x2C	; 44
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
}
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <UART_sendString>:
void UART_sendString(const Uint8* data)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <UART_sendString+0x6>
    2428:	0f 92       	push	r0
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9b 83       	std	Y+3, r25	; 0x03
    2430:	8a 83       	std	Y+2, r24	; 0x02
		Uint8 i = 0;
    2432:	19 82       	std	Y+1, r1	; 0x01
    2434:	0e c0       	rjmp	.+28     	; 0x2452 <UART_sendString+0x30>
		while(data[i] != '\0')
		{
			UART_sendByte(data[i]);
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	9b 81       	ldd	r25, Y+3	; 0x03
    2440:	fc 01       	movw	r30, r24
    2442:	e2 0f       	add	r30, r18
    2444:	f3 1f       	adc	r31, r19
    2446:	80 81       	ld	r24, Z
    2448:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_sendByte>
			i++;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	89 83       	std	Y+1, r24	; 0x01
    return UDR;		
}
void UART_sendString(const Uint8* data)
{
		Uint8 i = 0;
		while(data[i] != '\0')
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	fc 01       	movw	r30, r24
    245e:	e2 0f       	add	r30, r18
    2460:	f3 1f       	adc	r31, r19
    2462:	80 81       	ld	r24, Z
    2464:	88 23       	and	r24, r24
    2466:	39 f7       	brne	.-50     	; 0x2436 <UART_sendString+0x14>
		{
			UART_sendByte(data[i]);
			i++;
		}

}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <UART_recieveString>:
void UART_recieveString(Uint8* data)
{
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <UART_recieveString+0xa>
    247e:	0f 92       	push	r0
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	9b 83       	std	Y+3, r25	; 0x03
    2486:	8a 83       	std	Y+2, r24	; 0x02
	Uint8 i = 0;
    2488:	19 82       	std	Y+1, r1	; 0x01
	data[i] = UART_recieveByte();
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	8c 01       	movw	r16, r24
    2496:	02 0f       	add	r16, r18
    2498:	13 1f       	adc	r17, r19
    249a:	0e 94 02 12 	call	0x2404	; 0x2404 <UART_recieveByte>
    249e:	f8 01       	movw	r30, r16
    24a0:	80 83       	st	Z, r24
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <UART_recieveString+0x4e>
	while(data[i] != '#')
	{
		i++;
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	89 83       	std	Y+1, r24	; 0x01
		data[i] = UART_recieveByte();
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	9b 81       	ldd	r25, Y+3	; 0x03
    24b4:	8c 01       	movw	r16, r24
    24b6:	02 0f       	add	r16, r18
    24b8:	13 1f       	adc	r17, r19
    24ba:	0e 94 02 12 	call	0x2404	; 0x2404 <UART_recieveByte>
    24be:	f8 01       	movw	r30, r16
    24c0:	80 83       	st	Z, r24
}
void UART_recieveString(Uint8* data)
{
	Uint8 i = 0;
	data[i] = UART_recieveByte();
	while(data[i] != '#')
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	fc 01       	movw	r30, r24
    24ce:	e2 0f       	add	r30, r18
    24d0:	f3 1f       	adc	r31, r19
    24d2:	80 81       	ld	r24, Z
    24d4:	83 32       	cpi	r24, 0x23	; 35
    24d6:	31 f7       	brne	.-52     	; 0x24a4 <UART_recieveString+0x30>
	{
		i++;
		data[i] = UART_recieveByte();
	}
	data[i] = '\0';
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	fc 01       	movw	r30, r24
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	10 82       	st	Z, r1
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <keypad_getPressedKey>:
static Uint8 keypad_3x4_adjustKeyNumber(Uint8 number);
#elif N_col==4
static Uint8 keypad_4x4_adjustKeyNumber(Uint8 number);
#endif
Uint8 keypad_getPressedKey(void)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <keypad_getPressedKey+0x6>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	Uint8 row =0;
    2504:	1a 82       	std	Y+2, r1	; 0x02
	Uint8 col=0;
    2506:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<N_col;col++)
    2508:	19 82       	std	Y+1, r1	; 0x01
    250a:	4d c0       	rjmp	.+154    	; 0x25a6 <keypad_getPressedKey+0xac>
		{
			KEYPAD_PORT_DIR =0b00010000<<col;
    250c:	ea e3       	ldi	r30, 0x3A	; 58
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	80 e1       	ldi	r24, 0x10	; 16
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <keypad_getPressedKey+0x26>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	2a 95       	dec	r18
    2522:	e2 f7       	brpl	.-8      	; 0x251c <keypad_getPressedKey+0x22>
    2524:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	80 e1       	ldi	r24, 0x10	; 16
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 2e       	mov	r0, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <keypad_getPressedKey+0x42>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	0a 94       	dec	r0
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <keypad_getPressedKey+0x3e>
    2540:	80 95       	com	r24
    2542:	80 83       	st	Z, r24
			for (row=0;row<N_row;row++)
    2544:	1a 82       	std	Y+2, r1	; 0x02
    2546:	29 c0       	rjmp	.+82     	; 0x259a <keypad_getPressedKey+0xa0>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    2548:	e9 e3       	ldi	r30, 0x39	; 57
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a9 01       	movw	r20, r18
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <keypad_getPressedKey+0x66>
    255c:	55 95       	asr	r21
    255e:	47 95       	ror	r20
    2560:	8a 95       	dec	r24
    2562:	e2 f7       	brpl	.-8      	; 0x255c <keypad_getPressedKey+0x62>
    2564:	ca 01       	movw	r24, r20
    2566:	81 70       	andi	r24, 0x01	; 1
    2568:	90 70       	andi	r25, 0x00	; 0
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	99 f4       	brne	.+38     	; 0x2594 <keypad_getPressedKey+0x9a>
				{
					#if N_col==3
					return keypad_3x4_adjustKeyNumber((row*N_col)+col+1);
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	c9 01       	movw	r24, r18
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	98 2f       	mov	r25, r24
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	89 0f       	add	r24, r25
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <keypad_3x4_adjustKeyNumber>
				}
			}
		}
		
	}
}
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret
	{
		for(col=0;col<N_col;col++)
		{
			KEYPAD_PORT_DIR =0b00010000<<col;
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for (row=0;row<N_row;row++)
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	8a 83       	std	Y+2, r24	; 0x02
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	a0 f2       	brcs	.-88     	; 0x2548 <keypad_getPressedKey+0x4e>
{
	Uint8 row =0;
	Uint8 col=0;
	while(1)
	{
		for(col=0;col<N_col;col++)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	83 30       	cpi	r24, 0x03	; 3
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <keypad_getPressedKey+0xb4>
    25ac:	af cf       	rjmp	.-162    	; 0x250c <keypad_getPressedKey+0x12>
    25ae:	ac cf       	rjmp	.-168    	; 0x2508 <keypad_getPressedKey+0xe>

000025b0 <keypad_3x4_adjustKeyNumber>:
		
	}
}
#if N_col==3
static Uint8 keypad_3x4_adjustKeyNumber(Uint8 number)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <keypad_3x4_adjustKeyNumber+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <keypad_3x4_adjustKeyNumber+0x8>
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	89 83       	std	Y+1, r24	; 0x01
	switch(number)
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3c 83       	std	Y+4, r19	; 0x04
    25c6:	2b 83       	std	Y+3, r18	; 0x03
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	8a 30       	cpi	r24, 0x0A	; 10
    25ce:	91 05       	cpc	r25, r1
    25d0:	81 f0       	breq	.+32     	; 0x25f2 <keypad_3x4_adjustKeyNumber+0x42>
    25d2:	2b 81       	ldd	r18, Y+3	; 0x03
    25d4:	3c 81       	ldd	r19, Y+4	; 0x04
    25d6:	2a 30       	cpi	r18, 0x0A	; 10
    25d8:	31 05       	cpc	r19, r1
    25da:	9c f0       	brlt	.+38     	; 0x2602 <keypad_3x4_adjustKeyNumber+0x52>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	8b 30       	cpi	r24, 0x0B	; 11
    25e2:	91 05       	cpc	r25, r1
    25e4:	49 f0       	breq	.+18     	; 0x25f8 <keypad_3x4_adjustKeyNumber+0x48>
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ea:	2c 30       	cpi	r18, 0x0C	; 12
    25ec:	31 05       	cpc	r19, r1
    25ee:	31 f0       	breq	.+12     	; 0x25fc <keypad_3x4_adjustKeyNumber+0x4c>
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <keypad_3x4_adjustKeyNumber+0x52>
	{
				case 10: return '*'; // ASCII Code of *
    25f2:	3a e2       	ldi	r19, 0x2A	; 42
    25f4:	3a 83       	std	Y+2, r19	; 0x02
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <keypad_3x4_adjustKeyNumber+0x56>
				break;
				case 11: return 0;
    25f8:	1a 82       	std	Y+2, r1	; 0x02
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <keypad_3x4_adjustKeyNumber+0x56>
				break;
				case 12: return '#'; // ASCII Code of #
    25fc:	83 e2       	ldi	r24, 0x23	; 35
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <keypad_3x4_adjustKeyNumber+0x56>
				break;
				default: return number;
    2602:	99 81       	ldd	r25, Y+1	; 0x01
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <main>:
bool check(Uint8 *P,Uint8*PT);   /*compare between g_password && g_passwordTest */
bool test();                     /*ask user to set new password*/
void enterPassword(void);        /*function to ask user to enter the correct password*/

int main(void)
{
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	c1 58       	subi	r28, 0x81	; 129
    2624:	d0 40       	sbci	r29, 0x00	; 0
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    
	 char mode;
	 /*initialize the LCD configuration */
     LCD_init();
    2630:	0e 94 a9 07 	call	0xf52	; 0xf52 <LCD_init>
	 /*initialize the UART configuration */
	 UART_init();
    2634:	0e 94 c3 11 	call	0x2386	; 0x2386 <UART_init>
	
	 /*
	  * test function read the new password and check the password number  
	  */
       while(!test());
    2638:	0e 94 ae 1a 	call	0x355c	; 0x355c <test>
    263c:	88 23       	and	r24, r24
    263e:	e1 f3       	breq	.-8      	; 0x2638 <main+0x22>
	 /*
	  * send the new password to the control MCU to save it in EEPROM  after test correct password
	  */
	   UART_sendByte(setNewPassword);/*send set new password command to control MCU*/
    2640:	80 e4       	ldi	r24, 0x40	; 64
    2642:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_sendByte>
	   UART_sendString(g_password);  /*send the password to control MCU*/
    2646:	82 e4       	ldi	r24, 0x42	; 66
    2648:	91 e0       	ldi	r25, 0x01	; 1
    264a:	0e 94 11 12 	call	0x2422	; 0x2422 <UART_sendString>
	  

     while(1)   
     {
		     
			 LCD_clear();
    264e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
			  /*
			   * options : '*' to open the door
	           *           '#' to change password 
	           */
			 LCD_displayString("* : open door");
    2652:	80 e6       	ldi	r24, 0x60	; 96
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
			 LCD_displayStringRowColumn (1,0,"# : change password");
    265a:	2e e6       	ldi	r18, 0x6E	; 110
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	a9 01       	movw	r20, r18
    2664:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
			 while(!keypad_getPressedKey());
    2668:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    266c:	88 23       	and	r24, r24
    266e:	e1 f3       	breq	.-8      	; 0x2668 <main+0x52>
			 mode = keypad_getPressedKey();/*take option change password or open door*/
    2670:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    2674:	fe 01       	movw	r30, r28
    2676:	e1 58       	subi	r30, 0x81	; 129
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 83       	st	Z, r24
			  LCD_clear();
    267c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
			  LCD_displayString("input : ");
    2680:	82 e8       	ldi	r24, 0x82	; 130
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
			  LCD_displayChar(mode);
    2688:	fe 01       	movw	r30, r28
    268a:	e1 58       	subi	r30, 0x81	; 129
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_displayChar>
    2694:	fe 01       	movw	r30, r28
    2696:	e5 58       	subi	r30, 0x85	; 133
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	aa e7       	ldi	r26, 0x7A	; 122
    26a0:	b4 e4       	ldi	r27, 0x44	; 68
    26a2:	80 83       	st	Z, r24
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	a2 83       	std	Z+2, r26	; 0x02
    26a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26aa:	8e 01       	movw	r16, r28
    26ac:	09 58       	subi	r16, 0x89	; 137
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	fe 01       	movw	r30, r28
    26b2:	e5 58       	subi	r30, 0x85	; 133
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	60 81       	ld	r22, Z
    26b8:	71 81       	ldd	r23, Z+1	; 0x01
    26ba:	82 81       	ldd	r24, Z+2	; 0x02
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	f8 01       	movw	r30, r16
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d8:	fe 01       	movw	r30, r28
    26da:	e9 58       	subi	r30, 0x89	; 137
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	60 81       	ld	r22, Z
    26e0:	71 81       	ldd	r23, Z+1	; 0x01
    26e2:	82 81       	ldd	r24, Z+2	; 0x02
    26e4:	93 81       	ldd	r25, Z+3	; 0x03
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	44 f4       	brge	.+16     	; 0x2706 <main+0xf0>
		__ticks = 1;
    26f6:	fe 01       	movw	r30, r28
    26f8:	eb 58       	subi	r30, 0x8B	; 139
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	91 83       	std	Z+1, r25	; 0x01
    2702:	80 83       	st	Z, r24
    2704:	64 c0       	rjmp	.+200    	; 0x27ce <main+0x1b8>
	else if (__tmp > 65535)
    2706:	fe 01       	movw	r30, r28
    2708:	e9 58       	subi	r30, 0x89	; 137
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2720:	18 16       	cp	r1, r24
    2722:	0c f0       	brlt	.+2      	; 0x2726 <main+0x110>
    2724:	43 c0       	rjmp	.+134    	; 0x27ac <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	fe 01       	movw	r30, r28
    2728:	e5 58       	subi	r30, 0x85	; 133
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8e 01       	movw	r16, r28
    2746:	0b 58       	subi	r16, 0x8B	; 139
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	f8 01       	movw	r30, r16
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	80 83       	st	Z, r24
    275c:	1f c0       	rjmp	.+62     	; 0x279c <main+0x186>
    275e:	fe 01       	movw	r30, r28
    2760:	ed 58       	subi	r30, 0x8D	; 141
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	88 ec       	ldi	r24, 0xC8	; 200
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	fe 01       	movw	r30, r28
    276e:	ed 58       	subi	r30, 0x8D	; 141
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x160>
    277a:	fe 01       	movw	r30, r28
    277c:	ed 58       	subi	r30, 0x8D	; 141
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	de 01       	movw	r26, r28
    2786:	ab 58       	subi	r26, 0x8B	; 139
    2788:	bf 4f       	sbci	r27, 0xFF	; 255
    278a:	fe 01       	movw	r30, r28
    278c:	eb 58       	subi	r30, 0x8B	; 139
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	11 96       	adiw	r26, 0x01	; 1
    2798:	9c 93       	st	X, r25
    279a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	fe 01       	movw	r30, r28
    279e:	eb 58       	subi	r30, 0x8B	; 139
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	d1 f6       	brne	.-76     	; 0x275e <main+0x148>
    27aa:	27 c0       	rjmp	.+78     	; 0x27fa <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	8e 01       	movw	r16, r28
    27ae:	0b 58       	subi	r16, 0x8B	; 139
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	fe 01       	movw	r30, r28
    27b4:	e9 58       	subi	r30, 0x89	; 137
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	f8 01       	movw	r30, r16
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	de 01       	movw	r26, r28
    27d0:	af 58       	subi	r26, 0x8F	; 143
    27d2:	bf 4f       	sbci	r27, 0xFF	; 255
    27d4:	fe 01       	movw	r30, r28
    27d6:	eb 58       	subi	r30, 0x8B	; 139
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	8d 93       	st	X+, r24
    27e0:	9c 93       	st	X, r25
    27e2:	fe 01       	movw	r30, r28
    27e4:	ef 58       	subi	r30, 0x8F	; 143
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <main+0x1d6>
    27f0:	fe 01       	movw	r30, r28
    27f2:	ef 58       	subi	r30, 0x8F	; 143
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	80 83       	st	Z, r24
			  _delay_ms(1000);
			  LCD_clear();
    27fa:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
			  
			 switch (mode)
    27fe:	fe 01       	movw	r30, r28
    2800:	e1 58       	subi	r30, 0x81	; 129
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	c0 58       	subi	r28, 0x80	; 128
    280c:	df 4f       	sbci	r29, 0xFF	; 255
    280e:	39 83       	std	Y+1, r19	; 0x01
    2810:	28 83       	st	Y, r18
    2812:	c0 58       	subi	r28, 0x80	; 128
    2814:	d0 40       	sbci	r29, 0x00	; 0
    2816:	c0 58       	subi	r28, 0x80	; 128
    2818:	df 4f       	sbci	r29, 0xFF	; 255
    281a:	88 81       	ld	r24, Y
    281c:	99 81       	ldd	r25, Y+1	; 0x01
    281e:	c0 58       	subi	r28, 0x80	; 128
    2820:	d0 40       	sbci	r29, 0x00	; 0
    2822:	83 32       	cpi	r24, 0x23	; 35
    2824:	91 05       	cpc	r25, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <main+0x214>
    2828:	64 c3       	rjmp	.+1736   	; 0x2ef2 <main+0x8dc>
    282a:	c0 58       	subi	r28, 0x80	; 128
    282c:	df 4f       	sbci	r29, 0xFF	; 255
    282e:	e8 81       	ld	r30, Y
    2830:	f9 81       	ldd	r31, Y+1	; 0x01
    2832:	c0 58       	subi	r28, 0x80	; 128
    2834:	d0 40       	sbci	r29, 0x00	; 0
    2836:	ea 32       	cpi	r30, 0x2A	; 42
    2838:	f1 05       	cpc	r31, r1
    283a:	09 f0       	breq	.+2      	; 0x283e <main+0x228>
    283c:	08 cf       	rjmp	.-496    	; 0x264e <main+0x38>
			 {
				 case '*':
				         /*ask user the stored password*/
				         enterPassword();
    283e:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <enterPassword>
					     /*send check password and open the door command*/
				         UART_sendByte(checkAndOpenDoor);
    2842:	81 e2       	ldi	r24, 0x21	; 33
    2844:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_sendByte>
						 /*send check password to check */
				         UART_sendString(g_passwordTest);
    2848:	87 e4       	ldi	r24, 0x47	; 71
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	0e 94 11 12 	call	0x2422	; 0x2422 <UART_sendString>
						 /* receive command from control MCU
						  * options : correct password command if the password is correct
						  *           incorrect password command if the password is not correct and the trial is less than 3 trials
						  *           thief command if the incorrect trials is more than 3 trials 
						  */
				         g_uartRecieveCommand = UART_recieveByte();
    2850:	0e 94 02 12 	call	0x2404	; 0x2404 <UART_recieveByte>
    2854:	80 93 52 01 	sts	0x0152, r24
				         if (g_uartRecieveCommand == correctPassword)
    2858:	80 91 52 01 	lds	r24, 0x0152
    285c:	8b 32       	cpi	r24, 0x2B	; 43
    285e:	09 f0       	breq	.+2      	; 0x2862 <main+0x24c>
    2860:	2e c2       	rjmp	.+1116   	; 0x2cbe <main+0x6a8>
							  * 3 steps :
							            1- the door is unlocking for 5 sec duration
										2- the door is already open for 5 sec duration
										3- the door is locking for 5 sec duration
							  */
					         LCD_clear();
    2862:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("door is unlock !");
    2866:	8b e8       	ldi	r24, 0x8B	; 139
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    286e:	fe 01       	movw	r30, r28
    2870:	e3 59       	subi	r30, 0x93	; 147
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e4       	ldi	r25, 0x40	; 64
    2878:	ac e9       	ldi	r26, 0x9C	; 156
    287a:	b5 e4       	ldi	r27, 0x45	; 69
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2884:	8e 01       	movw	r16, r28
    2886:	07 59       	subi	r16, 0x97	; 151
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	fe 01       	movw	r30, r28
    288c:	e3 59       	subi	r30, 0x93	; 147
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	f8 01       	movw	r30, r16
    28aa:	80 83       	st	Z, r24
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	a2 83       	std	Z+2, r26	; 0x02
    28b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e7 59       	subi	r30, 0x97	; 151
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	44 f4       	brge	.+16     	; 0x28e0 <main+0x2ca>
		__ticks = 1;
    28d0:	fe 01       	movw	r30, r28
    28d2:	e9 59       	subi	r30, 0x99	; 153
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	64 c0       	rjmp	.+200    	; 0x29a8 <main+0x392>
	else if (__tmp > 65535)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e7 59       	subi	r30, 0x97	; 151
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	4f e7       	ldi	r20, 0x7F	; 127
    28f4:	57 e4       	ldi	r21, 0x47	; 71
    28f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28fa:	18 16       	cp	r1, r24
    28fc:	0c f0       	brlt	.+2      	; 0x2900 <main+0x2ea>
    28fe:	43 c0       	rjmp	.+134    	; 0x2986 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	fe 01       	movw	r30, r28
    2902:	e3 59       	subi	r30, 0x93	; 147
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8e 01       	movw	r16, r28
    2920:	09 59       	subi	r16, 0x99	; 153
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    2936:	1f c0       	rjmp	.+62     	; 0x2976 <main+0x360>
    2938:	fe 01       	movw	r30, r28
    293a:	eb 59       	subi	r30, 0x9B	; 155
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	88 ec       	ldi	r24, 0xC8	; 200
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	fe 01       	movw	r30, r28
    2948:	eb 59       	subi	r30, 0x9B	; 155
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <main+0x33a>
    2954:	fe 01       	movw	r30, r28
    2956:	eb 59       	subi	r30, 0x9B	; 155
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	de 01       	movw	r26, r28
    2960:	a9 59       	subi	r26, 0x99	; 153
    2962:	bf 4f       	sbci	r27, 0xFF	; 255
    2964:	fe 01       	movw	r30, r28
    2966:	e9 59       	subi	r30, 0x99	; 153
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	11 96       	adiw	r26, 0x01	; 1
    2972:	9c 93       	st	X, r25
    2974:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	fe 01       	movw	r30, r28
    2978:	e9 59       	subi	r30, 0x99	; 153
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	d1 f6       	brne	.-76     	; 0x2938 <main+0x322>
    2984:	27 c0       	rjmp	.+78     	; 0x29d4 <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	8e 01       	movw	r16, r28
    2988:	09 59       	subi	r16, 0x99	; 153
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	fe 01       	movw	r30, r28
    298e:	e7 59       	subi	r30, 0x97	; 151
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	f8 01       	movw	r30, r16
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
    29a8:	de 01       	movw	r26, r28
    29aa:	ad 59       	subi	r26, 0x9D	; 157
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	e9 59       	subi	r30, 0x99	; 153
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	8d 93       	st	X+, r24
    29ba:	9c 93       	st	X, r25
    29bc:	fe 01       	movw	r30, r28
    29be:	ed 59       	subi	r30, 0x9D	; 157
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <main+0x3b0>
    29ca:	fe 01       	movw	r30, r28
    29cc:	ed 59       	subi	r30, 0x9D	; 157
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
							 _delay_ms(5000);
							 LCD_clear();
    29d4:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("door is open !");
    29d8:	8c e9       	ldi	r24, 0x9C	; 156
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e1 5a       	subi	r30, 0xA1	; 161
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e4       	ldi	r25, 0x40	; 64
    29ea:	ac e9       	ldi	r26, 0x9C	; 156
    29ec:	b5 e4       	ldi	r27, 0x45	; 69
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	8e 01       	movw	r16, r28
    29f8:	05 5a       	subi	r16, 0xA5	; 165
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	fe 01       	movw	r30, r28
    29fe:	e1 5a       	subi	r30, 0xA1	; 161
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a ef       	ldi	r20, 0xFA	; 250
    2a10:	54 e4       	ldi	r21, 0x44	; 68
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	80 83       	st	Z, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a24:	fe 01       	movw	r30, r28
    2a26:	e5 5a       	subi	r30, 0xA5	; 165
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	44 f4       	brge	.+16     	; 0x2a52 <main+0x43c>
		__ticks = 1;
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 5a       	subi	r30, 0xA7	; 167
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	80 83       	st	Z, r24
    2a50:	64 c0       	rjmp	.+200    	; 0x2b1a <main+0x504>
	else if (__tmp > 65535)
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 5a       	subi	r30, 0xA5	; 165
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	0c f0       	brlt	.+2      	; 0x2a72 <main+0x45c>
    2a70:	43 c0       	rjmp	.+134    	; 0x2af8 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	fe 01       	movw	r30, r28
    2a74:	e1 5a       	subi	r30, 0xA1	; 161
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	82 81       	ldd	r24, Z+2	; 0x02
    2a7e:	93 81       	ldd	r25, Z+3	; 0x03
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8e 01       	movw	r16, r28
    2a92:	07 5a       	subi	r16, 0xA7	; 167
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	1f c0       	rjmp	.+62     	; 0x2ae8 <main+0x4d2>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5a       	subi	r30, 0xA9	; 169
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e9 5a       	subi	r30, 0xA9	; 169
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <main+0x4ac>
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e9 5a       	subi	r30, 0xA9	; 169
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad0:	de 01       	movw	r26, r28
    2ad2:	a7 5a       	subi	r26, 0xA7	; 167
    2ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 5a       	subi	r30, 0xA7	; 167
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 81       	ld	r24, Z
    2ade:	91 81       	ldd	r25, Z+1	; 0x01
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	9c 93       	st	X, r25
    2ae6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e7 5a       	subi	r30, 0xA7	; 167
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	d1 f6       	brne	.-76     	; 0x2aaa <main+0x494>
    2af6:	27 c0       	rjmp	.+78     	; 0x2b46 <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	8e 01       	movw	r16, r28
    2afa:	07 5a       	subi	r16, 0xA7	; 167
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	e5 5a       	subi	r30, 0xA5	; 165
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	de 01       	movw	r26, r28
    2b1c:	ab 5a       	subi	r26, 0xAB	; 171
    2b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b20:	fe 01       	movw	r30, r28
    2b22:	e7 5a       	subi	r30, 0xA7	; 167
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	8d 93       	st	X+, r24
    2b2c:	9c 93       	st	X, r25
    2b2e:	fe 01       	movw	r30, r28
    2b30:	eb 5a       	subi	r30, 0xAB	; 171
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <main+0x522>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	eb 5a       	subi	r30, 0xAB	; 171
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
							 _delay_ms(5000);
							 LCD_clear();
    2b46:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("door is lock !");
    2b4a:	8b ea       	ldi	r24, 0xAB	; 171
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 5a       	subi	r30, 0xAF	; 175
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e4       	ldi	r25, 0x40	; 64
    2b5c:	ac e9       	ldi	r26, 0x9C	; 156
    2b5e:	b5 e4       	ldi	r27, 0x45	; 69
    2b60:	80 83       	st	Z, r24
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	a2 83       	std	Z+2, r26	; 0x02
    2b66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	8e 01       	movw	r16, r28
    2b6a:	03 5b       	subi	r16, 0xB3	; 179
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 5a       	subi	r30, 0xAF	; 175
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	4a ef       	ldi	r20, 0xFA	; 250
    2b82:	54 e4       	ldi	r21, 0x44	; 68
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	80 83       	st	Z, r24
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	a2 83       	std	Z+2, r26	; 0x02
    2b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b96:	fe 01       	movw	r30, r28
    2b98:	e3 5b       	subi	r30, 0xB3	; 179
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e8       	ldi	r20, 0x80	; 128
    2baa:	5f e3       	ldi	r21, 0x3F	; 63
    2bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	44 f4       	brge	.+16     	; 0x2bc4 <main+0x5ae>
		__ticks = 1;
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e5 5b       	subi	r30, 0xB5	; 181
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	64 c0       	rjmp	.+200    	; 0x2c8c <main+0x676>
	else if (__tmp > 65535)
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e3 5b       	subi	r30, 0xB3	; 179
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	60 81       	ld	r22, Z
    2bcc:	71 81       	ldd	r23, Z+1	; 0x01
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	0c f0       	brlt	.+2      	; 0x2be4 <main+0x5ce>
    2be2:	43 c0       	rjmp	.+134    	; 0x2c6a <main+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	fe 01       	movw	r30, r28
    2be6:	ef 5a       	subi	r30, 0xAF	; 175
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8e 01       	movw	r16, r28
    2c04:	05 5b       	subi	r16, 0xB5	; 181
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	f8 01       	movw	r30, r16
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
    2c1a:	1f c0       	rjmp	.+62     	; 0x2c5a <main+0x644>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e7 5b       	subi	r30, 0xB7	; 183
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	88 ec       	ldi	r24, 0xC8	; 200
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	80 83       	st	Z, r24
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e7 5b       	subi	r30, 0xB7	; 183
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <main+0x61e>
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e7 5b       	subi	r30, 0xB7	; 183
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	de 01       	movw	r26, r28
    2c44:	a5 5b       	subi	r26, 0xB5	; 181
    2c46:	bf 4f       	sbci	r27, 0xFF	; 255
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e5 5b       	subi	r30, 0xB5	; 181
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	91 81       	ldd	r25, Z+1	; 0x01
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	11 96       	adiw	r26, 0x01	; 1
    2c56:	9c 93       	st	X, r25
    2c58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e5 5b       	subi	r30, 0xB5	; 181
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	91 81       	ldd	r25, Z+1	; 0x01
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	d1 f6       	brne	.-76     	; 0x2c1c <main+0x606>
    2c68:	27 c0       	rjmp	.+78     	; 0x2cb8 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6a:	8e 01       	movw	r16, r28
    2c6c:	05 5b       	subi	r16, 0xB5	; 181
    2c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c70:	fe 01       	movw	r30, r28
    2c72:	e3 5b       	subi	r30, 0xB3	; 179
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	f8 01       	movw	r30, r16
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	de 01       	movw	r26, r28
    2c8e:	a9 5b       	subi	r26, 0xB9	; 185
    2c90:	bf 4f       	sbci	r27, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	e5 5b       	subi	r30, 0xB5	; 181
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	8d 93       	st	X+, r24
    2c9e:	9c 93       	st	X, r25
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e9 5b       	subi	r30, 0xB9	; 185
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	91 81       	ldd	r25, Z+1	; 0x01
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <main+0x694>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e9 5b       	subi	r30, 0xB9	; 185
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	80 83       	st	Z, r24
							 _delay_ms(5000);
							 LCD_clear();				         
    2cb8:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
    2cbc:	c8 cc       	rjmp	.-1648   	; 0x264e <main+0x38>
				         }				
						 else if (g_uartRecieveCommand == inCorrectPassword)
    2cbe:	80 91 52 01 	lds	r24, 0x0152
    2cc2:	8d 32       	cpi	r24, 0x2D	; 45
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <main+0x6b2>
    2cc6:	95 c0       	rjmp	.+298    	; 0x2df2 <main+0x7dc>
						 {
							 LCD_clear();
    2cc8:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("password is ");
    2ccc:	8a eb       	ldi	r24, 0xBA	; 186
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
							 LCD_displayStringRowColumn(1,0,"wrong");
    2cd4:	27 ec       	ldi	r18, 0xC7	; 199
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	a9 01       	movw	r20, r18
    2cde:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ed 5b       	subi	r30, 0xBD	; 189
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	aa e7       	ldi	r26, 0x7A	; 122
    2cee:	b4 e4       	ldi	r27, 0x44	; 68
    2cf0:	80 83       	st	Z, r24
    2cf2:	91 83       	std	Z+1, r25	; 0x01
    2cf4:	a2 83       	std	Z+2, r26	; 0x02
    2cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf8:	8e 01       	movw	r16, r28
    2cfa:	01 5c       	subi	r16, 0xC1	; 193
    2cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfe:	fe 01       	movw	r30, r28
    2d00:	ed 5b       	subi	r30, 0xBD	; 189
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a ef       	ldi	r20, 0xFA	; 250
    2d12:	54 e4       	ldi	r21, 0x44	; 68
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	f8 01       	movw	r30, r16
    2d1e:	80 83       	st	Z, r24
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	a2 83       	std	Z+2, r26	; 0x02
    2d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d26:	fe 01       	movw	r30, r28
    2d28:	ff 96       	adiw	r30, 0x3f	; 63
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e8       	ldi	r20, 0x80	; 128
    2d38:	5f e3       	ldi	r21, 0x3F	; 63
    2d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3e:	88 23       	and	r24, r24
    2d40:	2c f4       	brge	.+10     	; 0x2d4c <main+0x736>
		__ticks = 1;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	9e af       	std	Y+62, r25	; 0x3e
    2d48:	8d af       	std	Y+61, r24	; 0x3d
    2d4a:	46 c0       	rjmp	.+140    	; 0x2dd8 <main+0x7c2>
	else if (__tmp > 65535)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ff 96       	adiw	r30, 0x3f	; 63
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	64 f5       	brge	.+88     	; 0x2dc0 <main+0x7aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ed 5b       	subi	r30, 0xBD	; 189
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	60 81       	ld	r22, Z
    2d70:	71 81       	ldd	r23, Z+1	; 0x01
    2d72:	82 81       	ldd	r24, Z+2	; 0x02
    2d74:	93 81       	ldd	r25, Z+3	; 0x03
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e2       	ldi	r20, 0x20	; 32
    2d7c:	51 e4       	ldi	r21, 0x41	; 65
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9e af       	std	Y+62, r25	; 0x3e
    2d94:	8d af       	std	Y+61, r24	; 0x3d
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <main+0x7a0>
    2d98:	88 ec       	ldi	r24, 0xC8	; 200
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9c af       	std	Y+60, r25	; 0x3c
    2d9e:	8b af       	std	Y+59, r24	; 0x3b
    2da0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2da2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <main+0x78e>
    2da8:	9c af       	std	Y+60, r25	; 0x3c
    2daa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	9e af       	std	Y+62, r25	; 0x3e
    2db4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <main+0x782>
    2dbe:	16 c0       	rjmp	.+44     	; 0x2dec <main+0x7d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ff 96       	adiw	r30, 0x3f	; 63
    2dc4:	60 81       	ld	r22, Z
    2dc6:	71 81       	ldd	r23, Z+1	; 0x01
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9e af       	std	Y+62, r25	; 0x3e
    2dd6:	8d af       	std	Y+61, r24	; 0x3d
    2dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ddc:	9a af       	std	Y+58, r25	; 0x3a
    2dde:	89 af       	std	Y+57, r24	; 0x39
    2de0:	89 ad       	ldd	r24, Y+57	; 0x39
    2de2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <main+0x7ce>
    2de8:	9a af       	std	Y+58, r25	; 0x3a
    2dea:	89 af       	std	Y+57, r24	; 0x39
							 _delay_ms(1000);
							 LCD_clear();
    2dec:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
    2df0:	2e cc       	rjmp	.-1956   	; 0x264e <main+0x38>
							 
						 }
						 else if(g_uartRecieveCommand == thief)
    2df2:	80 91 52 01 	lds	r24, 0x0152
    2df6:	8a 32       	cpi	r24, 0x2A	; 42
    2df8:	09 f0       	breq	.+2      	; 0x2dfc <main+0x7e6>
    2dfa:	29 cc       	rjmp	.-1966   	; 0x264e <main+0x38>
						 {
							 /*
							  * the user try to write password more than 3 trials
							  */
							 LCD_clear();
    2dfc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("you are thief");
    2e00:	8d ec       	ldi	r24, 0xCD	; 205
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e4       	ldi	r25, 0x40	; 64
    2e0c:	ac e1       	ldi	r26, 0x1C	; 28
    2e0e:	b6 e4       	ldi	r27, 0x46	; 70
    2e10:	8d ab       	std	Y+53, r24	; 0x35
    2e12:	9e ab       	std	Y+54, r25	; 0x36
    2e14:	af ab       	std	Y+55, r26	; 0x37
    2e16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	6d a9       	ldd	r22, Y+53	; 0x35
    2e1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a ef       	ldi	r20, 0xFA	; 250
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	89 ab       	std	Y+49, r24	; 0x31
    2e32:	9a ab       	std	Y+50, r25	; 0x32
    2e34:	ab ab       	std	Y+51, r26	; 0x33
    2e36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e38:	69 a9       	ldd	r22, Y+49	; 0x31
    2e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <main+0x844>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	98 ab       	std	Y+48, r25	; 0x30
    2e56:	8f a7       	std	Y+47, r24	; 0x2f
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <main+0x8c2>
	else if (__tmp > 65535)
    2e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e60:	9c a9       	ldd	r25, Y+52	; 0x34
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <main+0x8ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	6d a9       	ldd	r22, Y+53	; 0x35
    2e74:	7e a9       	ldd	r23, Y+54	; 0x36
    2e76:	8f a9       	ldd	r24, Y+55	; 0x37
    2e78:	98 ad       	ldd	r25, Y+56	; 0x38
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	98 ab       	std	Y+48, r25	; 0x30
    2e98:	8f a7       	std	Y+47, r24	; 0x2f
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <main+0x8a4>
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9e a7       	std	Y+46, r25	; 0x2e
    2ea2:	8d a7       	std	Y+45, r24	; 0x2d
    2ea4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ea6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <main+0x892>
    2eac:	9e a7       	std	Y+46, r25	; 0x2e
    2eae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	98 ab       	std	Y+48, r25	; 0x30
    2eb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <main+0x886>
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <main+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eca:	9c a9       	ldd	r25, Y+52	; 0x34
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	98 ab       	std	Y+48, r25	; 0x30
    2ed6:	8f a7       	std	Y+47, r24	; 0x2f
    2ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eda:	98 a9       	ldd	r25, Y+48	; 0x30
    2edc:	9c a7       	std	Y+44, r25	; 0x2c
    2ede:	8b a7       	std	Y+43, r24	; 0x2b
    2ee0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <main+0x8ce>
    2ee8:	9c a7       	std	Y+44, r25	; 0x2c
    2eea:	8b a7       	std	Y+43, r24	; 0x2b
							 _delay_ms(10000);
							 LCD_clear();
    2eec:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
    2ef0:	ae cb       	rjmp	.-2212   	; 0x264e <main+0x38>
						 }
						 break;         
					  
		    	 case '#': 
				         /* ask the user the old password*/
				         enterPassword();
    2ef2:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <enterPassword>
						 /*send checking command */
						 UART_sendByte(checkPassword);
    2ef6:	86 e2       	ldi	r24, 0x26	; 38
    2ef8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_sendByte>
						 /*send the password to check it*/
						 UART_sendString(g_passwordTest);
    2efc:	87 e4       	ldi	r24, 0x47	; 71
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	0e 94 11 12 	call	0x2422	; 0x2422 <UART_sendString>
						  * receive command from control MCU
						  * option : correct command if the password is correct
						  *          incorrect command if the password is incorrect
						  *          thief command if the trials to enter password exceed 3 trials 
						  */
						 g_uartRecieveCommand = UART_recieveByte();
    2f04:	0e 94 02 12 	call	0x2404	; 0x2404 <UART_recieveByte>
    2f08:	80 93 52 01 	sts	0x0152, r24
						 if (g_uartRecieveCommand == correctPassword)
    2f0c:	80 91 52 01 	lds	r24, 0x0152
    2f10:	8b 32       	cpi	r24, 0x2B	; 43
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <main+0x900>
    2f14:	86 c0       	rjmp	.+268    	; 0x3022 <main+0xa0c>
						 {
							 LCD_clear();
    2f16:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("password is OK");
    2f1a:	8b ed       	ldi	r24, 0xDB	; 219
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	aa e7       	ldi	r26, 0x7A	; 122
    2f28:	b4 e4       	ldi	r27, 0x44	; 68
    2f2a:	8f a3       	std	Y+39, r24	; 0x27
    2f2c:	98 a7       	std	Y+40, r25	; 0x28
    2f2e:	a9 a7       	std	Y+41, r26	; 0x29
    2f30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f32:	6f a1       	ldd	r22, Y+39	; 0x27
    2f34:	78 a5       	ldd	r23, Y+40	; 0x28
    2f36:	89 a5       	ldd	r24, Y+41	; 0x29
    2f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	8b a3       	std	Y+35, r24	; 0x23
    2f4c:	9c a3       	std	Y+36, r25	; 0x24
    2f4e:	ad a3       	std	Y+37, r26	; 0x25
    2f50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f52:	6b a1       	ldd	r22, Y+35	; 0x23
    2f54:	7c a1       	ldd	r23, Y+36	; 0x24
    2f56:	8d a1       	ldd	r24, Y+37	; 0x25
    2f58:	9e a1       	ldd	r25, Y+38	; 0x26
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <main+0x95e>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	9a a3       	std	Y+34, r25	; 0x22
    2f70:	89 a3       	std	Y+33, r24	; 0x21
    2f72:	3f c0       	rjmp	.+126    	; 0x2ff2 <main+0x9dc>
	else if (__tmp > 65535)
    2f74:	6b a1       	ldd	r22, Y+35	; 0x23
    2f76:	7c a1       	ldd	r23, Y+36	; 0x24
    2f78:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	3f ef       	ldi	r19, 0xFF	; 255
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	57 e4       	ldi	r21, 0x47	; 71
    2f84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	4c f5       	brge	.+82     	; 0x2fde <main+0x9c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f90:	89 a5       	ldd	r24, Y+41	; 0x29
    2f92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e2       	ldi	r20, 0x20	; 32
    2f9a:	51 e4       	ldi	r21, 0x41	; 65
    2f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9a a3       	std	Y+34, r25	; 0x22
    2fb2:	89 a3       	std	Y+33, r24	; 0x21
    2fb4:	0f c0       	rjmp	.+30     	; 0x2fd4 <main+0x9be>
    2fb6:	88 ec       	ldi	r24, 0xC8	; 200
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	98 a3       	std	Y+32, r25	; 0x20
    2fbc:	8f 8f       	std	Y+31, r24	; 0x1f
    2fbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fc0:	98 a1       	ldd	r25, Y+32	; 0x20
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <main+0x9ac>
    2fc6:	98 a3       	std	Y+32, r25	; 0x20
    2fc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	89 a1       	ldd	r24, Y+33	; 0x21
    2fcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	9a a3       	std	Y+34, r25	; 0x22
    2fd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	69 f7       	brne	.-38     	; 0x2fb6 <main+0x9a0>
    2fdc:	14 c0       	rjmp	.+40     	; 0x3006 <main+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fde:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
    2ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    2ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ffc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <main+0x9e8>
    3002:	9e 8f       	std	Y+30, r25	; 0x1e
    3004:	8d 8f       	std	Y+29, r24	; 0x1d
							 _delay_ms(1000);
                             LCD_clear();
    3006:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 while(!test());
    300a:	0e 94 ae 1a 	call	0x355c	; 0x355c <test>
    300e:	88 23       	and	r24, r24
    3010:	e1 f3       	breq	.-8      	; 0x300a <main+0x9f4>
					         UART_sendByte(setNewPassword);
    3012:	80 e4       	ldi	r24, 0x40	; 64
    3014:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_sendByte>
					         UART_sendString(g_password);
    3018:	82 e4       	ldi	r24, 0x42	; 66
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	0e 94 11 12 	call	0x2422	; 0x2422 <UART_sendString>
    3020:	16 cb       	rjmp	.-2516   	; 0x264e <main+0x38>
							 
						 }
						 else if (g_uartRecieveCommand == inCorrectPassword)
    3022:	80 91 52 01 	lds	r24, 0x0152
    3026:	8d 32       	cpi	r24, 0x2D	; 45
    3028:	09 f0       	breq	.+2      	; 0x302c <main+0xa16>
    302a:	82 c0       	rjmp	.+260    	; 0x3130 <main+0xb1a>
						 {
							 LCD_clear();
    302c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
							 LCD_displayString("password is ");
    3030:	8a eb       	ldi	r24, 0xBA	; 186
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
							 LCD_displayStringRowColumn(1,0,"wrong");
    3038:	27 ec       	ldi	r18, 0xC7	; 199
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	a9 01       	movw	r20, r18
    3042:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	aa e7       	ldi	r26, 0x7A	; 122
    304c:	b4 e4       	ldi	r27, 0x44	; 68
    304e:	89 8f       	std	Y+25, r24	; 0x19
    3050:	9a 8f       	std	Y+26, r25	; 0x1a
    3052:	ab 8f       	std	Y+27, r26	; 0x1b
    3054:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	69 8d       	ldd	r22, Y+25	; 0x19
    3058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    305a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    305c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a ef       	ldi	r20, 0xFA	; 250
    3064:	54 e4       	ldi	r21, 0x44	; 68
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8d 8b       	std	Y+21, r24	; 0x15
    3070:	9e 8b       	std	Y+22, r25	; 0x16
    3072:	af 8b       	std	Y+23, r26	; 0x17
    3074:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3076:	6d 89       	ldd	r22, Y+21	; 0x15
    3078:	7e 89       	ldd	r23, Y+22	; 0x16
    307a:	8f 89       	ldd	r24, Y+23	; 0x17
    307c:	98 8d       	ldd	r25, Y+24	; 0x18
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <main+0xa82>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <main+0xb00>
	else if (__tmp > 65535)
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <main+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	69 8d       	ldd	r22, Y+25	; 0x19
    30b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9c 8b       	std	Y+20, r25	; 0x14
    30d6:	8b 8b       	std	Y+19, r24	; 0x13
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <main+0xae2>
    30da:	88 ec       	ldi	r24, 0xC8	; 200
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9a 8b       	std	Y+18, r25	; 0x12
    30e0:	89 8b       	std	Y+17, r24	; 0x11
    30e2:	89 89       	ldd	r24, Y+17	; 0x11
    30e4:	9a 89       	ldd	r25, Y+18	; 0x12
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <main+0xad0>
    30ea:	9a 8b       	std	Y+18, r25	; 0x12
    30ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8b 89       	ldd	r24, Y+19	; 0x13
    30f0:	9c 89       	ldd	r25, Y+20	; 0x14
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <main+0xac4>
    3100:	14 c0       	rjmp	.+40     	; 0x312a <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	6d 89       	ldd	r22, Y+21	; 0x15
    3104:	7e 89       	ldd	r23, Y+22	; 0x16
    3106:	8f 89       	ldd	r24, Y+23	; 0x17
    3108:	98 8d       	ldd	r25, Y+24	; 0x18
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	98 8b       	std	Y+16, r25	; 0x10
    311c:	8f 87       	std	Y+15, r24	; 0x0f
    311e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3120:	98 89       	ldd	r25, Y+16	; 0x10
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <main+0xb0c>
    3126:	98 8b       	std	Y+16, r25	; 0x10
    3128:	8f 87       	std	Y+15, r24	; 0x0f
							 _delay_ms(1000);
							 LCD_clear();
    312a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
    312e:	8f ca       	rjmp	.-2786   	; 0x264e <main+0x38>
						 }
				         else if(g_uartRecieveCommand == thief)
    3130:	80 91 52 01 	lds	r24, 0x0152
    3134:	8a 32       	cpi	r24, 0x2A	; 42
    3136:	09 f0       	breq	.+2      	; 0x313a <main+0xb24>
    3138:	8a ca       	rjmp	.-2796   	; 0x264e <main+0x38>
				         {
					         LCD_clear();
    313a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
					         LCD_displayString("you are thief");
    313e:	8d ec       	ldi	r24, 0xCD	; 205
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e4       	ldi	r25, 0x40	; 64
    314a:	ac e1       	ldi	r26, 0x1C	; 28
    314c:	b6 e4       	ldi	r27, 0x46	; 70
    314e:	8b 87       	std	Y+11, r24	; 0x0b
    3150:	9c 87       	std	Y+12, r25	; 0x0c
    3152:	ad 87       	std	Y+13, r26	; 0x0d
    3154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	6b 85       	ldd	r22, Y+11	; 0x0b
    3158:	7c 85       	ldd	r23, Y+12	; 0x0c
    315a:	8d 85       	ldd	r24, Y+13	; 0x0d
    315c:	9e 85       	ldd	r25, Y+14	; 0x0e
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a ef       	ldi	r20, 0xFA	; 250
    3164:	54 e4       	ldi	r21, 0x44	; 68
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8f 83       	std	Y+7, r24	; 0x07
    3170:	98 87       	std	Y+8, r25	; 0x08
    3172:	a9 87       	std	Y+9, r26	; 0x09
    3174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3176:	6f 81       	ldd	r22, Y+7	; 0x07
    3178:	78 85       	ldd	r23, Y+8	; 0x08
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	5f e3       	ldi	r21, 0x3F	; 63
    3186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    318a:	88 23       	and	r24, r24
    318c:	2c f4       	brge	.+10     	; 0x3198 <main+0xb82>
		__ticks = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	8d 83       	std	Y+5, r24	; 0x05
    3196:	3f c0       	rjmp	.+126    	; 0x3216 <main+0xc00>
	else if (__tmp > 65535)
    3198:	6f 81       	ldd	r22, Y+7	; 0x07
    319a:	78 85       	ldd	r23, Y+8	; 0x08
    319c:	89 85       	ldd	r24, Y+9	; 0x09
    319e:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	3f ef       	ldi	r19, 0xFF	; 255
    31a4:	4f e7       	ldi	r20, 0x7F	; 127
    31a6:	57 e4       	ldi	r21, 0x47	; 71
    31a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ac:	18 16       	cp	r1, r24
    31ae:	4c f5       	brge	.+82     	; 0x3202 <main+0xbec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e2       	ldi	r20, 0x20	; 32
    31be:	51 e4       	ldi	r21, 0x41	; 65
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <main+0xbe2>
    31da:	88 ec       	ldi	r24, 0xC8	; 200
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9c 83       	std	Y+4, r25	; 0x04
    31e0:	8b 83       	std	Y+3, r24	; 0x03
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <main+0xbd0>
    31ea:	9c 83       	std	Y+4, r25	; 0x04
    31ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	9e 81       	ldd	r25, Y+6	; 0x06
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	69 f7       	brne	.-38     	; 0x31da <main+0xbc4>
    3200:	14 c0       	rjmp	.+40     	; 0x322a <main+0xc14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3202:	6f 81       	ldd	r22, Y+7	; 0x07
    3204:	78 85       	ldd	r23, Y+8	; 0x08
    3206:	89 85       	ldd	r24, Y+9	; 0x09
    3208:	9a 85       	ldd	r25, Y+10	; 0x0a
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	9e 81       	ldd	r25, Y+6	; 0x06
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <main+0xc0c>
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
					         _delay_ms(10000);
					         LCD_clear();
    322a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
    322e:	0f ca       	rjmp	.-3042   	; 0x264e <main+0x38>

00003230 <setNewPasswordNumber>:
		
				
     }
}
void setNewPasswordNumber(void)
{
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	df 93       	push	r29
    3236:	cf 93       	push	r28
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	2f 97       	sbiw	r28, 0x0f	; 15
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
		Uint8 i=0;
    3248:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_clear();
    324a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
		LCD_displayString("Enter new ");
    324e:	8a ee       	ldi	r24, 0xEA	; 234
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
		LCD_goToRowColumn(1,0);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_goToRowColumn>
		LCD_displayString("password :");
    325e:	85 ef       	ldi	r24, 0xF5	; 245
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_displayString>
		for(i=0;i<4;i++)
    3266:	1f 86       	std	Y+15, r1	; 0x0f
    3268:	85 c0       	rjmp	.+266    	; 0x3374 <setNewPasswordNumber+0x144>
		{
			while(!keypad_getPressedKey());
    326a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    326e:	88 23       	and	r24, r24
    3270:	e1 f3       	breq	.-8      	; 0x326a <setNewPasswordNumber+0x3a>
			g_password[i]=keypad_getPressedKey();
    3272:	8f 85       	ldd	r24, Y+15	; 0x0f
    3274:	08 2f       	mov	r16, r24
    3276:	10 e0       	ldi	r17, 0x00	; 0
    3278:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    327c:	f8 01       	movw	r30, r16
    327e:	ee 5b       	subi	r30, 0xBE	; 190
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	80 83       	st	Z, r24
			LCD_displayChar('*');
    3284:	8a e2       	ldi	r24, 0x2A	; 42
    3286:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_displayChar>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	aa e7       	ldi	r26, 0x7A	; 122
    3290:	b3 e4       	ldi	r27, 0x43	; 67
    3292:	8b 87       	std	Y+11, r24	; 0x0b
    3294:	9c 87       	std	Y+12, r25	; 0x0c
    3296:	ad 87       	std	Y+13, r26	; 0x0d
    3298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329a:	6b 85       	ldd	r22, Y+11	; 0x0b
    329c:	7c 85       	ldd	r23, Y+12	; 0x0c
    329e:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	4a ef       	ldi	r20, 0xFA	; 250
    32a8:	54 e4       	ldi	r21, 0x44	; 68
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	8f 83       	std	Y+7, r24	; 0x07
    32b4:	98 87       	std	Y+8, r25	; 0x08
    32b6:	a9 87       	std	Y+9, r26	; 0x09
    32b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e8       	ldi	r20, 0x80	; 128
    32c8:	5f e3       	ldi	r21, 0x3F	; 63
    32ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ce:	88 23       	and	r24, r24
    32d0:	2c f4       	brge	.+10     	; 0x32dc <setNewPasswordNumber+0xac>
		__ticks = 1;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	8d 83       	std	Y+5, r24	; 0x05
    32da:	3f c0       	rjmp	.+126    	; 0x335a <setNewPasswordNumber+0x12a>
	else if (__tmp > 65535)
    32dc:	6f 81       	ldd	r22, Y+7	; 0x07
    32de:	78 85       	ldd	r23, Y+8	; 0x08
    32e0:	89 85       	ldd	r24, Y+9	; 0x09
    32e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	3f ef       	ldi	r19, 0xFF	; 255
    32e8:	4f e7       	ldi	r20, 0x7F	; 127
    32ea:	57 e4       	ldi	r21, 0x47	; 71
    32ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	4c f5       	brge	.+82     	; 0x3346 <setNewPasswordNumber+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e2       	ldi	r20, 0x20	; 32
    3302:	51 e4       	ldi	r21, 0x41	; 65
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	0f c0       	rjmp	.+30     	; 0x333c <setNewPasswordNumber+0x10c>
    331e:	88 ec       	ldi	r24, 0xC8	; 200
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9c 83       	std	Y+4, r25	; 0x04
    3324:	8b 83       	std	Y+3, r24	; 0x03
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <setNewPasswordNumber+0xfa>
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	9e 83       	std	Y+6, r25	; 0x06
    333a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	69 f7       	brne	.-38     	; 0x331e <setNewPasswordNumber+0xee>
    3344:	14 c0       	rjmp	.+40     	; 0x336e <setNewPasswordNumber+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3346:	6f 81       	ldd	r22, Y+7	; 0x07
    3348:	78 85       	ldd	r23, Y+8	; 0x08
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	9a 83       	std	Y+2, r25	; 0x02
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <setNewPasswordNumber+0x136>
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01
		Uint8 i=0;
		LCD_clear();
		LCD_displayString("Enter new ");
		LCD_goToRowColumn(1,0);
		LCD_displayString("password :");
		for(i=0;i<4;i++)
    336e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3370:	8f 5f       	subi	r24, 0xFF	; 255
    3372:	8f 87       	std	Y+15, r24	; 0x0f
    3374:	8f 85       	ldd	r24, Y+15	; 0x0f
    3376:	84 30       	cpi	r24, 0x04	; 4
    3378:	08 f4       	brcc	.+2      	; 0x337c <setNewPasswordNumber+0x14c>
    337a:	77 cf       	rjmp	.-274    	; 0x326a <setNewPasswordNumber+0x3a>
			g_password[i]=keypad_getPressedKey();
			LCD_displayChar('*');
			_delay_ms(250);
			
		}
}
    337c:	2f 96       	adiw	r28, 0x0f	; 15
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <checkNewPassword>:
void checkNewPassword(void)
{
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	2f 97       	sbiw	r28, 0x0f	; 15
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
		Uint8 i=0;
    33aa:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_clear();
    33ac:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
		LCD_displayStringRowColumn(0,0,"enter again");
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	31 e0       	ldi	r19, 0x01	; 1
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	a9 01       	movw	r20, r18
    33ba:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	60 e0       	ldi	r22, 0x00	; 0
    33c2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_goToRowColumn>
		
		for (i=0;i<4;i++)
    33c6:	1f 86       	std	Y+15, r1	; 0x0f
    33c8:	85 c0       	rjmp	.+266    	; 0x34d4 <checkNewPassword+0x142>
		{
			while(!keypad_getPressedKey());
    33ca:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    33ce:	88 23       	and	r24, r24
    33d0:	e1 f3       	breq	.-8      	; 0x33ca <checkNewPassword+0x38>
			g_passwordTest[i]=keypad_getPressedKey();
    33d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d4:	08 2f       	mov	r16, r24
    33d6:	10 e0       	ldi	r17, 0x00	; 0
    33d8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    33dc:	f8 01       	movw	r30, r16
    33de:	e9 5b       	subi	r30, 0xB9	; 185
    33e0:	fe 4f       	sbci	r31, 0xFE	; 254
    33e2:	80 83       	st	Z, r24
			LCD_displayChar('*');
    33e4:	8a e2       	ldi	r24, 0x2A	; 42
    33e6:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_displayChar>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	aa e7       	ldi	r26, 0x7A	; 122
    33f0:	b3 e4       	ldi	r27, 0x43	; 67
    33f2:	8b 87       	std	Y+11, r24	; 0x0b
    33f4:	9c 87       	std	Y+12, r25	; 0x0c
    33f6:	ad 87       	std	Y+13, r26	; 0x0d
    33f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3400:	9e 85       	ldd	r25, Y+14	; 0x0e
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4a ef       	ldi	r20, 0xFA	; 250
    3408:	54 e4       	ldi	r21, 0x44	; 68
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	8f 83       	std	Y+7, r24	; 0x07
    3414:	98 87       	std	Y+8, r25	; 0x08
    3416:	a9 87       	std	Y+9, r26	; 0x09
    3418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    341a:	6f 81       	ldd	r22, Y+7	; 0x07
    341c:	78 85       	ldd	r23, Y+8	; 0x08
    341e:	89 85       	ldd	r24, Y+9	; 0x09
    3420:	9a 85       	ldd	r25, Y+10	; 0x0a
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e8       	ldi	r20, 0x80	; 128
    3428:	5f e3       	ldi	r21, 0x3F	; 63
    342a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    342e:	88 23       	and	r24, r24
    3430:	2c f4       	brge	.+10     	; 0x343c <checkNewPassword+0xaa>
		__ticks = 1;
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	9e 83       	std	Y+6, r25	; 0x06
    3438:	8d 83       	std	Y+5, r24	; 0x05
    343a:	3f c0       	rjmp	.+126    	; 0x34ba <checkNewPassword+0x128>
	else if (__tmp > 65535)
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	3f ef       	ldi	r19, 0xFF	; 255
    3448:	4f e7       	ldi	r20, 0x7F	; 127
    344a:	57 e4       	ldi	r21, 0x47	; 71
    344c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3450:	18 16       	cp	r1, r24
    3452:	4c f5       	brge	.+82     	; 0x34a6 <checkNewPassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3454:	6b 85       	ldd	r22, Y+11	; 0x0b
    3456:	7c 85       	ldd	r23, Y+12	; 0x0c
    3458:	8d 85       	ldd	r24, Y+13	; 0x0d
    345a:	9e 85       	ldd	r25, Y+14	; 0x0e
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e2       	ldi	r20, 0x20	; 32
    3462:	51 e4       	ldi	r21, 0x41	; 65
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
    347c:	0f c0       	rjmp	.+30     	; 0x349c <checkNewPassword+0x10a>
    347e:	88 ec       	ldi	r24, 0xC8	; 200
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	9c 83       	std	Y+4, r25	; 0x04
    3484:	8b 83       	std	Y+3, r24	; 0x03
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <checkNewPassword+0xf8>
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	69 f7       	brne	.-38     	; 0x347e <checkNewPassword+0xec>
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <checkNewPassword+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	9e 83       	std	Y+6, r25	; 0x06
    34b8:	8d 83       	std	Y+5, r24	; 0x05
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <checkNewPassword+0x134>
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
		Uint8 i=0;
		LCD_clear();
		LCD_displayStringRowColumn(0,0,"enter again");
		LCD_goToRowColumn(1,0);
		
		for (i=0;i<4;i++)
    34ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d0:	8f 5f       	subi	r24, 0xFF	; 255
    34d2:	8f 87       	std	Y+15, r24	; 0x0f
    34d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d6:	84 30       	cpi	r24, 0x04	; 4
    34d8:	08 f4       	brcc	.+2      	; 0x34dc <checkNewPassword+0x14a>
    34da:	77 cf       	rjmp	.-274    	; 0x33ca <checkNewPassword+0x38>
			LCD_displayChar('*');
			_delay_ms(250);
            		
		}

}
    34dc:	2f 96       	adiw	r28, 0x0f	; 15
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	08 95       	ret

000034f2 <comparePasswordAndPasswordTest>:
bool comparePasswordAndPasswordTest(const Uint8 *P,const Uint8*PT)
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <comparePasswordAndPasswordTest+0x6>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <comparePasswordAndPasswordTest+0x8>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <comparePasswordAndPasswordTest+0xa>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	9b 83       	std	Y+3, r25	; 0x03
    3502:	8a 83       	std	Y+2, r24	; 0x02
    3504:	7d 83       	std	Y+5, r23	; 0x05
    3506:	6c 83       	std	Y+4, r22	; 0x04
	for(Uint8 iter=0;iter<4;iter++)
    3508:	19 82       	std	Y+1, r1	; 0x01
    350a:	19 c0       	rjmp	.+50     	; 0x353e <comparePasswordAndPasswordTest+0x4c>
	{
		if(P[iter]!=PT[iter])
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	9b 81       	ldd	r25, Y+3	; 0x03
    3516:	fc 01       	movw	r30, r24
    3518:	e2 0f       	add	r30, r18
    351a:	f3 1f       	adc	r31, r19
    351c:	40 81       	ld	r20, Z
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	8c 81       	ldd	r24, Y+4	; 0x04
    3526:	9d 81       	ldd	r25, Y+5	; 0x05
    3528:	fc 01       	movw	r30, r24
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	80 81       	ld	r24, Z
    3530:	48 17       	cp	r20, r24
    3532:	11 f0       	breq	.+4      	; 0x3538 <comparePasswordAndPasswordTest+0x46>
		{
			return FALSE;
    3534:	1e 82       	std	Y+6, r1	; 0x06
    3536:	08 c0       	rjmp	.+16     	; 0x3548 <comparePasswordAndPasswordTest+0x56>
		}

}
bool comparePasswordAndPasswordTest(const Uint8 *P,const Uint8*PT)
{
	for(Uint8 iter=0;iter<4;iter++)
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	8f 5f       	subi	r24, 0xFF	; 255
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	84 30       	cpi	r24, 0x04	; 4
    3542:	20 f3       	brcs	.-56     	; 0x350c <comparePasswordAndPasswordTest+0x1a>
		if(P[iter]!=PT[iter])
		{
			return FALSE;
		}
	}
	return TRUE;
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	8e 83       	std	Y+6, r24	; 0x06
    3548:	8e 81       	ldd	r24, Y+6	; 0x06
}
    354a:	26 96       	adiw	r28, 0x06	; 6
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	08 95       	ret

0000355c <test>:
bool test()
{
    355c:	df 93       	push	r29
    355e:	cf 93       	push	r28
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	6d 97       	sbiw	r28, 0x1d	; 29
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
	setNewPasswordNumber();
    3570:	0e 94 18 19 	call	0x3230	; 0x3230 <setNewPasswordNumber>
	checkNewPassword();
    3574:	0e 94 c9 19 	call	0x3392	; 0x3392 <checkNewPassword>
	if (comparePasswordAndPasswordTest(g_password,g_passwordTest))
    3578:	82 e4       	ldi	r24, 0x42	; 66
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	27 e4       	ldi	r18, 0x47	; 71
    357e:	31 e0       	ldi	r19, 0x01	; 1
    3580:	b9 01       	movw	r22, r18
    3582:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <comparePasswordAndPasswordTest>
    3586:	88 23       	and	r24, r24
    3588:	09 f4       	brne	.+2      	; 0x358c <test+0x30>
    358a:	85 c0       	rjmp	.+266    	; 0x3696 <test+0x13a>
	{
		LCD_clear();
    358c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
		LCD_displayStringRowColumn(0,3,"correct ");
    3590:	2c e0       	ldi	r18, 0x0C	; 12
    3592:	31 e0       	ldi	r19, 0x01	; 1
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	63 e0       	ldi	r22, 0x03	; 3
    3598:	a9 01       	movw	r20, r18
    359a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,3,"password");
    359e:	25 e1       	ldi	r18, 0x15	; 21
    35a0:	31 e0       	ldi	r19, 0x01	; 1
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	63 e0       	ldi	r22, 0x03	; 3
    35a6:	a9 01       	movw	r20, r18
    35a8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	aa ef       	ldi	r26, 0xFA	; 250
    35b2:	b3 e4       	ldi	r27, 0x43	; 67
    35b4:	89 8f       	std	Y+25, r24	; 0x19
    35b6:	9a 8f       	std	Y+26, r25	; 0x1a
    35b8:	ab 8f       	std	Y+27, r26	; 0x1b
    35ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	69 8d       	ldd	r22, Y+25	; 0x19
    35be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a ef       	ldi	r20, 0xFA	; 250
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	8d 8b       	std	Y+21, r24	; 0x15
    35d6:	9e 8b       	std	Y+22, r25	; 0x16
    35d8:	af 8b       	std	Y+23, r26	; 0x17
    35da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35dc:	6d 89       	ldd	r22, Y+21	; 0x15
    35de:	7e 89       	ldd	r23, Y+22	; 0x16
    35e0:	8f 89       	ldd	r24, Y+23	; 0x17
    35e2:	98 8d       	ldd	r25, Y+24	; 0x18
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <test+0xa2>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	9c 8b       	std	Y+20, r25	; 0x14
    35fa:	8b 8b       	std	Y+19, r24	; 0x13
    35fc:	3f c0       	rjmp	.+126    	; 0x367c <test+0x120>
	else if (__tmp > 65535)
    35fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3600:	7e 89       	ldd	r23, Y+22	; 0x16
    3602:	8f 89       	ldd	r24, Y+23	; 0x17
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	4c f5       	brge	.+82     	; 0x3668 <test+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3616:	69 8d       	ldd	r22, Y+25	; 0x19
    3618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    361a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    361c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	51 e4       	ldi	r21, 0x41	; 65
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9c 8b       	std	Y+20, r25	; 0x14
    363c:	8b 8b       	std	Y+19, r24	; 0x13
    363e:	0f c0       	rjmp	.+30     	; 0x365e <test+0x102>
    3640:	88 ec       	ldi	r24, 0xC8	; 200
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9a 8b       	std	Y+18, r25	; 0x12
    3646:	89 8b       	std	Y+17, r24	; 0x11
    3648:	89 89       	ldd	r24, Y+17	; 0x11
    364a:	9a 89       	ldd	r25, Y+18	; 0x12
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <test+0xf0>
    3650:	9a 8b       	std	Y+18, r25	; 0x12
    3652:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	9c 8b       	std	Y+20, r25	; 0x14
    365c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	8b 89       	ldd	r24, Y+19	; 0x13
    3660:	9c 89       	ldd	r25, Y+20	; 0x14
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	69 f7       	brne	.-38     	; 0x3640 <test+0xe4>
    3666:	14 c0       	rjmp	.+40     	; 0x3690 <test+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3668:	6d 89       	ldd	r22, Y+21	; 0x15
    366a:	7e 89       	ldd	r23, Y+22	; 0x16
    366c:	8f 89       	ldd	r24, Y+23	; 0x17
    366e:	98 8d       	ldd	r25, Y+24	; 0x18
    3670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	9c 8b       	std	Y+20, r25	; 0x14
    367a:	8b 8b       	std	Y+19, r24	; 0x13
    367c:	8b 89       	ldd	r24, Y+19	; 0x13
    367e:	9c 89       	ldd	r25, Y+20	; 0x14
    3680:	98 8b       	std	Y+16, r25	; 0x10
    3682:	8f 87       	std	Y+15, r24	; 0x0f
    3684:	8f 85       	ldd	r24, Y+15	; 0x0f
    3686:	98 89       	ldd	r25, Y+16	; 0x10
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <test+0x12c>
    368c:	98 8b       	std	Y+16, r25	; 0x10
    368e:	8f 87       	std	Y+15, r24	; 0x0f
		return FALSE;
		
		
		
	}
	return TRUE;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	8d 8f       	std	Y+29, r24	; 0x1d
    3694:	7c c0       	rjmp	.+248    	; 0x378e <test+0x232>
		_delay_ms(500);
        
	}
	else
	{
		LCD_clear();
    3696:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
		LCD_displayStringRowColumn(0,3,"try again ");
    369a:	2e e1       	ldi	r18, 0x1E	; 30
    369c:	31 e0       	ldi	r19, 0x01	; 1
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	63 e0       	ldi	r22, 0x03	; 3
    36a2:	a9 01       	movw	r20, r18
    36a4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	aa ef       	ldi	r26, 0xFA	; 250
    36ae:	b3 e4       	ldi	r27, 0x43	; 67
    36b0:	8b 87       	std	Y+11, r24	; 0x0b
    36b2:	9c 87       	std	Y+12, r25	; 0x0c
    36b4:	ad 87       	std	Y+13, r26	; 0x0d
    36b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	4a ef       	ldi	r20, 0xFA	; 250
    36c6:	54 e4       	ldi	r21, 0x44	; 68
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	8f 83       	std	Y+7, r24	; 0x07
    36d2:	98 87       	std	Y+8, r25	; 0x08
    36d4:	a9 87       	std	Y+9, r26	; 0x09
    36d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	40 e8       	ldi	r20, 0x80	; 128
    36e6:	5f e3       	ldi	r21, 0x3F	; 63
    36e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <test+0x19e>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <test+0x21c>
	else if (__tmp > 65535)
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	3f ef       	ldi	r19, 0xFF	; 255
    3706:	4f e7       	ldi	r20, 0x7F	; 127
    3708:	57 e4       	ldi	r21, 0x47	; 71
    370a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    370e:	18 16       	cp	r1, r24
    3710:	4c f5       	brge	.+82     	; 0x3764 <test+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3712:	6b 85       	ldd	r22, Y+11	; 0x0b
    3714:	7c 85       	ldd	r23, Y+12	; 0x0c
    3716:	8d 85       	ldd	r24, Y+13	; 0x0d
    3718:	9e 85       	ldd	r25, Y+14	; 0x0e
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	51 e4       	ldi	r21, 0x41	; 65
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
    373a:	0f c0       	rjmp	.+30     	; 0x375a <test+0x1fe>
    373c:	88 ec       	ldi	r24, 0xC8	; 200
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	8b 83       	std	Y+3, r24	; 0x03
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <test+0x1ec>
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	8d 81       	ldd	r24, Y+5	; 0x05
    3752:	9e 81       	ldd	r25, Y+6	; 0x06
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	9e 83       	std	Y+6, r25	; 0x06
    3758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	9e 81       	ldd	r25, Y+6	; 0x06
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	69 f7       	brne	.-38     	; 0x373c <test+0x1e0>
    3762:	14 c0       	rjmp	.+40     	; 0x378c <test+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	6f 81       	ldd	r22, Y+7	; 0x07
    3766:	78 85       	ldd	r23, Y+8	; 0x08
    3768:	89 85       	ldd	r24, Y+9	; 0x09
    376a:	9a 85       	ldd	r25, Y+10	; 0x0a
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <test+0x228>
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		return FALSE;
    378c:	1d 8e       	std	Y+29, r1	; 0x1d
    378e:	8d 8d       	ldd	r24, Y+29	; 0x1d
		
		
		
	}
	return TRUE;
}
    3790:	6d 96       	adiw	r28, 0x1d	; 29
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <enterPassword>:
void enterPassword(void)
{
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	2f 97       	sbiw	r28, 0x0f	; 15
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
	Uint8 i=0;
    37ba:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clear();
    37bc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_clear>
	LCD_displayStringRowColumn(0,0,"enter password :");
    37c0:	29 e2       	ldi	r18, 0x29	; 41
    37c2:	31 e0       	ldi	r19, 0x01	; 1
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	a9 01       	movw	r20, r18
    37ca:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <LCD_goToRowColumn>
			
	for (i=0;i<4;i++)
    37d6:	1f 86       	std	Y+15, r1	; 0x0f
    37d8:	85 c0       	rjmp	.+266    	; 0x38e4 <enterPassword+0x142>
	{
		while(!keypad_getPressedKey());
    37da:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    37de:	88 23       	and	r24, r24
    37e0:	e1 f3       	breq	.-8      	; 0x37da <enterPassword+0x38>
		g_passwordTest[i]=keypad_getPressedKey();
    37e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e4:	08 2f       	mov	r16, r24
    37e6:	10 e0       	ldi	r17, 0x00	; 0
    37e8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <keypad_getPressedKey>
    37ec:	f8 01       	movw	r30, r16
    37ee:	e9 5b       	subi	r30, 0xB9	; 185
    37f0:	fe 4f       	sbci	r31, 0xFE	; 254
    37f2:	80 83       	st	Z, r24
		LCD_displayChar('*');
    37f4:	8a e2       	ldi	r24, 0x2A	; 42
    37f6:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_displayChar>
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	aa ef       	ldi	r26, 0xFA	; 250
    3800:	b3 e4       	ldi	r27, 0x43	; 67
    3802:	8b 87       	std	Y+11, r24	; 0x0b
    3804:	9c 87       	std	Y+12, r25	; 0x0c
    3806:	ad 87       	std	Y+13, r26	; 0x0d
    3808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380a:	6b 85       	ldd	r22, Y+11	; 0x0b
    380c:	7c 85       	ldd	r23, Y+12	; 0x0c
    380e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3810:	9e 85       	ldd	r25, Y+14	; 0x0e
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	4a ef       	ldi	r20, 0xFA	; 250
    3818:	54 e4       	ldi	r21, 0x44	; 68
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	a9 87       	std	Y+9, r26	; 0x09
    3828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e8       	ldi	r20, 0x80	; 128
    3838:	5f e3       	ldi	r21, 0x3F	; 63
    383a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    383e:	88 23       	and	r24, r24
    3840:	2c f4       	brge	.+10     	; 0x384c <enterPassword+0xaa>
		__ticks = 1;
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9e 83       	std	Y+6, r25	; 0x06
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	3f c0       	rjmp	.+126    	; 0x38ca <enterPassword+0x128>
	else if (__tmp > 65535)
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	3f ef       	ldi	r19, 0xFF	; 255
    3858:	4f e7       	ldi	r20, 0x7F	; 127
    385a:	57 e4       	ldi	r21, 0x47	; 71
    385c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3860:	18 16       	cp	r1, r24
    3862:	4c f5       	brge	.+82     	; 0x38b6 <enterPassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e2       	ldi	r20, 0x20	; 32
    3872:	51 e4       	ldi	r21, 0x41	; 65
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	8d 83       	std	Y+5, r24	; 0x05
    388c:	0f c0       	rjmp	.+30     	; 0x38ac <enterPassword+0x10a>
    388e:	88 ec       	ldi	r24, 0xC8	; 200
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	9c 83       	std	Y+4, r25	; 0x04
    3894:	8b 83       	std	Y+3, r24	; 0x03
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <enterPassword+0xf8>
    389e:	9c 83       	std	Y+4, r25	; 0x04
    38a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	01 97       	sbiw	r24, 0x01	; 1
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ac:	8d 81       	ldd	r24, Y+5	; 0x05
    38ae:	9e 81       	ldd	r25, Y+6	; 0x06
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	69 f7       	brne	.-38     	; 0x388e <enterPassword+0xec>
    38b4:	14 c0       	rjmp	.+40     	; 0x38de <enterPassword+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b6:	6f 81       	ldd	r22, Y+7	; 0x07
    38b8:	78 85       	ldd	r23, Y+8	; 0x08
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	9e 83       	std	Y+6, r25	; 0x06
    38c8:	8d 83       	std	Y+5, r24	; 0x05
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	9a 83       	std	Y+2, r25	; 0x02
    38d0:	89 83       	std	Y+1, r24	; 0x01
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <enterPassword+0x134>
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01
	Uint8 i=0;
	LCD_clear();
	LCD_displayStringRowColumn(0,0,"enter password :");
	LCD_goToRowColumn(1,0);
			
	for (i=0;i<4;i++)
    38de:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	8f 87       	std	Y+15, r24	; 0x0f
    38e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38e6:	84 30       	cpi	r24, 0x04	; 4
    38e8:	08 f4       	brcc	.+2      	; 0x38ec <enterPassword+0x14a>
    38ea:	77 cf       	rjmp	.-274    	; 0x37da <enterPassword+0x38>
		g_passwordTest[i]=keypad_getPressedKey();
		LCD_displayChar('*');
		_delay_ms(500);
	}

}
    38ec:	2f 96       	adiw	r28, 0x0f	; 15
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	08 95       	ret

00003902 <__prologue_saves__>:
    3902:	2f 92       	push	r2
    3904:	3f 92       	push	r3
    3906:	4f 92       	push	r4
    3908:	5f 92       	push	r5
    390a:	6f 92       	push	r6
    390c:	7f 92       	push	r7
    390e:	8f 92       	push	r8
    3910:	9f 92       	push	r9
    3912:	af 92       	push	r10
    3914:	bf 92       	push	r11
    3916:	cf 92       	push	r12
    3918:	df 92       	push	r13
    391a:	ef 92       	push	r14
    391c:	ff 92       	push	r15
    391e:	0f 93       	push	r16
    3920:	1f 93       	push	r17
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	ca 1b       	sub	r28, r26
    392c:	db 0b       	sbc	r29, r27
    392e:	0f b6       	in	r0, 0x3f	; 63
    3930:	f8 94       	cli
    3932:	de bf       	out	0x3e, r29	; 62
    3934:	0f be       	out	0x3f, r0	; 63
    3936:	cd bf       	out	0x3d, r28	; 61
    3938:	09 94       	ijmp

0000393a <__epilogue_restores__>:
    393a:	2a 88       	ldd	r2, Y+18	; 0x12
    393c:	39 88       	ldd	r3, Y+17	; 0x11
    393e:	48 88       	ldd	r4, Y+16	; 0x10
    3940:	5f 84       	ldd	r5, Y+15	; 0x0f
    3942:	6e 84       	ldd	r6, Y+14	; 0x0e
    3944:	7d 84       	ldd	r7, Y+13	; 0x0d
    3946:	8c 84       	ldd	r8, Y+12	; 0x0c
    3948:	9b 84       	ldd	r9, Y+11	; 0x0b
    394a:	aa 84       	ldd	r10, Y+10	; 0x0a
    394c:	b9 84       	ldd	r11, Y+9	; 0x09
    394e:	c8 84       	ldd	r12, Y+8	; 0x08
    3950:	df 80       	ldd	r13, Y+7	; 0x07
    3952:	ee 80       	ldd	r14, Y+6	; 0x06
    3954:	fd 80       	ldd	r15, Y+5	; 0x05
    3956:	0c 81       	ldd	r16, Y+4	; 0x04
    3958:	1b 81       	ldd	r17, Y+3	; 0x03
    395a:	aa 81       	ldd	r26, Y+2	; 0x02
    395c:	b9 81       	ldd	r27, Y+1	; 0x01
    395e:	ce 0f       	add	r28, r30
    3960:	d1 1d       	adc	r29, r1
    3962:	0f b6       	in	r0, 0x3f	; 63
    3964:	f8 94       	cli
    3966:	de bf       	out	0x3e, r29	; 62
    3968:	0f be       	out	0x3f, r0	; 63
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	ed 01       	movw	r28, r26
    396e:	08 95       	ret

00003970 <itoa>:
    3970:	fb 01       	movw	r30, r22
    3972:	9f 01       	movw	r18, r30
    3974:	e8 94       	clt
    3976:	42 30       	cpi	r20, 0x02	; 2
    3978:	c4 f0       	brlt	.+48     	; 0x39aa <itoa+0x3a>
    397a:	45 32       	cpi	r20, 0x25	; 37
    397c:	b4 f4       	brge	.+44     	; 0x39aa <itoa+0x3a>
    397e:	4a 30       	cpi	r20, 0x0A	; 10
    3980:	29 f4       	brne	.+10     	; 0x398c <itoa+0x1c>
    3982:	97 fb       	bst	r25, 7
    3984:	1e f4       	brtc	.+6      	; 0x398c <itoa+0x1c>
    3986:	90 95       	com	r25
    3988:	81 95       	neg	r24
    398a:	9f 4f       	sbci	r25, 0xFF	; 255
    398c:	64 2f       	mov	r22, r20
    398e:	77 27       	eor	r23, r23
    3990:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__udivmodhi4>
    3994:	80 5d       	subi	r24, 0xD0	; 208
    3996:	8a 33       	cpi	r24, 0x3A	; 58
    3998:	0c f0       	brlt	.+2      	; 0x399c <itoa+0x2c>
    399a:	89 5d       	subi	r24, 0xD9	; 217
    399c:	81 93       	st	Z+, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	a1 f7       	brne	.-24     	; 0x398c <itoa+0x1c>
    39a4:	16 f4       	brtc	.+4      	; 0x39aa <itoa+0x3a>
    39a6:	5d e2       	ldi	r21, 0x2D	; 45
    39a8:	51 93       	st	Z+, r21
    39aa:	10 82       	st	Z, r1
    39ac:	c9 01       	movw	r24, r18
    39ae:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <strrev>

000039b2 <strrev>:
    39b2:	dc 01       	movw	r26, r24
    39b4:	fc 01       	movw	r30, r24
    39b6:	67 2f       	mov	r22, r23
    39b8:	71 91       	ld	r23, Z+
    39ba:	77 23       	and	r23, r23
    39bc:	e1 f7       	brne	.-8      	; 0x39b6 <strrev+0x4>
    39be:	32 97       	sbiw	r30, 0x02	; 2
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <strrev+0x18>
    39c2:	7c 91       	ld	r23, X
    39c4:	6d 93       	st	X+, r22
    39c6:	70 83       	st	Z, r23
    39c8:	62 91       	ld	r22, -Z
    39ca:	ae 17       	cp	r26, r30
    39cc:	bf 07       	cpc	r27, r31
    39ce:	c8 f3       	brcs	.-14     	; 0x39c2 <strrev+0x10>
    39d0:	08 95       	ret

000039d2 <__udivmodhi4>:
    39d2:	aa 1b       	sub	r26, r26
    39d4:	bb 1b       	sub	r27, r27
    39d6:	51 e1       	ldi	r21, 0x11	; 17
    39d8:	07 c0       	rjmp	.+14     	; 0x39e8 <__udivmodhi4_ep>

000039da <__udivmodhi4_loop>:
    39da:	aa 1f       	adc	r26, r26
    39dc:	bb 1f       	adc	r27, r27
    39de:	a6 17       	cp	r26, r22
    39e0:	b7 07       	cpc	r27, r23
    39e2:	10 f0       	brcs	.+4      	; 0x39e8 <__udivmodhi4_ep>
    39e4:	a6 1b       	sub	r26, r22
    39e6:	b7 0b       	sbc	r27, r23

000039e8 <__udivmodhi4_ep>:
    39e8:	88 1f       	adc	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	5a 95       	dec	r21
    39ee:	a9 f7       	brne	.-22     	; 0x39da <__udivmodhi4_loop>
    39f0:	80 95       	com	r24
    39f2:	90 95       	com	r25
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	08 95       	ret

000039fa <_exit>:
    39fa:	f8 94       	cli

000039fc <__stop_program>:
    39fc:	ff cf       	rjmp	.-2      	; 0x39fc <__stop_program>
