
Hydrogen Gas Monitoring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000672  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000672  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001639  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e2  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1b  00000000  00000000  000028ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  0000330c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dab  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 02 	call	0x560	; 0x560 <main>
  7a:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_setPinDirection>:
 /********************		    Functions definations 		**********************/
 /********************************************************************************/ 
 /*				Determine pin in Port as Input or Output           				 */
void GPIO_setPinDirection(Uint8 a_port , Uint8 a_pin, Uint8 a_mode)
{
	switch(a_port)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	01 f1       	breq	.+64     	; 0xc6 <GPIO_setPinDirection+0x44>
  86:	30 f0       	brcs	.+12     	; 0x94 <GPIO_setPinDirection+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	b1 f1       	breq	.+108    	; 0xf8 <GPIO_setPinDirection+0x76>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <GPIO_setPinDirection+0x10>
  90:	4c c0       	rjmp	.+152    	; 0x12a <GPIO_setPinDirection+0xa8>
  92:	08 95       	ret
	{
		case GPIO_PORTA :     
							if(a_mode == INPUT)
  94:	41 11       	cpse	r20, r1
  96:	0c c0       	rjmp	.+24     	; 0xb0 <GPIO_setPinDirection+0x2e>
							{
								CLEAR_BIT(DDRA,a_pin);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_setPinDirection+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_setPinDirection+0x1e>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
							}
							else if(OUTPUT)
							{
								SET_BIT(DDRA,a_pin);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_setPinDirection+0x3a>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_setPinDirection+0x36>
  c0:	82 2b       	or	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
							}
						    break; 
		case GPIO_PORTB :   
						    if(a_mode == INPUT)
  c6:	41 11       	cpse	r20, r1
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <GPIO_setPinDirection+0x60>
							{
								CLEAR_BIT(DDRB,a_pin);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_setPinDirection+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_setPinDirection+0x50>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
							}
							else if(OUTPUT)
							{
								SET_BIT(DDRB,a_pin);
  e2:	27 b3       	in	r18, 0x17	; 23
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_setPinDirection+0x6c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_setPinDirection+0x68>
  f2:	82 2b       	or	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
							}
							break;
		case GPIO_PORTC :     
						    if(a_mode == INPUT)
  f8:	41 11       	cpse	r20, r1
  fa:	0c c0       	rjmp	.+24     	; 0x114 <GPIO_setPinDirection+0x92>
						    {
							    CLEAR_BIT(DDRC,a_pin);
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_setPinDirection+0x86>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_setPinDirection+0x82>
 10c:	80 95       	com	r24
 10e:	82 23       	and	r24, r18
 110:	84 bb       	out	0x14, r24	; 20
 112:	08 95       	ret
						    }
						    else if(OUTPUT)
						    {
							    SET_BIT(DDRC,a_pin);
 114:	24 b3       	in	r18, 0x14	; 20
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_setPinDirection+0x9e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_setPinDirection+0x9a>
 124:	82 2b       	or	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
						    }
						    break;
		case GPIO_PORTD :     
						    if(a_mode == INPUT)
 12a:	41 11       	cpse	r20, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <GPIO_setPinDirection+0xc4>
						    {
							    CLEAR_BIT(DDRD,a_pin);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <GPIO_setPinDirection+0xb8>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <GPIO_setPinDirection+0xb4>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret
						    }
						    else if(OUTPUT)
						    {
							    SET_BIT(DDRD,a_pin);
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <GPIO_setPinDirection+0xd0>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <GPIO_setPinDirection+0xcc>
 156:	82 2b       	or	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <GPIO_setPinValue>:
	
}
 /*				set pin in Port by value 0 or 1           				         */
void GPIO_setPinValue(Uint8 a_port , Uint8 a_pin, Uint8 a_value)
{
	switch(a_port)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	11 f1       	breq	.+68     	; 0x1a4 <GPIO_setPinValue+0x48>
 160:	30 f0       	brcs	.+12     	; 0x16e <GPIO_setPinValue+0x12>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	d1 f1       	breq	.+116    	; 0x1da <GPIO_setPinValue+0x7e>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f4       	brne	.+2      	; 0x16c <GPIO_setPinValue+0x10>
 16a:	52 c0       	rjmp	.+164    	; 0x210 <GPIO_setPinValue+0xb4>
 16c:	08 95       	ret
	{
		case GPIO_PORTA :    if (a_value == HIGH)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	59 f4       	brne	.+22     	; 0x188 <GPIO_setPinValue+0x2c>
							{
								SET_BIT(PORTA,a_pin);
 172:	2b b3       	in	r18, 0x1b	; 27
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <GPIO_setPinValue+0x22>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <GPIO_setPinValue+0x1e>
 182:	82 2b       	or	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
							}
							else if(a_value == LOW)
 188:	41 11       	cpse	r20, r1
 18a:	5c c0       	rjmp	.+184    	; 0x244 <GPIO_setPinValue+0xe8>
							{
								CLEAR_BIT(PORTA,a_pin);
 18c:	2b b3       	in	r18, 0x1b	; 27
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <GPIO_setPinValue+0x3c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <GPIO_setPinValue+0x38>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
							}
							 break;
		case GPIO_PORTB :    if (a_value == HIGH)
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	59 f4       	brne	.+22     	; 0x1be <GPIO_setPinValue+0x62>
						 	{
								SET_BIT(PORTB,a_pin);
 1a8:	28 b3       	in	r18, 0x18	; 24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <GPIO_setPinValue+0x58>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <GPIO_setPinValue+0x54>
 1b8:	82 2b       	or	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
							}
							else if(a_value == LOW)
 1be:	41 11       	cpse	r20, r1
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <GPIO_setPinValue+0xe8>
							{
								CLEAR_BIT(PORTB,a_pin);
 1c2:	28 b3       	in	r18, 0x18	; 24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GPIO_setPinValue+0x72>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GPIO_setPinValue+0x6e>
 1d2:	80 95       	com	r24
 1d4:	82 23       	and	r24, r18
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	08 95       	ret
							}
							break;
		case GPIO_PORTC :    if (a_value == HIGH)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	59 f4       	brne	.+22     	; 0x1f4 <GPIO_setPinValue+0x98>
							{
								SET_BIT(PORTC,a_pin);
 1de:	25 b3       	in	r18, 0x15	; 21
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <GPIO_setPinValue+0x8e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <GPIO_setPinValue+0x8a>
 1ee:	82 2b       	or	r24, r18
 1f0:	85 bb       	out	0x15, r24	; 21
 1f2:	08 95       	ret
							}
							else if(a_value == LOW)
 1f4:	41 11       	cpse	r20, r1
 1f6:	26 c0       	rjmp	.+76     	; 0x244 <GPIO_setPinValue+0xe8>
							{
								CLEAR_BIT(PORTC,a_pin);
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <GPIO_setPinValue+0xa8>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <GPIO_setPinValue+0xa4>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
							}
							break;
		case GPIO_PORTD :    if (a_value == HIGH)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <GPIO_setPinValue+0xce>
							{
								SET_BIT(PORTD,a_pin);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <GPIO_setPinValue+0xc4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <GPIO_setPinValue+0xc0>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
							}
							else if(a_value == LOW)
 22a:	41 11       	cpse	r20, r1
 22c:	0b c0       	rjmp	.+22     	; 0x244 <GPIO_setPinValue+0xe8>
							{
								CLEAR_BIT(PORTD,a_pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_setPinValue+0xde>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_setPinValue+0xda>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <GPIO_getPinValue>:
}
/*				get value from pin in Port                      				 */
Uint8 GPIO_getPinValue(Uint8 a_port , Uint8 a_pin)
{
	Uint8 Local_Value =0;
	switch(a_port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	89 f0       	breq	.+34     	; 0x26c <GPIO_getPinValue+0x26>
 24a:	28 f0       	brcs	.+10     	; 0x256 <GPIO_getPinValue+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	c9 f0       	breq	.+50     	; 0x282 <GPIO_getPinValue+0x3c>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	11 f1       	breq	.+68     	; 0x298 <GPIO_getPinValue+0x52>
 254:	2c c0       	rjmp	.+88     	; 0x2ae <GPIO_getPinValue+0x68>
	{
		case GPIO_PORTA :     Local_Value=GET_BIT(PINA,a_pin); break;
 256:	29 b3       	in	r18, 0x19	; 25
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <GPIO_getPinValue+0x1c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <GPIO_getPinValue+0x18>
 266:	82 23       	and	r24, r18
 268:	89 bb       	out	0x19, r24	; 25
 26a:	08 95       	ret
		case GPIO_PORTB :     Local_Value=GET_BIT(PINB,a_pin); break;
 26c:	26 b3       	in	r18, 0x16	; 22
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <GPIO_getPinValue+0x32>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <GPIO_getPinValue+0x2e>
 27c:	82 23       	and	r24, r18
 27e:	86 bb       	out	0x16, r24	; 22
 280:	08 95       	ret
		case GPIO_PORTC :     Local_Value=GET_BIT(PINC,a_pin); break;
 282:	23 b3       	in	r18, 0x13	; 19
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <GPIO_getPinValue+0x48>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <GPIO_getPinValue+0x44>
 292:	82 23       	and	r24, r18
 294:	83 bb       	out	0x13, r24	; 19
 296:	08 95       	ret
		case GPIO_PORTD :     Local_Value=GET_BIT(PIND,a_pin); break;
 298:	20 b3       	in	r18, 0x10	; 16
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <GPIO_getPinValue+0x5e>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <GPIO_getPinValue+0x5a>
 2a8:	82 23       	and	r24, r18
 2aa:	80 bb       	out	0x10, r24	; 16
 2ac:	08 95       	ret

}
/*				get value from pin in Port                      				 */
Uint8 GPIO_getPinValue(Uint8 a_port , Uint8 a_pin)
{
	Uint8 Local_Value =0;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
		case GPIO_PORTC :     Local_Value=GET_BIT(PINC,a_pin); break;
		case GPIO_PORTD :     Local_Value=GET_BIT(PIND,a_pin); break;
		default			:								       break;
	}
	return Local_Value;
}
 2b0:	08 95       	ret

000002b2 <GSM_init>:

#include "UART.h"
#include "GSM.h"
void GSM_init(void)
{
     UART_init();
 2b2:	0e 94 13 03 	call	0x626	; 0x626 <UART_init>
 2b6:	08 95       	ret

000002b8 <GSM_sendMessage>:
}
void GSM_sendMessage(const Uint8 *telephoneNumber,const Uint8 *message)
       
{      
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	8c 01       	movw	r16, r24
 2c2:	eb 01       	movw	r28, r22
      
       UART_sendString("AT");
 2c4:	80 e6       	ldi	r24, 0x60	; 96
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 21 03 	call	0x642	; 0x642 <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	2f e3       	ldi	r18, 0x3F	; 63
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <GSM_sendMessage+0x1a>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <GSM_sendMessage+0x24>
 2dc:	00 00       	nop
       _delay_ms(1000);
       UART_sendByte(0x0D);/* \r ASCII code  */
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
 2e4:	2f e3       	ldi	r18, 0x3F	; 63
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	93 e0       	ldi	r25, 0x03	; 3
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <GSM_sendMessage+0x32>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <GSM_sendMessage+0x3c>
 2f4:	00 00       	nop
       
           _delay_ms(1000);

       UART_sendString("AT+CMGF=1");
 2f6:	83 e6       	ldi	r24, 0x63	; 99
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 21 03 	call	0x642	; 0x642 <UART_sendString>
 2fe:	2f e3       	ldi	r18, 0x3F	; 63
 300:	8d e0       	ldi	r24, 0x0D	; 13
 302:	93 e0       	ldi	r25, 0x03	; 3
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <GSM_sendMessage+0x4c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <GSM_sendMessage+0x56>
 30e:	00 00       	nop
       _delay_ms(1000);
       UART_sendByte(0x0D);/* \r ASCII code  */
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
     
        UART_sendString("AT+CGMS=");
 316:	8d e6       	ldi	r24, 0x6D	; 109
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 21 03 	call	0x642	; 0x642 <UART_sendString>
 31e:	2f e3       	ldi	r18, 0x3F	; 63
 320:	8d e0       	ldi	r24, 0x0D	; 13
 322:	93 e0       	ldi	r25, 0x03	; 3
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <GSM_sendMessage+0x6c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <GSM_sendMessage+0x76>
 32e:	00 00       	nop
        _delay_ms(1000);
        UART_sendByte(0x22);/* " ASCII code  */
 330:	82 e2       	ldi	r24, 0x22	; 34
 332:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
 336:	2f e3       	ldi	r18, 0x3F	; 63
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <GSM_sendMessage+0x84>
 344:	00 c0       	rjmp	.+0      	; 0x346 <GSM_sendMessage+0x8e>
 346:	00 00       	nop
        _delay_ms(1000);
        UART_sendString(telephoneNumber);
 348:	c8 01       	movw	r24, r16
 34a:	0e 94 21 03 	call	0x642	; 0x642 <UART_sendString>
 34e:	2f e3       	ldi	r18, 0x3F	; 63
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	93 e0       	ldi	r25, 0x03	; 3
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <GSM_sendMessage+0x9c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <GSM_sendMessage+0xa6>
 35e:	00 00       	nop
        _delay_ms(1000);
        UART_sendByte(0x22);/* " ASCII code  */
 360:	82 e2       	ldi	r24, 0x22	; 34
 362:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
 366:	2f e3       	ldi	r18, 0x3F	; 63
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	93 e0       	ldi	r25, 0x03	; 3
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <GSM_sendMessage+0xb4>
 374:	00 c0       	rjmp	.+0      	; 0x376 <GSM_sendMessage+0xbe>
 376:	00 00       	nop
        _delay_ms(1000);
        UART_sendByte(0x0D);/* \r ASCII code  */
 378:	8d e0       	ldi	r24, 0x0D	; 13
 37a:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
        //__delay_ms(1000);
        
        UART_sendString(message);
 37e:	ce 01       	movw	r24, r28
 380:	0e 94 21 03 	call	0x642	; 0x642 <UART_sendString>
 384:	2f e3       	ldi	r18, 0x3F	; 63
 386:	8d e0       	ldi	r24, 0x0D	; 13
 388:	93 e0       	ldi	r25, 0x03	; 3
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <GSM_sendMessage+0xd2>
 392:	00 c0       	rjmp	.+0      	; 0x394 <GSM_sendMessage+0xdc>
 394:	00 00       	nop
        _delay_ms(1000);
       UART_sendByte(0x0D);/* \r ASCII code  */
 396:	8d e0       	ldi	r24, 0x0D	; 13
 398:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
 39c:	2f e3       	ldi	r18, 0x3F	; 63
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <GSM_sendMessage+0xea>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <GSM_sendMessage+0xf4>
 3ac:	00 00       	nop
       _delay_ms(1000);
       UART_sendByte(26);/*CTRL +Z */
 3ae:	8a e1       	ldi	r24, 0x1A	; 26
 3b0:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
 3b4:	2f e3       	ldi	r18, 0x3F	; 63
 3b6:	8d e0       	ldi	r24, 0x0D	; 13
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <GSM_sendMessage+0x102>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <GSM_sendMessage+0x10c>
 3c4:	00 00       	nop
       _delay_ms(1000);
       UART_sendByte(0x0D);/* \r ASCII code  */
 3c6:	8d e0       	ldi	r24, 0x0D	; 13
 3c8:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
       UART_sendByte(0x0D);/* \r ASCII code  */
 3cc:	8d e0       	ldi	r24, 0x0D	; 13
 3ce:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
       UART_sendByte(0x0D);/* \r ASCII code  */
 3d2:	8d e0       	ldi	r24, 0x0D	; 13
 3d4:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>

 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	08 95       	ret

000003e2 <LCD_sendCommand>:
		LCD_sendCommand(CURSOR_OFF);
		LCD_clear();
}
void LCD_sendCommand(Uint8 command)
{
	CLEAR_BIT(LCD_CTR_PORT,RS);
 3e2:	a8 98       	cbi	0x15, 0	; 21
	CLEAR_BIT(LCD_CTR_PORT,RW);
 3e4:	a9 98       	cbi	0x15, 1	; 21
 3e6:	e9 ef       	ldi	r30, 0xF9	; 249
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_sendCommand+0x8>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_sendCommand+0xe>
 3f0:	00 00       	nop
	_delay_ms(1);
	SET_BIT(LCD_CTR_PORT,EN);
 3f2:	aa 9a       	sbi	0x15, 2	; 21
 3f4:	e9 ef       	ldi	r30, 0xF9	; 249
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_sendCommand+0x16>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_sendCommand+0x1c>
 3fe:	00 00       	nop
	_delay_ms(1);
	#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =(command&0XF0)|(LCD_DATA_PORT&0x0F);		
 400:	95 b3       	in	r25, 0x15	; 21
 402:	28 2f       	mov	r18, r24
 404:	20 7f       	andi	r18, 0xF0	; 240
 406:	9f 70       	andi	r25, 0x0F	; 15
 408:	92 2b       	or	r25, r18
 40a:	95 bb       	out	0x15, r25	; 21
 40c:	e9 ef       	ldi	r30, 0xF9	; 249
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
		#else 
		    LCD_DATA_PORT =((command&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
 418:	aa 98       	cbi	0x15, 2	; 21
 41a:	e9 ef       	ldi	r30, 0xF9	; 249
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
 426:	aa 9a       	sbi	0x15, 2	; 21
		#ifdef  UPPER_PORT_PINS
			LCD_DATA_PORT =((command&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
 428:	25 b3       	in	r18, 0x15	; 21
 42a:	f0 e1       	ldi	r31, 0x10	; 16
 42c:	8f 9f       	mul	r24, r31
 42e:	c0 01       	movw	r24, r0
 430:	11 24       	eor	r1, r1
 432:	92 2f       	mov	r25, r18
 434:	9f 70       	andi	r25, 0x0F	; 15
 436:	89 2b       	or	r24, r25
 438:	85 bb       	out	0x15, r24	; 21
 43a:	89 ef       	ldi	r24, 0xF9	; 249
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
		#else
			LCD_DATA_PORT =((command&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
 446:	aa 98       	cbi	0x15, 2	; 21
 448:	e9 ef       	ldi	r30, 0xF9	; 249
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	08 95       	ret

00000456 <LCD_displayChar>:
	
	
}
void LCD_displayChar(char data)
{
		SET_BIT(LCD_CTR_PORT,RS);
 456:	a8 9a       	sbi	0x15, 0	; 21
		CLEAR_BIT(LCD_CTR_PORT,RW);
 458:	a9 98       	cbi	0x15, 1	; 21
 45a:	e9 ef       	ldi	r30, 0xF9	; 249
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_displayChar+0x8>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__stack+0x5>
 464:	00 00       	nop
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
 466:	aa 9a       	sbi	0x15, 2	; 21
 468:	e9 ef       	ldi	r30, 0xF9	; 249
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__stack+0x13>
 472:	00 00       	nop
		_delay_ms(1);
		#if DATA_BITS_MODE ==4
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =(data&0XF0)|(LCD_DATA_PORT&0x0F);
 474:	95 b3       	in	r25, 0x15	; 21
 476:	28 2f       	mov	r18, r24
 478:	20 7f       	andi	r18, 0xF0	; 240
 47a:	9f 70       	andi	r25, 0x0F	; 15
 47c:	92 2b       	or	r25, r18
 47e:	95 bb       	out	0x15, r25	; 21
 480:	e9 ef       	ldi	r30, 0xF9	; 249
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__stack+0x25>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__stack+0x2b>
 48a:	00 00       	nop
		#else
		LCD_DATA_PORT =((data&0XF0)>>4)|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
 48c:	aa 98       	cbi	0x15, 2	; 21
 48e:	e9 ef       	ldi	r30, 0xF9	; 249
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__stack+0x33>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__stack+0x39>
 498:	00 00       	nop
		_delay_ms(1);
		SET_BIT(LCD_CTR_PORT,EN);
 49a:	aa 9a       	sbi	0x15, 2	; 21
		#ifdef  UPPER_PORT_PINS
		LCD_DATA_PORT =((data&0X0F)<<4)|(LCD_DATA_PORT&0x0F);
 49c:	25 b3       	in	r18, 0x15	; 21
 49e:	f0 e1       	ldi	r31, 0x10	; 16
 4a0:	8f 9f       	mul	r24, r31
 4a2:	c0 01       	movw	r24, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	92 2f       	mov	r25, r18
 4a8:	9f 70       	andi	r25, 0x0F	; 15
 4aa:	89 2b       	or	r24, r25
 4ac:	85 bb       	out	0x15, r24	; 21
 4ae:	89 ef       	ldi	r24, 0xF9	; 249
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__stack+0x53>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__stack+0x59>
 4b8:	00 00       	nop
		#else
		LCD_DATA_PORT =((data&0X0F))|(LCD_DATA_PORT&0xF0);
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTR_PORT,EN);
 4ba:	aa 98       	cbi	0x15, 2	; 21
 4bc:	e9 ef       	ldi	r30, 0xF9	; 249
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <__stack+0x61>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__stack+0x67>
 4c6:	00 00       	nop
 4c8:	08 95       	ret

000004ca <LCD_displayString>:
		_delay_ms(1);
		#endif
		
}
void LCD_displayString(char*data)
{
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	fc 01       	movw	r30, r24
	Uint8 i=0;
	while(data[i]!='\0')
 4d2:	80 81       	ld	r24, Z
 4d4:	88 23       	and	r24, r24
 4d6:	59 f0       	breq	.+22     	; 0x4ee <LCD_displayString+0x24>
 4d8:	8f 01       	movw	r16, r30
 4da:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayChar(data[i]);
 4dc:	0e 94 2b 02 	call	0x456	; 0x456 <LCD_displayChar>
		i++;
 4e0:	cf 5f       	subi	r28, 0xFF	; 255
		
}
void LCD_displayString(char*data)
{
	Uint8 i=0;
	while(data[i]!='\0')
 4e2:	f8 01       	movw	r30, r16
 4e4:	ec 0f       	add	r30, r28
 4e6:	f1 1d       	adc	r31, r1
 4e8:	80 81       	ld	r24, Z
 4ea:	81 11       	cpse	r24, r1
 4ec:	f7 cf       	rjmp	.-18     	; 0x4dc <LCD_displayString+0x12>
	{
		LCD_displayChar(data[i]);
		i++;
	}
}
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <LCD_clear>:
void LCD_clear()
{
	LCD_sendCommand(CLEAR_COMMAND);
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_sendCommand>
 4fc:	08 95       	ret

000004fe <LCD_init>:
 */ 
#include "LCD.h"

void LCD_init(void)
{
	LCD_CTR_PORT_DIR|=(1<<EN)|(1<<RS)|(1<<RW);
 4fe:	84 b3       	in	r24, 0x14	; 20
 500:	87 60       	ori	r24, 0x07	; 7
 502:	84 bb       	out	0x14, r24	; 20
	#if DATA_BITS_MODE ==4
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR|=0XF0;
 504:	84 b3       	in	r24, 0x14	; 20
 506:	80 6f       	ori	r24, 0xF0	; 240
 508:	84 bb       	out	0x14, r24	; 20
		#else
			LCD_DATA_PORT_DIR|=0X0F;
		#endif	
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_sendCommand>
		LCD_sendCommand(FOUR_BITS_DATA_2_LINE_MODE);
 510:	88 e2       	ldi	r24, 0x28	; 40
 512:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_sendCommand>
	#elif DATA_BITS_MODE ==8
		LCD_DATA_PORT_DIR =0XFF;
		LCD_sendCommand(EIGHT_BITS_DATA_2_LINE_MODE);
	#endif
		LCD_sendCommand(CURSOR_OFF);
 516:	8e e0       	ldi	r24, 0x0E	; 14
 518:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_sendCommand>
		LCD_clear();
 51c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_clear>
 520:	08 95       	ret

00000522 <LCD_goToRowColumn>:
	LCD_displayString(data);
}
void LCD_goToRowColumn(Uint8 row,Uint8 colum)
{
		Uint8 address=0;
	switch(row)
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	31 f0       	breq	.+12     	; 0x532 <LCD_goToRowColumn+0x10>
 526:	60 f0       	brcs	.+24     	; 0x540 <LCD_goToRowColumn+0x1e>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	29 f0       	breq	.+10     	; 0x536 <LCD_goToRowColumn+0x14>
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	29 f0       	breq	.+10     	; 0x53a <LCD_goToRowColumn+0x18>
 530:	06 c0       	rjmp	.+12     	; 0x53e <LCD_goToRowColumn+0x1c>
	{
		case 0 : address =colum;			break;
		case 1 : address=colum+0X40;		break;
 532:	60 5c       	subi	r22, 0xC0	; 192
 534:	05 c0       	rjmp	.+10     	; 0x540 <LCD_goToRowColumn+0x1e>
		case 2 : address=colum+0X10;		break;
 536:	60 5f       	subi	r22, 0xF0	; 240
 538:	03 c0       	rjmp	.+6      	; 0x540 <LCD_goToRowColumn+0x1e>
		case 3 : address=colum+0X50;		break;
 53a:	60 5b       	subi	r22, 0xB0	; 176
 53c:	01 c0       	rjmp	.+2      	; 0x540 <LCD_goToRowColumn+0x1e>
	LCD_goToRowColumn( row, colum);
	LCD_displayString(data);
}
void LCD_goToRowColumn(Uint8 row,Uint8 colum)
{
		Uint8 address=0;
 53e:	60 e0       	ldi	r22, 0x00	; 0
		case 0 : address =colum;			break;
		case 1 : address=colum+0X40;		break;
		case 2 : address=colum+0X10;		break;
		case 3 : address=colum+0X50;		break;
	}
	LCD_sendCommand(SET_CURSOR_LOCATION | address);
 540:	86 2f       	mov	r24, r22
 542:	80 68       	ori	r24, 0x80	; 128
 544:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_sendCommand>
 548:	08 95       	ret

0000054a <LCD_displayStringRowColumn>:
void LCD_clear()
{
	LCD_sendCommand(CLEAR_COMMAND);
}
void LCD_displayStringRowColumn(Uint8 row,Uint8 colum, char *data)
{
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	ea 01       	movw	r28, r20
	LCD_goToRowColumn( row, colum);
 550:	0e 94 91 02 	call	0x522	; 0x522 <LCD_goToRowColumn>
	LCD_displayString(data);
 554:	ce 01       	movw	r24, r28
 556:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_displayString>
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <main>:
#include "LCD.h"
#include "GPIO.h"

int main(void)
{
    LCD_init();
 560:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_init>
	GSM_init();
 564:	0e 94 59 01 	call	0x2b2	; 0x2b2 <GSM_init>
	GPIO_setPinDirection(GPIO_PORTA , PIN0, INPUT);
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setPinDirection>
	GPIO_setPinDirection(GPIO_PORTA , PIN1, OUTPUT);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setPinDirection>
	GPIO_setPinValue(GPIO_PORTA , PIN1, LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
	GPIO_setPinDirection(GPIO_PORTD , PIN2, OUTPUT);
 586:	41 e0       	ldi	r20, 0x01	; 1
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	83 e0       	ldi	r24, 0x03	; 3
 58c:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setPinDirection>
	GPIO_setPinValue(GPIO_PORTD , PIN2, LOW);
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	62 e0       	ldi	r22, 0x02	; 2
 594:	83 e0       	ldi	r24, 0x03	; 3
 596:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
    while (1) 
    {
		if(GPIO_getPinValue(GPIO_PORTA , PIN0)==HIGH)
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_getPinValue>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	19 f5       	brne	.+70     	; 0x5ec <main+0x8c>
		{
			LCD_clear();
 5a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_clear>
			LCD_displayString("Gas is detected");
 5aa:	86 e7       	ldi	r24, 0x76	; 118
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_displayString>
			LCD_displayStringRowColumn(1,0, "there is fire ");
 5b2:	46 e8       	ldi	r20, 0x86	; 134
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 a5 02 	call	0x54a	; 0x54a <LCD_displayStringRowColumn>
			GPIO_setPinValue(GPIO_PORTA , PIN1, HIGH);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
			GPIO_setPinValue(GPIO_PORTD , PIN2, HIGH);
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
			GSM_sendMessage("02001032775611","fire in the star factory");
 5d2:	65 e9       	ldi	r22, 0x95	; 149
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	8e ea       	ldi	r24, 0xAE	; 174
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <GSM_sendMessage>
			while(GPIO_getPinValue(GPIO_PORTA , PIN0)==HIGH);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_getPinValue>
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	d1 f3       	breq	.-12     	; 0x5de <main+0x7e>
 5ea:	d7 cf       	rjmp	.-82     	; 0x59a <main+0x3a>
		}
		else if(GPIO_getPinValue(GPIO_PORTA , PIN0)==LOW)
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_getPinValue>
 5f4:	81 11       	cpse	r24, r1
 5f6:	d1 cf       	rjmp	.-94     	; 0x59a <main+0x3a>
		{
			LCD_clear();
 5f8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_clear>
			LCD_displayString("Gas is NO detected");
 5fc:	8d eb       	ldi	r24, 0xBD	; 189
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 65 02 	call	0x4ca	; 0x4ca <LCD_displayString>
			
			GPIO_setPinValue(GPIO_PORTA , PIN1, LOW);
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
			GPIO_setPinValue(GPIO_PORTD , PIN2, LOW);
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	62 e0       	ldi	r22, 0x02	; 2
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	0e 94 ae 00 	call	0x15c	; 0x15c <GPIO_setPinValue>
			while(GPIO_getPinValue(GPIO_PORTA , PIN0)==LOW);
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 23 01 	call	0x246	; 0x246 <GPIO_getPinValue>
 620:	88 23       	and	r24, r24
 622:	d1 f3       	breq	.-12     	; 0x618 <main+0xb8>
 624:	ba cf       	rjmp	.-140    	; 0x59a <main+0x3a>

00000626 <UART_init>:
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	8b b9       	out	0x0b, r24	; 11
 62a:	88 e1       	ldi	r24, 0x18	; 24
 62c:	8a b9       	out	0x0a, r24	; 10
 62e:	86 e8       	ldi	r24, 0x86	; 134
 630:	80 bd       	out	0x20, r24	; 32
 632:	10 bc       	out	0x20, r1	; 32
 634:	8c e0       	ldi	r24, 0x0C	; 12
 636:	89 b9       	out	0x09, r24	; 9
 638:	08 95       	ret

0000063a <UART_sendByte>:
 63a:	5d 9b       	sbis	0x0b, 5	; 11
 63c:	fe cf       	rjmp	.-4      	; 0x63a <UART_sendByte>
 63e:	8c b9       	out	0x0c, r24	; 12
 640:	08 95       	ret

00000642 <UART_sendString>:
void UART_sendString(const Uint8* data)
{
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	fc 01       	movw	r30, r24
		Uint8 i = 0;
		while(data[i] != '\0')
 64a:	80 81       	ld	r24, Z
 64c:	88 23       	and	r24, r24
 64e:	59 f0       	breq	.+22     	; 0x666 <UART_sendString+0x24>
 650:	8f 01       	movw	r16, r30
 652:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_sendByte(data[i]);
 654:	0e 94 1d 03 	call	0x63a	; 0x63a <UART_sendByte>
			i++;
 658:	cf 5f       	subi	r28, 0xFF	; 255
    return UDR;		
}
void UART_sendString(const Uint8* data)
{
		Uint8 i = 0;
		while(data[i] != '\0')
 65a:	f8 01       	movw	r30, r16
 65c:	ec 0f       	add	r30, r28
 65e:	f1 1d       	adc	r31, r1
 660:	80 81       	ld	r24, Z
 662:	81 11       	cpse	r24, r1
 664:	f7 cf       	rjmp	.-18     	; 0x654 <UART_sendString+0x12>
		{
			UART_sendByte(data[i]);
			i++;
		}

}
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
